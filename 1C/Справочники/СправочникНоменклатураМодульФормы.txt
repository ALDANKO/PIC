Перем мТекущееРасширениеФайла;
Перем мТекущееОсновноеИзображение;
Перем мПустаяКартинка;
Перем мТипЦенДляПечати;
Перем мФормироватьНаименованиеПолноеАвтоматически;
Перем мЖирныйШрифт;
Перем мЕдиницаИзмеренияОбъема, мЕдиницаИзмеренияВеса;
Перем мИспользоватьХарактеристики, мИспользоватьСерии;

Перем мДеревоМакетов;
Перем мПодменюПечати;
Перем мПечатьПоУмолчанию;

Перем мИспользоватьСерийныеНомера;
Перем мВалютаУправленческогоУчета;

Перем мКонстанты;

Перем мПоставщик;
Перем мСтраницыПослеЗаписи;
Перем мСписокТиповЦенНоменклатуры;
Перем мДеревоРамок;
Перем мРеквизитыСАвтозаполнением; // реквизиты, которые заполняются системой при записи элемента

Перем мТекущаяНастройка;
Перем СтруктураСкрываемыхСтраниц;

//ВСТАВКА РЕЗОНАНС
Перем Р_СтарыйПроект;
//КОНЕЦ ВСТАВКИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, , Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает в поле картинки основное изображение номенклатуры
//
Процедура ПоказатьОсновноеИзображение() Экспорт

	Если ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка = Истина Тогда
		Если мТекущееОсновноеИзображение = Неопределено Тогда
			ЭлементыФормы.ОсновноеИзображение.Картинка = мПустаяКартинка;
		Иначе
			ЭлементыФормы.ОсновноеИзображение.Картинка = мТекущееОсновноеИзображение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьОсновноеИзображение()

// Показывает или прячет панель основного изображения в зависимости от пометки кнопки изображения
//
Процедура ПоказатьСпрятатьПанельОсновногоИзображения()

	Если ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка Тогда

		ЭлементыФормы.ПанельОсновногоИзображения.Свертка = РежимСверткиЭлементаУправления.Нет;

	Иначе

		ЭлементыФормы.ПанельОсновногоИзображения.Свертка = РежимСверткиЭлементаУправления.Лево;

	КонецЕсли;

	ПоказатьОсновноеИзображение();

КонецПроцедуры // ПоказатьСпрятатьПанельОсновногоИзображения()

// Процедура устанавливает видимость для элементов формы
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость(ТолькоКнопкиНавигации = Ложь)

	Перем НомерТекущейСтраницы;

	// Погасим кнопки навигации.
	МассивВидимыхСтраниц = ПолучитьМассивДоступныхСтраниц(НомерТекущейСтраницы);
	Если МассивВидимыхСтраниц.Количество() = 0 Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Ложь;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыДалее.Доступность = Ложь;
	Иначе
		Если НомерТекущейСтраницы = 0 Тогда
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Истина;
		КонецЕсли;
		Если НомерТекущейСтраницы = МассивВидимыхСтраниц.ВГраница() Тогда
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыДалее.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыДалее.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ТолькоКнопкиНавигации Тогда
		Возврат;


	КонецЕсли;

	НаборКомплект    = (Набор Или Комплект);
	Товар            = Не (Услуга Или НаборКомплект);
	ДоступностьСерия = (мИспользоватьСерии И ВестиУчетПоСериям И Товар);

	// Системная видимость страниц.
	ТаблицаСтраниц.ЗаполнитьЗначения(Истина, "ВидимостьСистемная");
	УстановитьСвойствоВТЗ(ТаблицаСтраниц, "ПоУмолчанию"           , "ВидимостьСистемная", Не Набор);
	УстановитьСвойствоВТЗ(ТаблицаСтраниц, "Дополнительные"        , "ВидимостьСистемная", Не НаборКомплект);
	УстановитьСвойствоВТЗ(ТаблицаСтраниц, "КодыВесовогоТовара"    , "ВидимостьСистемная", Весовой);
	УстановитьСвойствоВТЗ(ТаблицаСтраниц, "Штрихкоды"             , "ВидимостьСистемная", Не Весовой);
	УстановитьСвойствоВТЗ(ТаблицаСтраниц, "ЦеныНоменклатуры"      , "ВидимостьСистемная", Не Набор);
	УстановитьСвойствоВТЗ(ТаблицаСтраниц, "НоменклатураПоставщика", "ВидимостьСистемная", Не (НЕ ЗначениеЗаполнено(ОсновнойПоставщик) Или НаборКомплект));
	УстановитьСвойствоВТЗ(ТаблицаСтраниц, "Характеристики"        , "ВидимостьСистемная", ВестиУчетПоХарактеристикам);
	УстановитьСвойствоВТЗ(ТаблицаСтраниц, "Серии"                 , "ВидимостьСистемная", ВестиУчетПоСериям);
	УстановитьСвойствоВТЗ(ТаблицаСтраниц, "Комплектующие"         , "ВидимостьСистемная", Не Услуга);
	УстановитьСвойствоВТЗ(ТаблицаСтраниц, "МестаХранения"         , "ВидимостьСистемная", (Не Услуга) И (Не Набор) И (Не НаборКомплект));

	// Системная видимость реквизитов.
	ТаблицаРеквизитов.ЗаполнитьЗначения(Истина, "ДоступностьСистемная");
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "ВестиУчетПоХарактеристикам"            , "ДоступностьСистемная", (Товар Или Комплект) И мИспользоватьХарактеристики);
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "ВестиУчетПоСериям"                     , "ДоступностьСистемная", Товар И мИспользоватьСерии);
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "Весовой"                               , "ДоступностьСистемная", Товар);
	
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "БланкСтрогогоУчета"                    , "ДоступностьСистемная", Товар И НЕ НаборКомплект);
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "УчитываетсяПоНоминальнойСтоимости"  	 , "ДоступностьСистемная", БланкСтрогогоУчета);
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "ТранспортнаяУслуга"                    , "ДоступностьСистемная", Услуга);
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "ЛьготаНДС"                    		 , "ДоступностьСистемная", СтавкаНДС = Перечисления.СтавкиНДС.БезНДС ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НеНДС);
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "КодЛьготы"                    		 , "ДоступностьСистемная", СтавкаНДС = Перечисления.СтавкиНДС.БезНДС ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НеНДС);
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной" , "ДоступностьСистемная", ИзмеряетсяТолькоВСуммовомВыражении);
	
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "ВестиПартионныйУчетПоСериям"           , "ДоступностьСистемная", ДоступностьСерия);
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "ВестиСерийныеНомера"                   , "ДоступностьСистемная", Товар И мИспользоватьСерийныеНомера);

	// Системная обязательность реквизитов.
	ТаблицаРеквизитов.ЗаполнитьЗначения(Ложь, "ОбязательностьСистемная");
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "БазоваяЕдиницаИзмерения", "ОбязательностьСистемная", Не Услуга);
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "ЕдиницаХраненияОстатков", "ОбязательностьСистемная", Не Услуга);
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "ЕдиницаДляОтчетов"      , "ОбязательностьСистемная", Не Услуга);
	УстановитьСвойствоВТЗ(ТаблицаРеквизитов, "ВидНоменклатуры"        , "ОбязательностьСистемная", Истина);

	// Видимость колонок в табличных полях.
	УстановитьВидимостьКолонокТП("Штрихкоды");
	УстановитьВидимостьКолонокТП("КодыВесовогоТовара");
	УстановитьВидимостьКолонокТП("НоменклатураКонтрагентов");
	УстановитьВидимостьКолонокТП("Комплектующие");

	УстановитьВидимостьПомощник();

	УстановитьОтборыДляТЧ();
	
	ЭлементыФормы.НоменклатураГТД.Доступность = НЕ ЭтоНовый();
	
	ЭлементыФормы.ПодакцизныйТовар.Доступность = Не Услуга;
	ЭлементыФормы.СтатьяДекларацииПоАкцизномуНалогу.Доступность 		= ПодакцизныйТовар;
	ЭлементыФормы.НадписьСтатьяДекларацииПоАкцизномуНалогу.Доступность 	= ПодакцизныйТовар;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура управляет внешним видом формы при открытии.
//
Процедура УстановитьВидимостьПриОткрытии()

	СписокКнопокФайлов = Новый СписокЗначений;
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
	РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);

	Если НЕ ЗначениеЗаполнено(мЕдиницаИзмеренияВеса) Тогда
		ЭлементыФормы.ЕдиницыИзмерения.Колонки.Вес.ТекстШапки = "Вес (не назначена единица измерения)";
	Иначе
		ЭлементыФормы.ЕдиницыИзмерения.Колонки.Вес.ТекстШапки = "Вес (" + СокрЛП(мЕдиницаИзмеренияВеса) + ")";
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(мЕдиницаИзмеренияОбъема) Тогда
		ЭлементыФормы.ЕдиницыИзмерения.Колонки.Объем.ТекстШапки = "Объем (не назначена единица измерения)";
	Иначе
		ЭлементыФормы.ЕдиницыИзмерения.Колонки.Объем.ТекстШапки = "Объем (" + СокрЛП(мЕдиницаИзмеренияОбъема) + ")";
	КонецЕсли;

	// Установим сортировку комплектующих на закладке "Комплектующие".
	ЭлементыФормы.Комплектующие.НастройкаПорядка.Комплектующая.Доступность               = Истина;
	ЭлементыФормы.Комплектующие.НастройкаПорядка.ХарактеристикаКомплектующей.Доступность = Истина;
	
	//***160728 Поход для продукции
	Если ЭтотОбъект.Родитель.Код="000000004" или
		ЭтотОбъект.Родитель.Родитель.Код="000000004" тогда
		ЭлементыФормы.НадписьПоход.Видимость=	Истина;
		ЭлементыФормы.Поход.Видимость		=	Истина;
		ЭлементыФормы.КодПИК.Видимость		=	Истина;
		ЭлементыФормы.НадписьКодПИК.Видимость=	Истина;
	Иначе	
		ЭлементыФормы.НадписьПоход.Видимость=	Ложь;
		ЭлементыФормы.Поход.Видимость		=	Ложь;
		ЭлементыФормы.КодПИК.Видимость		=	Ложь;
		ЭлементыФормы.НадписьКодПИК.Видимость=	Ложь;
	КонецЕсли;
	//***160728

КонецПроцедуры // УстановитьВидимостьПриОткрытии()

// Процедура устанавливает видимость в режиме помощника.
//
Процедура УстановитьВидимостьПомощник()

	Перем НомерТекущейСтраницы;

	// Установим видимость и порядок страниц.
	КоличествоСтраниц = ТаблицаСтраниц.Количество() - 1;
	Для Тмп = 0 По КоличествоСтраниц Цикл
		Страница = ТаблицаСтраниц[КоличествоСтраниц - Тмп];
		СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы.Найти(Страница.Имя);
		СтраницаПанели.Видимость = Страница.Видимость И Страница.ВидимостьСистемная;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Сдвинуть(СтраницаПанели, КоличествоСтраниц - Тмп - ЭлементыФормы.ОсновнаяПанель.Страницы.Индекс(СтраницаПанели));
	КонецЦикла;

	Для Каждого СтраницаПослеЗаписи Из мСтраницыПослеЗаписи Цикл
		СтраницаПослеЗаписи.Ключ.Доступность = Не ЭтоНовый();
	КонецЦикла;

	// Погасим основную панель, если все страницы невидимы.
	Если ПолучитьМассивДоступныхСтраниц(НомерТекущейСтраницы, Истина).Количество() = 0 Тогда
		ЭлементыФормы.ОсновнаяПанель.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Видимость = Истина;
	КонецЕсли;

	// Установим видимость реквизитов.
	Для Каждого Реквизит Из ТаблицаРеквизитов Цикл
		ЭлементыФормы[Реквизит.Имя].Видимость = Реквизит.Доступность И Реквизит.ДоступностьСистемная;

		// Для полей ввода еще установим доступность у соответствующей надписи,
		// а также автоотметку незаполненного.
		Если Не мСписокВозможныхРеквизитов[Реквизит.Имя] Тогда
			ЭлементыФормы["Надпись" + Реквизит.Имя].Видимость = Реквизит.Доступность И Реквизит.ДоступностьСистемная;
			ЭлементыФормы[Реквизит.Имя].АвтоотметкаНезаполненного = Реквизит.Обязательность Или Реквизит.ОбязательностьСистемная;

			Если НЕ ЗначениеЗаполнено(ЭлементыФормы[Реквизит.Имя].Значение) Тогда
				ЭлементыФормы[Реквизит.Имя].ОтметкаНезаполненного = Реквизит.Обязательность Или Реквизит.ОбязательностьСистемная;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Если все ЭУ, относящиеся к рамке, скрыты, то нужно скрыть и саму рамку.
	Для Каждого Рамка Из мДеревоРамок.Строки Цикл
		ФлагВидимости = Ложь;

		Для Каждого СтрокаЭУ Из Рамка.Строки Цикл
			Если СтрокаЭУ.ИмяЭУ.Видимость Тогда
				ФлагВидимости = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Рамка.ИмяЭУ.Видимость = ФлагВидимости;
	КонецЦикла;

КонецПроцедуры // УстановитьВидимостьПомощник()

// Процедура заполняет по реквизиту формы ВидНоменлатуры признаки Услуга и Набор
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьПризнакиПоВидуНоменклатуры()
	
	Услуга   = (ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	Набор    = (ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	Комплект = (ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Комплект);

	Если Услуга Или Набор Или Комплект Тогда
		СтруктураФлагов = Новый Структура;
		СтруктураФлагов.Вставить("ВестиУчетПоСериям");
		СтруктураФлагов.Вставить("ВестиПартионныйУчетПоСериям");
		СтруктураФлагов.Вставить("Весовой");
		СтруктураФлагов.Вставить("ВестиСерийныеНомера");

		СтруктураФлагов.Вставить("БланкСтрогогоУчета");
		СтруктураФлагов.Вставить("УчитываетсяПоНоминальнойСтоимости");
		
		Если Услуга Или Набор Тогда
			СтруктураФлагов.Вставить("ВестиУчетПоХарактеристикам");
		КонецЕсли;

		Если Не Услуга Тогда
	    	СтруктураФлагов.Вставить("ТранспортнаяУслуга");
		КонецЕсли;
		
		СнятьФлаги(СтруктураФлагов);	
		
	ИначеЕсли НЕ Услуга Тогда
		
		СтруктураФлагов = Новый Структура;
		СтруктураФлагов.Вставить("ТранспортнаяУслуга");
		СнятьФлаги(СтруктураФлагов);	
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПризнакиПоВидуНоменклатуры()

// Процедура снимает флаги, имена которых переданы в структуре, если флаги установлены.
//
// Параметры:
//  СтруктураФлагов - структура с именами флагов.
//
Процедура СнятьФлаги(СтруктураФлагов)

	Для Каждого ИмяФлага Из СтруктураФлагов Цикл
		Если ЭтотОбъект[ИмяФлага.Ключ] Тогда
			ЭтотОбъект[ИмяФлага.Ключ] = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // СнятьФлаги()

// Процедура заполняет реквизиты значениями по умолчанию.
//
Процедура ЗаполнитьРеквизитыПоУмолчанию()

	Если НЕ ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
		БазоваяЕдиницаИзмерения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяЕдиницаПоКлассификатору");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		Если ЗначениеЗаполнено(Родитель.ВидНоменклатуры) Тогда
			ВидНоменклатуры = Родитель.ВидНоменклатуры;
		Иначе
			ВидНоменклатуры = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойВидНоменклатуры");
		КонецЕсли;

		ПриИзмененииВидаНоменклатуры();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьРеквизитыПоУмолчанию()

// Процедура заполняет по реквизиту формы СтавкаНДС признак ЛьготаНДС
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьПризнакиПоСтавкеНДС()
	Если  СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС 
		И СтавкаНДС <> Перечисления.СтавкиНДС.НеНДС Тогда
		ЭлементыФормы.ЛьготаНДС.Значение = "";
		ЭлементыФормы.КодЛьготы.Значение = "";
	КонецЕсли
КонецПроцедуры // ЗаполнитьПризнакиПоСтавкеНДС()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
Процедура ДействиеПодбор()

	СписокВидовПодбора = Новый СписокЗначений();
	СписокВидовПодбора.Добавить(, "По справочнику");

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда",             "");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);
	СтруктураПараметровПодбора.Вставить("Заголовок",           "Подбор комплектующих в " + Наименование);
	СтруктураПараметровПодбора.Вставить("ЕстьКоличество",      Истина);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена",            Ложь);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия",           Ложь);
	СтруктураПараметровПодбора.Вставить("Склад"              , Неопределено);

	// Открываем форму подбора.
	ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров = СтруктураПараметровПодбора;
	ФормаПодбора.Открыть();

КонецПроцедуры // ДействиеПодбор()

// Процедура управляет видимостью колонок "Характеристика", "Серия" и "Качество"
// заданного табличного поля
//
// Параметры
//  ИмяТП - <Строка>
//        - имя табличного поля
//
Процедура УстановитьВидимостьКолонокТП(ИмяТП)

	Товар = Не (Услуга Или Набор Или Комплект);

	ВидимостьХарактеристики = (Товар Или Комплект) И мИспользоватьХарактеристики И ВестиУчетПоХарактеристикам;
	ВидимостьСерии          = Товар И мИспользоватьСерии И ВестиУчетПоСериям;
	ВидимостьКачество       = Товар;

	Колонки = ЭлементыФормы[ИмяТП].Колонки;

	КолонкаХарактеристика = Колонки.Найти("ХарактеристикаНоменклатуры");
	Если КолонкаХарактеристика <> Неопределено Тогда
		КолонкаХарактеристика.Видимость         = ВидимостьХарактеристики;
		КолонкаХарактеристика.ИзменятьВидимость = ВидимостьХарактеристики;
	КонецЕсли;

	КолонкаСерия = Колонки.Найти("СерияНоменклатуры");
	Если КолонкаСерия <> Неопределено Тогда
		КолонкаСерия.Видимость         = ВидимостьСерии;
		КолонкаСерия.ИзменятьВидимость = ВидимостьСерии;
	КонецЕсли;

	КолонкаКачество = Колонки.Найти("Качество");
	Если КолонкаКачество <> Неопределено Тогда
		КолонкаКачество.Видимость         = ВидимостьКачество;
		КолонкаКачество.ИзменятьВидимость = ВидимостьКачество;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьКолонокТП()

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

	Если ПустаяСтрока(НаименованиеПолное) 
	 ИЛИ НаименованиеПолное = Наименование Тогда
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		мФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
//
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		НаименованиеПолное = Наименование;
	КонецЕсли;

КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

// Процедура записывает единицу хранения остатков номенклатуры.
//
Процедура ПроверитьЕдиницуХраненияОстатков(Отказ)

	Если ЗначениеЗаполнено(ЕдиницаХраненияОстатков) Тогда
		Возврат;
	КонецЕсли; 

	ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, Ссылка);
	Если ВыборкаЕдиниц.Следующий() Тогда
		НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
	Иначе
		НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();

		НайденнаяЕдиницаОбъект.Наименование            = СокрЛП(БазоваяЕдиницаИзмерения);
		НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = БазоваяЕдиницаИзмерения;
		НайденнаяЕдиницаОбъект.Коэффициент             = 1;
		НайденнаяЕдиницаОбъект.Владелец                = Ссылка;

		Попытка
			НайденнаяЕдиницаОбъект.Записать();
		Исключение
			Сообщить("Не удалось записать единицу хранения остатков: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
		
	КонецЕсли;
	
	ЕдиницаХраненияОстатков = НайденнаяЕдиница;
	
	Попытка
		ЗаписатьВФорме();
	Исключение
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры // ПроверитьЕдиницуХраненияОстатков()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии для Формы.
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
	ОбновитьДанные();
	
	УстановитьВидимостьПриОткрытии();
	
	мТекущееОсновноеИзображение = ОсновноеИзображение.Хранилище.Получить();

	ПоказыватьКартинку = ВосстановитьЗначение("Справочники.Номенклатура.ФормаЭлемента.Изображение");
	
	// Если сохраненного значения нет - режим показа картинки оставим по умолчанию.
	Если ПоказыватьКартинку <> Неопределено Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка = ПоказыватьКартинку;
	КонецЕсли;
	
	ПоказатьСпрятатьПанельОсновногоИзображения();

	ОбновитьДанные();

	УстановитьВидимостьПриОткрытии();
	
	УстановитьВидимость();
	
	Если НЕ мИспользоватьХарактеристики Тогда
		СтруктураСкрываемыхСтраниц.Вставить("Характеристики");
	КонецЕсли;
	Если НЕ мИспользоватьСерии Тогда
		СтруктураСкрываемыхСтраниц.Вставить("Серии");
	КонецЕсли;

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);
	
	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
	ПрочитатьЗаполнитьСвойстваИЗначения();

	ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
	ПрочитатьЗаполнитьКатегории();
	
	СформироватьТаблицуЦен();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьЗначение("Справочники.Номенклатура.ФормаЭлемента.Изображение", ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка);
	
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)

	Если Услуга Тогда
		Если ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
			ПроверитьЕдиницуХраненияОстатков(Отказ);
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Перед записью необходимо определить базовую единицу измерения!", Отказ);

		Иначе
			ПроверитьЕдиницуХраненияОстатков(Отказ);
		КонецЕсли;

		Если ПустаяСтрока(ЕдиницаХраненияОстатков) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Перед записью необходимо определить единицу хранения остатков!", Отказ);

		КонецЕсли;
	КонецЕсли;

	Если Не СтатьяЗатрат.Пустая() Тогда
		ВидЗатрат = СтатьяЗатрат.ВидЗатрат;
		Если ВидЗатрат = Перечисления.ВидыЗатрат.Материальные И Услуга Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Укажите нематериальную статью затрат на закладке ""По умолчанию"" !", Отказ);

		ИначеЕсли Не ВидЗатрат = Перечисления.ВидыЗатрат.Материальные И Не Услуга Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Укажите материальную статью затрат на закладке ""По умолчанию"" !", Отказ);

		КонецЕсли;
	КонецЕсли;

	// Обработка записи свойств и категорий
	Если НЕ Отказ Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
		Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
		Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события ПередЗаписью формы.
//
Процедура ПередЗаписью(Отказ)

	СтруктураОбязательныхПолей = Новый Структура;

	СтруктураПоискаДублей = Новый Структура;
	СтруктураПоискаДублей.Вставить("Код", "=");

	Для Каждого Реквизит Из ТаблицаРеквизитов Цикл
		Если (Реквизит.Обязательность Или Реквизит.ОбязательностьСистемная)
		   И мРеквизитыСАвтозаполнением[Реквизит.Имя] = Неопределено Тогда
			СтруктураОбязательныхПолей.Вставить(Реквизит.Имя, Реквизит.Представление);
		КонецЕсли;

		Если Реквизит.Уникальность Тогда
			СтруктураПоискаДублей.Вставить(Реквизит.Имя, "=");
		КонецЕсли;
	КонецЦикла;

	ПроверитьЗаполнениеРеквизитовНоменклатуры(СтруктураОбязательныхПолей, Отказ);

	Если Не Отказ Тогда
		ПроверитьУникальностьНоменклатуры(СтруктураПоискаДублей, Отказ);
	КонецЕсли;

КонецПроцедуры // ПередЗаписью()


// Обработчик события ПослеЗаписи формы.
//
Процедура ПослеЗаписи()
	
	ОбновитьДанные();

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
	// Оповестим форму списка о тома, что возможно надо обновить изображение.
	Оповестить("ЗаписанЭлементНоменклатуры", Ссылка, ЭтаФорма);

	УстановитьВидимость();
	
	ПрочитатьЗаполнитьСвойстваИЗначения();

	ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
	ПрочитатьЗаполнитьКатегории();

КонецПроцедуры // ПослеЗаписи()

// Обработчик события ПриИзмененииДанных формы.
//
Процедура ПриИзмененииДанных()

	ПрочитатьЗаполнитьСвойстваИЗначения();
	ПрочитатьЗаполнитьКатегории();
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();

	Обновить();	
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
    Перем Номенклатура, ЕдиницаИзмерения, Количество, Характеристика;
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		
		мТипЦенДляПечати = ЗначениеВыбора;
		
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда
		
		Если НЕ ОсновноеИзображение = ЗначениеВыбора Тогда
			ОсновноеИзображение = ЗначениеВыбора;
		КонецЕсли;
		
		мТекущееОсновноеИзображение = ОсновноеИзображение.Хранилище.Получить();
		ПоказатьОсновноеИзображение();
		
		СписокКнопокФайлов = Новый СписокЗначений;
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
		РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
		
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		ОбработкаПодбора(ЗначениеВыбора);
				
	КонецЕсли;

КонецПроцедуры


// Производит заполнение переданными из формы подбора данными.
//
// Параметры:
//  ЗначениеВыбора - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ЗначениеВыбора)

	Перем Номенклатура, ЕдиницаИзмерения, Количество, Характеристика;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);

	ТекЗапись = РегистрыСведений.КомплектующиеНоменклатуры.СоздатьМенеджерЗаписи();

	ТекЗапись.Номенклатура                = Ссылка;
	ТекЗапись.Комплектующая               = Номенклатура;
	ТекЗапись.Количество                  = Количество;
	ТекЗапись.ЕдиницаИзмерения            = ЕдиницаИзмерения;
	ТекЗапись.ХарактеристикаКомплектующей = Характеристика;

	Попытка
		ТекЗапись.Записать();
	Исключение
	КонецПопытки;

КонецПроцедуры // ОбработкаПодбора()

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

	ОбновитьСчетаУчета();
	
КонецПроцедуры

// Обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьФорму" и (Источник = Ссылка или (ТипЗнч(Источник) = Тип("СправочникСсылка.Номенклатура") и Источник.Пустая())) Тогда
		
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;
		
		Если ИмяОбновляемогоЭлемента = "ОсновноеИзображение" Тогда
			// обновляем картинку на первой странице
			Если мТекущееОсновноеИзображение <> ОсновноеИзображение.Хранилище.Получить() Тогда
				мТекущееОсновноеИзображение = ОсновноеИзображение.Хранилище.Получить();
				ПоказатьОсновноеИзображение();
			КонецЕсли;
					
		ИначеЕсли ИмяОбновляемогоЭлемента = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
			
			СписокКнопокФайлов = Новый СписокЗначений;
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
			РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);

		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.Файлы.
//
Процедура ДействияФормыФайлы(Кнопка)

	Если Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", Ссылка);
	
	РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку Изображения
//
Процедура ДействияФормыИзображение(Кнопка)

	Кнопка.Пометка = НЕ Кнопка.Пометка;

	ПоказатьСпрятатьПанельОсновногоИзображения();

КонецПроцедуры // ДействияФормыИзображение()

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования ТЧ "НоменклатураКонтрагентов".
//
Процедура НоменклатураКонтрагентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Отказ = Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);

КонецПроцедуры // НоменклатураКонтрагентовПриНачалеРедактирования()

// Обработчик события "ПриВыводеСтроки" ТЧ НоменклатураПоставщика.
//
Процедура НоменклатураПоставщикаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки.Записать Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Цена) Тогда
			ОформлениеСтроки.Ячейки.Цена.ОтметкаНезаполненного = Истина;
		Иначе
			ОформлениеСтроки.Ячейки.Цена.ОтметкаНезаполненного = Ложь;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Валюта) Тогда
			ОформлениеСтроки.Ячейки.Валюта.ОтметкаНезаполненного = Истина;
		Иначе
			ОформлениеСтроки.Ячейки.Валюта.ОтметкаНезаполненного = Ложь;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЕдиницаИзмерения) Тогда
			ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ОтметкаНезаполненного = Истина;
		Иначе
			ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	Иначе
		ОформлениеСтроки.Ячейки.Цена.ОтметкаНезаполненного = Ложь;
		ОформлениеСтроки.Ячейки.Валюта.ОтметкаНезаполненного = Ложь;
		ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

КонецПроцедуры // НоменклатураПоставщикаПриВыводеСтроки()

// Обработчик события "ПриОкончанииРедактирования" строки ТЧ НоменклатураПоставщика.
//
Процедура НоменклатураПоставщикаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ТекущаяСтрока = ЭлементыФормы.ЦеныПоставщика.ТекущиеДанные;

	// После редактировании строки автоматически установим в этой строке флажок "Записать".
	Если Не ОтменаРедактирования Тогда
		Если ЭлементыФормы.ЦеныПоставщика.ТекущаяКолонка.Имя <> "Записать" Тогда
			ТекущаяСтрока.Записать = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // НоменклатураПоставщикаПриОкончанииРедактирования()

// Обработчик события ПриИзменении для наименования.
//
Процедура НаименованиеПриИзменении(Элемент)

	СформироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры

// Обработчик события ПриИзменении для полного наименования.
//
Процедура НаименованиеПолноеПриИзменении(Элемент)

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры // НаименованиеПолноеПриИзменении()

// Обработчик события НачалоВыбораИзСписка для полного наименования.
//
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.

	Список = Новый СписокЗначений();

	Список.Добавить(Наименование);

	// Выбор из списка и обработка выбора.

	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.НаименованиеПолное);

	Если РезультатВыбора <> Неопределено Тогда

		НаименованиеПолное                          = РезультатВыбора.Значение;
		мФормироватьНаименованиеПолноеАвтоматически = Истина;

	КонецЕсли;

КонецПроцедуры // НаименованиеПолноеНачалоВыбораИзСписка()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ СВОЙСТВ И КАТЕГОРИЙ

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма, Элемент, Копирование);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если РаботаСДиалогами.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Обработчик события "Нажатие" кнопки "Назад".
// Переключает предыдущую по порядку закладку.
//
Процедура ОсновныеДействияФормыНазад(Кнопка)

	НомерТекущейСтраницы = 0;
	МассивВидимыхСтраниц = ПолучитьМассивДоступныхСтраниц(НомерТекущейСтраницы);

	Если НомерТекущейСтраницы = 0 Тогда
		СледующаяСтраница = МассивВидимыхСтраниц[НомерТекущейСтраницы];
	Иначе
		СледующаяСтраница = МассивВидимыхСтраниц[НомерТекущейСтраницы - 1];

		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = СледующаяСтраница;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // ОсновныеДействияФормыНазад()

// Обработчик события "Нажатие" кнопки "Далее".
// Переключает следующую по порядку закладку.
//
Процедура ОсновныеДействияФормыОсновныеДействияФормыДалее(Кнопка)

	НомерТекущейСтраницы = 0;
	МассивВидимыхСтраниц = ПолучитьМассивДоступныхСтраниц(НомерТекущейСтраницы);

	Если НомерТекущейСтраницы = МассивВидимыхСтраниц.ВГраница() Тогда
		СледующаяСтраница = МассивВидимыхСтраниц[НомерТекущейСтраницы];
	Иначе
		СледующаяСтраница = МассивВидимыхСтраниц[НомерТекущейСтраницы + 1];

		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = СледующаяСтраница;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // ОсновныеДействияФормыОсновныеДействияФормыДалее()

// Процедура - обработчик события "ПриИзменении" для "Родитель"
//
Процедура РодительПриИзменении(Элемент)
	
	ПрочитатьЗаполнитьСвойстваИЗначения();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" для "ЕдиницаХраненияОстатков"
//
Процедура ЕдиницаХраненияОстатковНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры // ЕдиницаХраненияОстатковНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" для "ЕдиницаДляОтчетов"
//
Процедура ЕдиницаДляОтчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры // ЕдиницаДляОтчетовНачалоВыбора()

Процедура ЕдиницаИзмеренияМестНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПриИзменении флажка "весовой".
//
Процедура ВесовойТоварПриИзменении(Элемент)

	Перем Запрос;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	1
	|ИЗ
	|	РегистрСведений." + ?(Весовой, "Штрихкоды", "КодыВесовогоТовара") + " КАК Источник
	|ГДЕ
	|	Источник." + ?(Весовой, "Владелец", "Номенклатура") + " = &Владелец";

	Если Запрос.Выполнить().Пустой() Тогда
		УстановитьВидимость();
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Изменение признака весового товара невозможно, так как для товара заданы "
		                 + ?(Весовой, "штрихкоды штучного товара", "коды весового товара"));
		Весовой = Не Весовой;
	КонецЕсли;

КонецПроцедуры // ВесовойТоварПриИзменении()

// Обработчик события ПриИзменении реквизита "ВестиСерийныеНомера".
//
Процедура ВестиСерийныеНомераПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры // ВестиСерийныеНомераПриИзменении()

// Обработчик события нажатия на кнопку Этикетка.
//
Процедура ДействияФормыЭтикетка(Кнопка)

	УправлениеРозничнойТорговлей.ПечатьЭтикеток(Ссылка);

КонецПроцедуры

// Обработчик события нажатия на кнопку Ценник.
//
Процедура ДействияФормыЦенник(Кнопка)
	
	ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();

	НоваяСтрока = ОбработкаПечатьЦенников.Товары.Добавить();
	НоваяСтрока.Номенклатура = Ссылка;
	НоваяСтрока.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.Печать = Истина;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаполнитьЦены", Истина);
                     
	ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
	ФормаПечатьЦенников.Параметр = СтруктураПараметров;
	ФормаПечатьЦенников.Открыть();

КонецПроцедуры

// Обработчик события нажатия на кнопку Комплектующие.
//
Процедура ДействияФормыКомплектующие(Кнопка)

	МассивНоменклатуры = Новый Массив;
	МассивНоменклатуры.Добавить(Ссылка);
	ТабДокумент = РаботаСДиалогами.НапечататьКомплектующие(МассивНоменклатуры);

	Если ТабДокумент.ВысотаТаблицы > 0 Тогда
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, , , "Комплектующие", Ссылка);
	Иначе
		Предупреждение("Для " + СокрЛП(Ссылка) + " список комплектующих не задан!");
	КонецЕсли;

КонецПроцедуры // ДействияФормыКомплектующие()

// Обработчик события элемента КоманднаяПанельФормы.ДействиеОткрытьПрайсЛист.
//
Процедура ДействияФормыОткрытьПрайсЛист(Кнопка)

	Обработки.ПечатьПрайсЛиста.ПолучитьФорму("ФормаЗаполнения").Открыть();

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ЕдиницыИзмерения.
//
Процедура ЕдиницыИзмеренияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) И ЕдиницаХраненияОстатков = ДанныеСтроки.Ссылка Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;

	ОформлениеСтроки.Ячейки.Коэффициент.ТолькоПросмотр = (ДанныеСтроки.Ссылка = ЕдиницаХраненияОстатков);

КонецПроцедуры // ЕдиницыИзмеренияПриВыводеСтроки()

// Обработчик события ПередНачаломДобавления элемента формы ЕдиницыИзмерения.
//
Процедура ЕдиницыИзмеренияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Отказ = Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры // ЕдиницыИзмеренияПередНачаломДобавления()

// Обработчик события ПриНачалеРедактирования элемента формы ЕдиницыИзмерения.
//
Процедура ЕдиницыИзмеренияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;

	Если НоваяСтрока Тогда
		Если ТекущаяСтрока.Коэффициент = 0 Тогда
			ТекущаяСтрока.Коэффициент = 1;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаПоКлассификатору) Тогда
			ТекущаяСтрока.ЕдиницаПоКлассификатору = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяЕдиницаПоКлассификатору");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЕдиницыИзмеренияПриНачалеРедактирования()

// Обработчик события ПриИзменении реквизита формы "ВидНоменклатуры"
//
Процедура ВидНоменклатурыПриИзменении(Элемент)

	ПриИзмененииВидаНоменклатуры();

КонецПроцедуры

// Процедура, выполняющая необходимые действия при изменении вида номенклатуры.
//
Процедура ПриИзмененииВидаНоменклатуры()

	ЗаполнитьПризнакиПоВидуНоменклатуры();

	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииВидаНоменклатуры()

// Обработчик события ПриИзменении реквезита "СтавкаНДС"
//
Процедура СтавкаНДСПриИзменении()
	
	ЗаполнитьПризнакиПоСтавкеНДС();
	УстановитьВидимость();

КонецПроцедуры

Процедура ИзмеряетсяТолькоВСуммовомВыраженииПриИзменении(Элемент)
	
	Если НЕ ИзмеряетсяТолькоВСуммовомВыражении Тогда
		ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной = "";
	КонецЕсли; 
	
	УстановитьВидимость();

КонецПроцедуры

// Обработчик события ПриИзменении флажка "ФлажокВестиУчетПоХарактеристикам"
//
Процедура ВестиУчетПоХарактеристикамПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры // ФлажокВестиУчетПоХарактеристикамПриИзменении()

// Обработчик события ПриИзменении флажка "ФлажокВестиУчетПоСериям"
//
Процедура ВестиУчетПоСериямПриИзменении(Элемент)

	Если Не ВестиУчетПоСериям Тогда
		ВестиПартионныйУчетПоСериям = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ФлажокВестиУчетПоСериямПриИзменении()

// Процедура - обработчик события "Нажатие" картинки "ОсновноеИзображение"
//
Процедура ОсновноеИзображениеНажатие(Элемент)
	
	Если Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайлами.ОткрытьФормуИзображения(ЭтаФорма, ОсновноеИзображение, Ссылка);
	
КонецПроцедуры

Процедура ПодакцизныйТоварПриИзменении(Элемент)
	
	Если Не ПодакцизныйТовар Тогда
		СтатьяДекларацииПоАкцизномуНалогу = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
	КонецЕсли;	

	УстановитьВидимость();
КонецПроцедуры

Процедура СтатьяДекларацииПоАкцизномуНалогуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НазваниеНалоговойДекларации 	= Перечисления.ВидыНалоговыхДеклараций.ДекларацияПоАкцизномуНалогу;      
	НазваниеНабораСтатейДекларации	= Справочники.НаборыСтатейНалоговыхДеклараций.ДекларацияПоАкцизномуНалогу_Розница;
	
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, НазваниеНалоговойДекларации, НазваниеНабораСтатейДекларации);

КонецПроцедуры

Процедура СтатьяДекларацииПоАкцизномуНалогуАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	НазваниеНалоговойДекларации 	= Перечисления.ВидыНалоговыхДеклараций.ДекларацияПоАкцизномуНалогу;      
	НазваниеНабораСтатейДекларации	= Справочники.НаборыСтатейНалоговыхДеклараций.ДекларацияПоАкцизномуНалогу_Розница;

	РаботаСДиалогами.АвтоПодборТекстаСтатьяНалоговойДекларации(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора ,СтандартнаяОбработка, 
											  НазваниеНалоговойДекларации, НазваниеНабораСтатейДекларации);

КонецПроцедуры

Процедура СтатьяДекларацииПоАкцизномуНалогуОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	НазваниеНалоговойДекларации 	= Перечисления.ВидыНалоговыхДеклараций.ДекларацияПоАкцизномуНалогу;      
	НазваниеНабораСтатейДекларации	= Справочники.НаборыСтатейНалоговыхДеклараций.ДекларацияПоАкцизномуНалогу_Розница;
	
	РаботаСДиалогами.ОкончаниеВводаТекстаСтатьяНалоговойДекларации(Элемент, Текст, Значение, СтандартнаяОбработка, 
												  НазваниеНалоговойДекларации, НазваниеНабораСтатейДекларации);
												  
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТП ЕДИНИЦЫ ИЗМЕРЕНИЯ

// Процедура - обработчик события "ПриИзменении" табличного поля "ЕдиницыИзмерения".
//
Процедура ЕдиницыИзмеренияЕдиницаПоКлассификаторуПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ЕдиницыИзмерения.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Наименование) Тогда
		ТекущаяСтрока.Наименование = Строка(ТекущаяСтрока.ЕдиницаПоКлассификатору);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТП КОМПЛЕКТУЮЩИЕ

// Процедура вызывает подбор номеклатуры при нажатии на кнопку "Подбор".
//
Процедура КоманднаяПанельКомплектующиеДействиеПодбор(Кнопка)

	Если Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	ДействиеПодбор();

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Комплектующие
//
Процедура КомплектующиеПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Комплектующие
//
Процедура КомплектующиеПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Количество    = 1;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента Комплектующие.Комплектующая
//
Процедура КомплектующиеКомплектующаяПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.Комплектующие.ТекущиеДанные;

	ТекущаяСтрока.ЕдиницаИзмерения = ТекущаяСтрока.Комплектующая.ЕдиницаХраненияОстатков;

	Если ЗначениеЗаполнено(ТекущаяСтрока.ХарактеристикаКомплектующей)
	   И ТекущаяСтрока.ХарактеристикаКомплектующей.Владелец <> ТекущаяСтрока.Комплектующая Тогда
		ТекущаяСтрока.ХарактеристикаКомплектующей = Неопределено;
	КонецЕсли;

КонецПроцедуры


// Обработчик события ПередНачаломДобавления ТЧ "МестаХранения".
//
Процедура МестаХраненияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);

КонецПроцедуры // МестаХраненияПередНачаломДобавления()

// Обработчик события ПриВыводеСтроки ТЧ "МестаХранения".
//
Процедура МестаХраненияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки.Приоритет = 0 Тогда
		ОформлениеСтроки.ЦветФона   = WebЦвета.Лазурный;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ПолночноСиний;
	КонецЕсли;

КонецПроцедуры // МестаХраненияПриВыводеСтроки()

// Обработчик события ПриНачалеРедактирования строки ТЧ "МестаХранения".
//
Процедура МестаХраненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Номенклатура = Ссылка;
	КонецЕсли;

КонецПроцедуры // МестаХраненияПриНачалеРедактирования()

Процедура МестаХраненияСкладПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.МестаХранения.ТекущиеДанные;

	Если ТекущаяСтрока.МестоХранения.Владелец <> ТекущаяСтрока.Склад Тогда
		ТекущаяСтрока.МестоХранения = Справочники.МестаХранения.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // МестаХраненияСкладПриИзменении()



// Обработчик события "Нажатие" кнопки "ПеречитатьТекущиеЦены" в командной панели ТЧ ЦеныПоставщика.
//
Процедура КоманднаяПанельЦеныПоставщикаПеречитатьТекущиеЦены(Кнопка)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Цены.ТипЦен КАК ТипЦен,
	|	Цены.Цена КАК Цена,
	|	Цены.Валюта КАК Валюта,
	|	Цены.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&Дата, ТипЦен В (&ТипыЦен)
	|	   И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	) КАК Цены
	|");

	Запрос.УстановитьПараметр("Дата", РабочаяДата);
	Запрос.УстановитьПараметр("ТипыЦен", ЦеныПоставщика.ВыгрузитьКолонку("ТипЦен"));
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаЦен = ЦеныПоставщика.Найти(Выборка.ТипЦен, "ТипЦен");
		ЗаполнитьЗначенияСвойств(СтрокаЦен, Выборка);
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельЦеныПоставщикаПеречитатьТекущиеЦены()

// Обработчик события "Нажатие" кнопки "ЗаписатьЦены" в командной панели ТЧ НоменклатураПоставщика.
//
Процедура КоманднаяПанельЦеныПоставщикаЗаписатьЦены(Кнопка)

	ЗаголовокСообщений = Заголовок;

	Отказ = Ложь;
	ПроверитьЦеныКонтрагента(ЗаголовокСообщений, Отказ);

	Если Не Отказ Тогда
		СохранитьНоменклатуруКонтрагента(Отказ);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельЦеныПоставщикаЗаписатьЦены()

// Обработчик события "Нажатие" кнопки "РассчитатьЦеныКомплекта" в командной панели ТЧ ЦеныНоменклатуры.
//
Процедура КоманднаяПанельЦеныНоменклатурыРассчитатьЦеныКомплекта(Кнопка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РегКомплектующие.Комплектующая КАК Комплектующая,
	|	РегКомплектующие.ХарактеристикаКомплектующей КАК ХарактеристикаКомплектующей,
	|	РегКомплектующие.Количество КАК Количество,
	|	РегКомплектующие.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.КомплектующиеНоменклатуры КАК РегКомплектующие
	|ГДЕ
	|	РегКомплектующие.Номенклатура = &Номенклатура
	|";

	ТЗКомплектующие = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаЦен Из ЦеныНоменклатуры Цикл
		Если Не СтрокаЦен.ТипЦен.Рассчитывается Тогда
			ЦенаКомплекта = 0;
			Для Каждого СтрокаКомплектующих Из ТЗКомплектующие Цикл
				ЦенаКомплектующей = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаКомплектующих.Комплектующая,
				   СтрокаКомплектующих.ХарактеристикаКомплектующей, СтрокаЦен.ТипЦен, РабочаяДата,
				   СтрокаКомплектующих.ЕдиницаИзмерения, СтрокаЦен.Валюта);

				ЦенаКомплекта = ЦенаКомплекта + ЦенаКомплектующей * СтрокаКомплектующих.Количество;
			КонецЦикла;

			СтрокаЦен.Цена = ЦенаКомплекта;
			СтрокаЦен.Записать = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельЦеныНоменклатурыРассчитатьЦеныКомплекта()


// Обработчик события "Нажатие" кнопки "РассчитатьПоБазовымЦенам" в командной панели ТЧ ЦеныНоменклатуры.
//
Процедура КоманднаяПанельЦеныНоменклатурыРассчитатьПоБазовымЦенам(Кнопка)

	ДатаЦенСкидок = РабочаяДата;

	Для Каждого СтрокаЦен Из ЦеныНоменклатуры Цикл
		ТипЦен = СтрокаЦен.ТипЦен;

		Если Не (ТипЦен.Рассчитывается Или НЕ ЗначениеЗаполнено(ТипЦен.БазовыйТипЦен)) Тогда
			ВалютаТекущая = ТипЦен.ВалютаЦены;

			СтрокаЦенБазовый = ЦеныНоменклатуры.Найти(ТипЦен.БазовыйТипЦен);
			Если СтрокаЦенБазовый <> Неопределено Тогда
				Если СтрокаЦен.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда

					// Наценим.
					ПолученнаяЦена = СтрокаЦенБазовый.Цена * (1 + СтрокаЦен.ПроцентСкидкиНаценки / 100);
					ВалютаТекущая = СтрокаЦенБазовый.Валюта;
				ИначеЕсли СтрокаЦен.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда

					// Рассчитаем по диапазонам.
					ПолученнаяЦена = Ценообразование.ПолучитьЦенуПоЦеновымДиапазонам(ТипЦен, ДатаЦенСкидок, СтрокаЦенБазовый.Цена, ВалютаТекущая, СтрокаЦенБазовый.Валюта);

					Если ПодставлятьВалютуИзДиапазона Тогда
						СтрокаЦен.Валюта = ВалютаТекущая;
					КонецЕсли;
				КонецЕсли;

				ПолученнаяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, ВалютаТекущая, СтрокаЦен.Валюта, 0, 1, ДатаЦенСкидок);
				ПолученнаяЦена = Ценообразование.ОкруглитьЦену(ПолученнаяЦена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);

				СтрокаЦен.Цена = ПолученнаяЦена;
				СтрокаЦен.Записать = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельЦеныНоменклатурыРассчитатьПоБазовымЦенам()

// Обработчик события "Нажатие" кнопки "ПеречитатьТекущиеЦены" в командной панели ТЧ ЦеныНоменклатуры.
//
Процедура КоманднаяПанельЦеныНоменклатурыПеречитатьТекущиеЦены(Кнопка)
	
	СформироватьТаблицуЦен();

КонецПроцедуры // КоманднаяПанельЦеныНоменклатурыПеречитатьТекущиеЦены()

Процедура СформироватьТаблицуЦен()

	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Цены.ТипЦен КАК ТипЦен,
	|	Цены.Цена КАК Цена,
	|	Цены.СпособРасчетаЦены КАК СпособРасчетаЦены,
	|	Цены.Валюта КАК Валюта,
	|	Цены.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цены.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен В (&ТипыЦен)
	|	   И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	) КАК Цены
	|");

	Запрос.УстановитьПараметр("Дата", РабочаяДата);
	Запрос.УстановитьПараметр("ТипыЦен", ЦеныНоменклатуры.ВыгрузитьКолонку("ТипЦен"));
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаЦен = ЦеныНоменклатуры.Найти(Выборка.ТипЦен, "ТипЦен");
		ЗаполнитьЗначенияСвойств(СтрокаЦен, Выборка);
	КонецЦикла;
	

КонецПроцедуры


// Обработчик события "Нажатие" кнопки "ЗаписатьЦены" в командной панели ТЧ ЦеныНоменклатуры.
//
Процедура КоманднаяПанельЦеныНоменклатурыЗаписатьЦены(Кнопка)

	ЗаголовокСообщений = Заголовок;

	Отказ = Ложь;
	ПроверитьЦеныНоменклатуры(ЗаголовокСообщений, Отказ);

	Если Не Отказ Тогда
		СохранитьЦеныНоменклатуры(Отказ);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельЦеныНоменклатурыЗаписатьЦены()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТП ШТРИХКОДЫ

// Обработчик события ПередНачаломДобавления элемента Штрихкоды
//
Процедура ШтрихкодыПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Штрихкоды
//
Процедура ШтрихкодыПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ТипШтрихкода     = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		Элемент.ТекущиеДанные.Владелец         = Ссылка;
		Элемент.ТекущиеДанные.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
		Элемент.ТекущиеДанные.Качество         = Справочники.Качество.Новый;
	КонецЕсли;

КонецПроцедуры

Процедура ШтрихкодыТипШтрихкодаПриИзменении(Элемент)

	Если Элемент.Значение = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда
		Если ПустаяСтрока(ЭлементыФормы.Штрихкоды.ТекущиеДанные.ПредставлениеШтрихкода) Тогда
			ЭлементыФормы.Штрихкоды.ТекущиеДанные.ПредставлениеШтрихкода = ЭлементыФормы.Штрихкоды.ТекущиеДанные.Штрихкод;
		Иначе
			Ответ = Вопрос("Представление штрихкода не пустое.
			|Изменить представление штрихкода на значение штрихкода?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЭлементыФормы.Штрихкоды.ТекущиеДанные.ПредставлениеШтрихкода = ЭлементыФормы.Штрихкоды.ТекущиеДанные.Штрихкод;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ШтрихкодыШтрихкодПриИзменении(Элемент)

	Если ЭлементыФормы.Штрихкоды.ТекущиеДанные.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда
		Если ПустаяСтрока(ЭлементыФормы.Штрихкоды.ТекущиеДанные.ПредставлениеШтрихкода) Тогда
			ЭлементыФормы.Штрихкоды.ТекущиеДанные.ПредставлениеШтрихкода = Элемент.Значение;
		Иначе
			Ответ = Вопрос("Представление штрихкода не пустое.
			|Изменить представление штрихкода на значение штрихкода?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЭлементыФормы.Штрихкоды.ТекущиеДанные.ПредставлениеШтрихкода = Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку НовыйШтрихкод
//
// Параметры
//  Кнопка – <Кнопка> 
//         – кнопка НовыйШтрихкод
//
Процедура НовыйШтрихкод(Кнопка = Неопределено)
	
	Если Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	ТекущаяСтрока = ЭлементыФормы.Штрихкоды.ТекущиеДанные;

	Если ТекущаяСтрока = Неопределено Тогда
		Ответ = Вопрос("Не выбрана строка таблицы штрихкодов, для которой регистрируется штрихкод." + Символы.ПС + "Добавить новую строку?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;

		ТекЗапись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		
		ТекЗапись.Владелец         = Ссылка;
		ТекЗапись.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
		ТекЗапись.ТипШтрихкода     = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		ТекЗапись.Качество         = Справочники.Качество.Новый;
		ТекЗапись.Штрихкод         = РаботаСТорговымОборудованием.СформироватьШтрихКод();

		Попытка
			ТекЗапись.Записать();
		Исключение
		КонецПопытки;
	Иначе
		Если ЗначениеЗаполнено(ТекущаяСтрока.ШтрихКод) Тогда
			Ответ = Вопрос("Сформировать новый штрихкод для выбранной строки?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;

		ТекЗапись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ТекЗапись, ТекущаяСтрока);
		ТекЗапись.Владелец = Ссылка;
		
		ТекЗапись.Прочитать();

		ТекЗапись.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		ТекЗапись.Штрихкод     = РаботаСТорговымОборудованием.СформироватьШтрихКод();

		Попытка
			ТекЗапись.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не(ВводДоступен()) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);
	
КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрих-кода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Предупреждение("Подбор номенклатуры в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрих-кода транспортной упаковки.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры с учётом коэффициента упаковки.
//
//  Упаковка       - <СправочникСсылка.ТранспортныеУпаковки>
//                 - Транспортная упаковка.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКУпаковка(Номенклатура, Характеристика, Серия, Качество,
                    Единица, Количество, Упаковка, СШК) Экспорт

	Предупреждение("Подбор транспортных упаковок в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКУпаковка()

// Функция осуществляет обработку считывания штрих-кода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрих-кода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Если ЭтоНовый() И РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		ЭлементыФормы.Штрихкоды.ДобавитьСтроку();
	КонецЕсли;

	ТекущиеДанные = ЭлементыФормы.Штрихкоды.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Предупреждение("Не выбрана строка таблицы штрихкодов, для которой регистрируется штрихкод.");
		Возврат Истина;
	КонецЕсли;

	Если ТипЗнч(ТекущиеДанные) = Тип("ТекущиеДанныеСписка") Тогда
		ТекЗапись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		ТекЗапись.Код = ТекущиеДанные.Код;
		ТекЗапись.Прочитать();
	Иначе
		ТекЗапись = ТекущиеДанные;
	КонецЕсли;

	ТекЗапись.Владелец     = Ссылка;
	ТекЗапись.ТипШтрихкода = ТипКода;
	ТекЗапись.Штрихкод     = ШтрихКод;

	Если ТипЗнч(ТекущиеДанные) = Тип("ТекущиеДанныеСписка") Тогда
		ТекЗапись.Записать();
	КонецЕсли;

	Возврат Истина;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	//Текст = РаботаСТорговымОборудованием.ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТП "КОДЫ ВЕСОВОГО ТОВАРА"

Процедура КодыВесовогоТовараПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);

КонецПроцедуры // КодыВесовогоТовараПередНачаломДобавления()

// Процедура - обработчик события ПриНачалеРедактирования ТЧ "КодыВесовогоТовара".
Процедура КодыВесовогоТовараПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		ТекущиеДанные 			   = Элемент.ТекущиеДанные;
		ТекущиеДанные.Номенклатура = Ссылка;
		ТекущиеДанные.Качество     = Справочники.Качество.Новый;
		ТекущиеДанные.Код          = УправлениеРозничнойТорговлей.ПолучитьНовыйКодДляРегистраСведений("КодыВесовогоТовара");
	КонецЕсли;

КонецПроцедуры // КодыВесовогоТовараПриНачалеРедактирования()

Процедура КодыВесовогоТовараПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.Код = УправлениеРозничнойТорговлей.ПолучитьНовыйКодДляРегистраСведений("КодыВесовогоТовара");
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = ?(ЭтоНовый(), Родитель, Ссылка);
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры

Процедура БланкСтрогогоУчетаПриИзменении(Элемент)

	Если Не БланкСтрогогоУчета Тогда
		УчитываетсяПоНоминальнойСтоимости = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

Процедура ДействиеНастроитьСчетаУчетаДляИспользуемых(Элемент)
	МенеджерЗаписи = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация 	= СчетаУчета.Организация;
	МенеджерЗаписи.Склад 		= СчетаУчета.Склад;
	МенеджерЗаписи.ТипСклада 	= СчетаУчета.ТипСклада;
	МенеджерЗаписи.Номенклатура = СчетаУчета.Номенклатура;
	МенеджерЗаписи.ВидНоменклатуры = СчетаУчета.ВидНоменклатуры;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.ПолучитьФорму().Открыть();
КонецПроцедуры

Процедура ДействиеНастроитьСчетаУчетаПоФильтру(Элемент)
	МенеджерЗаписи = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
	ФормаЗаписи = МенеджерЗаписи.ПолучитьФорму(,ЭтаФорма);
	
	ФормаЗаписи.Организация 	= ФильтрОрганизация;
	ФормаЗаписи.Склад 			= ФильтрСклад;
	ФормаЗаписи.ТипСклада 		= БухгалтерскийУчет.ОпределитьТипСклада(ФильтрСклад);
	ФормаЗаписи.Номенклатура 	= Ссылка;
	ФормаЗаписи.ВидНоменклатуры = Ссылка.ВидНоменклатуры;
	ФормаЗаписи.НеВыполнятьЗаполнение = Истина;
	
	ФормаЗаписи.Открыть();
КонецПроцедуры

Процедура КоманднаяПанельСчетаУчетаОбновить(Кнопка)
	ОбновитьСчетаУчета();
КонецПроцедуры


Процедура ОбновитьСчетаУчета() 
	
	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(ФильтрОрганизация,Ссылка,ФильтрСклад);
	
	СчетУчетаБУ 				= СчетаУчета.СчетУчетаБУ;
	СчетУчетаПередачиБУ 		= СчетаУчета.СчетПередачиБУ;
	СчетУчетаЗабалансовыйБУ 	= СчетаУчета.СчетУчетаДоп;
	СчетУчетаПередачиЗабалансовыйБУ = СчетаУчета.СчетПередачиЗабБУ;
	СхемаРеализации 			= СчетаУчета.СхемаРеализации;
	НалоговоеНазначение 		= СчетаУчета.НалоговоеНазначение;
	НалоговоеНазначениеДоходовИЗатрат = СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
	
	ТекстИнфо = "для";
	Если ЗначениеЗаполнено(СчетаУчета.Номенклатура) Тогда
		Если НЕ СчетаУчета.Номенклатура = Ссылка Тогда
			ТекстИнфо = ТекстИнфо + " группы номенклатуры """+СчетаУчета.Номенклатура+""",";
		Иначе
			ТекстИнфо = ТекстИнфо + " данной номенклатуры,";
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СчетаУчета.Склад) Тогда
		Если НЕ ЗначениеЗаполнено(СчетаУчета.ТипСклада) Тогда
			ТекстИнфо = ТекстИнфо + " всех складов"
		Иначе
			ТекстИнфо = ТекстИнфо + " типа складов """+СчетаУчета.ТипСклада+"""";
		КонецЕсли;
	Иначе
		Если СчетаУчета.Склад.ЭтоГруппа Тогда
			ТекстИнфо = ТекстИнфо + " группы складов """+СчетаУчета.Склад+"""";
		Иначе
			ТекстИнфо = ТекстИнфо + " склада """+СчетаУчета.Склад+"""";
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СчетаУчета.Организация) Тогда
		ТекстИнфо = ТекстИнфо + ", всех организаций";
	Иначе
		ТекстИнфо = ТекстИнфо + ", организации """+СчетаУчета.Организация+"""";
	КонецЕсли;
	
	ЭлементыФормы.НадписьУстановленоДля.Заголовок = "Настроены "+ТекстИнфо;
	
	// Настроим действия для кнопки
	КнопкиНастроить = ЭлементыФормы.КоманднаяПанельСчетаУчета.Кнопки.НастроитьСчетаУчета.Кнопки;
	КнопкиНастроить.Очистить();
	Если НЕ (ФильтрОрганизация=СчетаУчета.Организация И ФильтрСклад=СчетаУчета.Склад И Ссылка=СчетаУчета.Номенклатура) Тогда
		ТекстТекущий  = "для данной номенклатуры,";
		Если НЕ ЗначениеЗаполнено(ФильтрСклад) Тогда
			ТекстТекущий = ТекстТекущий + " всех складов"
		Иначе
			ТекстТекущий = ТекстТекущий + " склада """+ФильтрСклад+"""";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФильтрОрганизация) Тогда
			ТекстТекущий = ТекстТекущий + ", всех организаций";
		Иначе
			ТекстТекущий = ТекстТекущий + ", организации """+ФильтрОрганизация+"""";
		КонецЕсли;
		КнопкиНастроить.Добавить("ПоФильтру",ТипКнопкиКоманднойПанели.Действие,ТекстТекущий, Новый Действие("ДействиеНастроитьСчетаУчетаПоФильтру"));
	КонецЕсли; 
	КнопкиНастроить.Добавить("ДляИспользуемых",ТипКнопкиКоманднойПанели.Действие,ТекстИнфо, Новый Действие("ДействиеНастроитьСчетаУчетаДляИспользуемых"));
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	ОбновитьСчетаУчета()
КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьВидимость(Истина);	
	
	Если ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница] = ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета Тогда
		Если ФильтрОрганизация.Пустая() Тогда
			ФильтрОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		КонецЕсли; 
		Если ФильтрСклад.Пустая() Тогда
			ФильтрСклад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		ОбновитьСчетаУчета();
	КонецЕсли;
	
КонецПроцедуры
              
Процедура СкладПриИзменении(Элемент)
	ОбновитьСчетаУчета()
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	УстановитьКнопкиПечати();
	ВосстановитьНастройки(Истина);

	// Для нового элемента заполним пустые реквизиты значениями по умолчанию.
	Если ЭтоНовый() Тогда
		ЗаполнитьРеквизитыПоУмолчанию();
	КонецЕсли;	
	
КонецПроцедуры

// Процедура восстанавливает сохраненные настройки.
//
Процедура ВосстановитьНастройки(ВосстановитьПриОткрытии = Ложь, ФормаНастройки = Неопределено) Экспорт

	СтруктураНастройки = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(мТекущаяНастройка);

	Если ВосстановитьПриОткрытии Тогда
		Если УниверсальныеМеханизмы.ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки) Тогда
			мТекущаяНастройка = СтруктураНастройки;

			ТаблицаСтраниц         = мТекущаяНастройка.СохраненнаяНастройка.ТаблицаСтраниц;
			ТаблицаРеквизитов      = мТекущаяНастройка.СохраненнаяНастройка.ТаблицаРеквизитов;
			ТаблицаЦенНоменклатуры = мТекущаяНастройка.СохраненнаяНастройка.ТаблицаЦенНоменклатуры;
		КонецЕсли;
	Иначе
		СтруктураНастройки = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);

		Если СтруктураНастройки <> Неопределено Тогда
			мТекущаяНастройка = СтруктураНастройки;

			ТаблицаСтраниц         = мТекущаяНастройка.СохраненнаяНастройка.ТаблицаСтраниц;
			ТаблицаРеквизитов      = мТекущаяНастройка.СохраненнаяНастройка.ТаблицаРеквизитов;
			ТаблицаЦенНоменклатуры = мТекущаяНастройка.СохраненнаяНастройка.ТаблицаЦенНоменклатуры;
			Если ФормаНастройки <> Неопределено Тогда
				ФормаНастройки.ТаблицаСтраниц = ТаблицаСтраницНастройки;
				ФормаНастройки.ТаблицаРеквизитов = ТаблицаРеквизитов;
				ФормаНастройки.ТаблицаЦенНоменклатуры = ТаблицаЦенНоменклатуры;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ОбновитьСохраненныеНастройки();

КонецПроцедуры // ВосстановитьНастройки()

// Процедура обновляет сохраненные настройки, удаляя лишнее и вставляя недостающее.
//
Процедура ОбновитьСохраненныеНастройки() Экспорт

	Если ТаблицаСтраниц.Колонки.Количество() = 0 Тогда
		ТаблицаСтраниц.Колонки.Добавить("Имя");
		ТаблицаСтраниц.Колонки.Добавить("Представление");
		ТаблицаСтраниц.Колонки.Добавить("Видимость");
		ТаблицаСтраниц.Колонки.Добавить("ВидимостьСистемная");
		ТаблицаСтраниц.Индексы.Добавить("Имя");
		
		ТаблицаСтраницНастройки.Колонки.Добавить("Имя");
		ТаблицаСтраницНастройки.Колонки.Добавить("Представление");
		ТаблицаСтраницНастройки.Колонки.Добавить("Видимость");
		ТаблицаСтраницНастройки.Колонки.Добавить("ВидимостьСистемная");
		ТаблицаСтраницНастройки.Индексы.Добавить("Имя");
	КонецЕсли;

	// Удалим лишние страницы из сохраненной настройки.
	Для Каждого Страница Из ТаблицаСтраниц Цикл
		Если ЭлементыФормы.ОсновнаяПанель.Страницы.Найти(Страница.Имя) = Неопределено Тогда
			ТаблицаСтраниц.Удалить(Страница);
		КонецЕсли;
	КонецЦикла;

	// Добавим недостающие страницы в сохраненную настройку.
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		Если ТаблицаСтраниц.Найти(Страница.Имя, "Имя") = Неопределено Тогда
			НоваяСтраница = ТаблицаСтраниц.Добавить();
			НоваяСтраница.Имя = Страница.Имя;
			НоваяСтраница.Представление = Страница.Заголовок;
			НоваяСтраница.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаРеквизитов.Колонки.Количество() = 0 Тогда
		ТаблицаРеквизитов.Колонки.Добавить("Имя");
		ТаблицаРеквизитов.Колонки.Добавить("Представление");
		ТаблицаРеквизитов.Колонки.Добавить("Обязательность");
		ТаблицаРеквизитов.Колонки.Добавить("Доступность");
		ТаблицаРеквизитов.Колонки.Добавить("Уникальность");
		ТаблицаРеквизитов.Колонки.Добавить("ОбязательностьСистемная");
		ТаблицаРеквизитов.Колонки.Добавить("ДоступностьСистемная");
	КонецЕсли;

	// Удалим лишние реквизиты из сохраненной настройки.
	Для Каждого Реквизит Из ТаблицаРеквизитов Цикл
		Если мСписокВозможныхРеквизитов[Реквизит.Имя] = Неопределено Тогда
			ТаблицаРеквизитов.Удалить(Реквизит);
		КонецЕсли;
	КонецЦикла;

	// Добавим недостающие реквизиты в сохраненную настройку.
	РеквизитыНоменклатуры = Метаданные().Реквизиты;
	Для Каждого Реквизит Из мСписокВозможныхРеквизитов Цикл
		Если ТаблицаРеквизитов.Найти(Реквизит.Ключ, "Имя") = Неопределено Тогда
			НовыйРеквизит = ТаблицаРеквизитов.Добавить();
			НовыйРеквизит.Имя = Реквизит.Ключ;

			Если РеквизитыНоменклатуры.Найти(Реквизит.Ключ) = Неопределено Тогда
				НовыйРеквизит.Представление = Реквизит.Ключ;
			Иначе
				НовыйРеквизит.Представление = РеквизитыНоменклатуры[Реквизит.Ключ].Представление();
			КонецЕсли;

			НовыйРеквизит.Доступность = Истина;
			НовыйРеквизит.Обязательность = Ложь;
			НовыйРеквизит.Уникальность = Ложь;
		КонецЕсли;
	КонецЦикла;

	// Отсортируем список реквизитов.
	ОтсортироватьСписокРеквизитов();

	Если ТаблицаЦенНоменклатуры.Колонки.Количество() = 0 Тогда
		ТаблицаЦенНоменклатуры.Колонки.Добавить("Имя");
		ТаблицаЦенНоменклатуры.Колонки.Добавить("Представление");
		ТаблицаЦенНоменклатуры.Колонки.Добавить("Обязательность");
		ТаблицаЦенНоменклатуры.Колонки.Добавить("Доступность");
		ТаблицаЦенНоменклатуры.Индексы.Добавить("Имя");
	КонецЕсли;
	

	// Удалим лишние типы цен из сохраненной настройки.
	Для Каждого ТипЦен Из ТаблицаЦенНоменклатуры Цикл
		Если мСписокТиповЦенНоменклатуры[ТипЦен.Имя] = Неопределено Тогда
			ТаблицаЦенНоменклатуры.Удалить(ТипЦен);
		КонецЕсли;
	КонецЦикла;

	// Добавим недостающие типы цен в сохраненную настройку.
	Для Каждого ТипЦен Из мСписокТиповЦенНоменклатуры Цикл
		Если ТаблицаЦенНоменклатуры.Найти(ТипЦен.Ключ, "Имя") = Неопределено Тогда
			НовыйТипЦен = ТаблицаЦенНоменклатуры.Добавить();
			НовыйТипЦен.Имя = ТипЦен.Ключ;
			НовыйТипЦен.Представление = ТипЦен.Значение;

			НовыйТипЦен.Обязательность = Ложь;
			НовыйТипЦен.Доступность = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбновитьСохраненныеНастройки()

// Процедура удаляет строки из таблицы в которой каждая строка соответствует странице.
// Подготавливает таблицу для работы в ФормаНастройки
//
Процедура УдалитьСтраницыФормыНастройки() Экспорт
	ТаблицаСтраницНастройки = ТаблицаСтраниц.Скопировать();
	Для Каждого ЭлементаСтраница Из СтруктураСкрываемыхСтраниц Цикл
		строкаСтраница = ТаблицаСтраницНастройки.Найти(ЭлементаСтраница.Ключ);
		Если строкаСтраница <> Неопределено Тогда
			ТаблицаСтраницНастройки.Удалить(строкаСтраница);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // УдалитьСтраницыФормыНастройки()

// Сортирует список реквизитов: Доступность Убыв, Обязательность Убыв, Представление Возвр.
//
Процедура ОтсортироватьСписокРеквизитов()

	ТаблицаРеквизитов.Сортировать("Представление Возвр");

КонецПроцедуры // ОтсортироватьСписокРеквизитов()

// Обработчик события "Нажатие" кнопки "Настройка".
//
Процедура ДействияФормыНастройка(Кнопка)

	// Сохраним данные на случай отмены действий настройки.
	ТаблицаСтраницВременная = ТаблицаСтраниц.Скопировать();
	ТаблицаРеквизитовВременная = ТаблицаРеквизитов.Скопировать();
	ТаблицаЦенНоменклатурыВременная = ТаблицаЦенНоменклатуры.Скопировать();

	ФормаНастройки = ПолучитьФорму("ФормаНастройки", Этаформа);

	ФормаНастройки.ТаблицаСтраниц = ТаблицаСтраницНастройки;
	ФормаНастройки.ТаблицаРеквизитов = ТаблицаРеквизитов;
	ФормаНастройки.ТаблицаЦенНоменклатуры = ТаблицаЦенНоменклатуры;

	РезультатНастройки = ФормаНастройки.ОткрытьМодально();

	Если РезультатНастройки = Истина Тогда // настройки изменены
		ОтсортироватьСписокРеквизитов();

		ОбновитьДанные();
		УстановитьВидимость();
	Иначе // изменение настроек отменено
		ТаблицаСтраниц = ТаблицаСтраницВременная.Скопировать();
		ТаблицаРеквизитов = ТаблицаРеквизитовВременная.Скопировать();
		ТаблицаЦенНоменклатуры = ТаблицаЦенНоменклатурыВременная.Скопировать();
	КонецЕсли;

КонецПроцедуры // ДействияФормыНастройка()

// Процедура обновляет данные в полях ввода и табличных частях.
//
Процедура ОбновитьДанные(ТолькоЦеныКонтрагента = Ложь)

	Если Не ЭтоНовый() Тогда
		Если Не ТолькоЦеныКонтрагента Тогда // заполним ТЧ "Цены номенклатуры"
			КоличествоСтрок = ЦеныНоменклатуры.Количество() - 1;
			Для Тмп = 0 По КоличествоСтрок Цикл
				ЦенаНоменклатуры = ЦеныНоменклатуры[КоличествоСтрок - Тмп];

				СтрокаЦен = ТаблицаЦенНоменклатуры.Найти(ЦенаНоменклатуры.ТипЦен, "Имя");
				Если Не СтрокаЦен.Доступность Тогда
					ЦеныНоменклатуры.Удалить(ЦенаНоменклатуры);
				КонецЕсли;
			КонецЦикла;

			Для Каждого ТипЦен Из ТаблицаЦенНоменклатуры Цикл
				Если ТипЦен.Доступность Тогда
					СтрокаЦен = ЦеныНоменклатуры.Найти(ТипЦен.Имя, "ТипЦен");
					Если СтрокаЦен = Неопределено Тогда
						СтрокаЦен = ЦеныНоменклатуры.Добавить();
						СтрокаЦен.ТипЦен = ТипЦен.Имя;
						СтрокаЦен.Цена = 0;
						СтрокаЦен.СпособРасчетаЦены = СтрокаЦен.ТипЦен.СпособРасчетаЦены;
						СтрокаЦен.Валюта = СтрокаЦен.ТипЦен.ВалютаЦены;
						СтрокаЦен.ПроцентСкидкиНаценки = СтрокаЦен.ТипЦен.ПроцентСкидкиНаценки;
					КонецЕсли;

					Если СтрокаЦен.Записать <> Истина Тогда
						СтрокаЦен.Записать = ТипЦен.Обязательность;
					КонецЕсли;

					Если НЕ ЗначениеЗаполнено(СтрокаЦен.ЕдиницаИзмерения) Тогда
						СтрокаЦен.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		// Заполним ТЧ "Цены поставщика".
		Если мПоставщик <> ОсновнойПоставщик Тогда
			ЦеныПоставщика.Очистить();
			Если ЗначениеЗаполнено(ОсновнойПоставщик) Тогда
				Выборка = Справочники.ТипыЦенНоменклатурыКонтрагентов.Выбрать(, ОсновнойПоставщик);
				Пока Выборка.Следующий() Цикл
					СтрокаЦен = ЦеныПоставщика.Добавить();
					СтрокаЦен.ТипЦен = Выборка.Ссылка;
					СтрокаЦен.Цена = 0;
					СтрокаЦен.Валюта = СтрокаЦен.ТипЦен.ВалютаЦены;
					СтрокаЦен.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
				КонецЦикла;
			КонецЕсли;

			мПоставщик = ОсновнойПоставщик;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьДанные()

// Процедура добавляет в дерево переданную Рамку группы и УЭ, которые к ней относятся.
//
// Параметры:
//  ИмяРамки - Строка. Имя рамки, которую нужно добавить в дерево.
//  СтруктураЭУ - Структура имен элементов управления, относящихся к рамке.
//
Процедура ДобавитьЭУВДерево(ИмяРамки, СтруктураЭУ)

	НоваяСтрока = мДеревоРамок.Строки.Добавить();
	НоваяСтрока.ИмяЭУ = ЭлементыФормы[ИмяРамки];

	Для Каждого ЭУ Из СтруктураЭУ Цикл
		НоваяСтрокаЭУ = НоваяСтрока.Строки.Добавить();
		НоваяСтрокаЭУ.ИмяЭУ = ЭлементыФормы[ЭУ.Ключ];
	КонецЦикла;

КонецПроцедуры // ДобавитьЭУВДерево()

// Формирует массив из видимых доступных страниц.
//
// Параметры:
//  НомерТекущейСтраницы - если передан, в эту переменную вернется номер текущей страницы.
//
// Возвращаемое значение:
//  Массив - массив видимых доступных страниц.
//
Функция ПолучитьМассивДоступныхСтраниц(НомерТекущейСтраницы, ТолькоВидимые = Ложь)

	МассивВидимыхСтраниц = Новый Массив;

	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		Если Страница.Видимость И (ТолькоВидимые Или Страница.Доступность) Тогда
			МассивВидимыхСтраниц.Добавить(Страница);

			Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = Страница Тогда
				НомерТекущейСтраницы = МассивВидимыхСтраниц.ВГраница();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат МассивВидимыхСтраниц;

КонецФункции // ПолучитьМассивДоступныхСтраниц()

Процедура КомментарийНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаРедактированияТекста = ПолучитьОбщуюФорму("ФормаРедактированияТекста");
	ФормаРедактированияТекста.УстановитьРедактируемыйТекст(Комментарий);
	ОтредактировалиТекст = ФормаРедактированияТекста.ОткрытьМодально();

	Если ОтредактировалиТекст = Истина Тогда
		Комментарий = ФормаРедактированияТекста.ПолучитьРедактируемыйТекст();
	КонецЕсли;

КонецПроцедуры


// Процедура сохраняет данные по ценам номенклатуры.
//
// Параметры:
//  Отказ - в эту переменную вернется значение Истина, если попытка сохранения провалилась.
Процедура СохранитьЦеныНоменклатуры(Отказ)

	ЗаписатьЦеныНоменклатуры = Ложь;
	Для Каждого ТипЦенНоменклатуры Из ЦеныНоменклатуры Цикл
		Если ТипЦенНоменклатуры.Записать Тогда
			ЗаписатьЦеныНоменклатуры = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Если нет ни одного типа цен для записи, то создавать документ смысла нет.
	Если ЗаписатьЦеныНоменклатуры Тогда
		Если НЕ ЗначениеЗаполнено(ДокументУстановкаЦен) Тогда
			Ответ = Вопрос("Не выбран документ для записи данных по ценам номенклатуры."
						   + Символы.ПС + "Создать новый документ ""Установка цен номенклатуры"" и продолжить запись?"
						   , РежимДиалогаВопрос.ДаНет);

			Если Ответ = КодВозвратаДиалога.Да Тогда
				ДокументОбъект = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
				ДокументОбъект.Дата = РабочаяДата;
				ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"));

				ИндексСтрокиТаблицыЦен = 0;
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			ДокументОбъект = ДокументУстановкаЦен.ПолучитьОбъект();

			// Определим следующий индекс строки.
			СписокИндексов = Новый СписокЗначений;
			МассивИндексов = ДокументУстановкаЦен.Товары.ВыгрузитьКолонку("ИндексСтрокиТаблицыЦен");
			СписокИндексов.ЗагрузитьЗначения(МассивИндексов);
			СписокИндексов.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
			ИндексСтрокиТаблицыЦен = СписокИндексов[0].Значение + 1;
		КонецЕсли;

		Для Каждого ТипЦенНоменклатуры Из ЦеныНоменклатуры Цикл
			Если ТипЦенНоменклатуры.Записать Тогда
				СтрокаТипЦен = ДокументОбъект.ТипыЦен.Найти(ТипЦенНоменклатуры.ТипЦен, "ТипЦен");

				Если СтрокаТипЦен = Неопределено Тогда
					СтрокаТипЦен = ДокументОбъект.ТипыЦен.Добавить();
					СтрокаТипЦен.ТипЦен = ТипЦенНоменклатуры.ТипЦен;
				КонецЕсли;

				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", Ссылка);
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				СтруктураПоиска.Вставить("ТипЦен", ТипЦенНоменклатуры.ТипЦен);

				СтрокаТовары = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ДокументОбъект.Товары, СтруктураПоиска);

				Если СтрокаТовары = Неопределено Тогда
					СтрокаТовары = ДокументОбъект.Товары.Добавить();
					СтрокаТовары.Номенклатура = Ссылка;
					//СтрокаТовары.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					СтрокаТовары.ТипЦен = ТипЦенНоменклатуры.ТипЦен;
					СтрокаТовары.ИндексСтрокиТаблицыЦен = ИндексСтрокиТаблицыЦен;
				КонецЕсли;

				СтрокаТовары.Цена = ТипЦенНоменклатуры.Цена;
				СтрокаТовары.Валюта = ТипЦенНоменклатуры.Валюта;
				СтрокаТовары.ЕдиницаИзмерения = ТипЦенНоменклатуры.ЕдиницаИзмерения;
				СтрокаТовары.ПроцентСкидкиНаценки = ТипЦенНоменклатуры.ПроцентСкидкиНаценки;
				СтрокаТовары.СпособРасчетаЦены = ТипЦенНоменклатуры.СпособРасчетаЦены;
			КонецЕсли;
		КонецЦикла;

		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументУстановкаЦен = ДокументОбъект.Ссылка;
		Исключение
			Сообщить("Не удалось записать документ установки цен: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры // СохранитьЦеныНоменклатуры()

// Процедура проверяет правильность заполнения таблицы цен номенклатуры контрагента.
//
// Параметры:
//  ЗаголовокСообщений - Строка. Заголовок сообщений об эшибках.
//  Отказ - в эту переменную вернется значение Истина, если при проверке обнаружены ошибки.
Процедура ПроверитьЦеныКонтрагента(ЗаголовокСообщений, Отказ)

	Для Каждого ТипЦенКонтрагента Из ЦеныПоставщика Цикл
		Если ТипЦенКонтрагента.Записать Тогда

			// Цена.
			Если НЕ ЗначениеЗаполнено(ТипЦенКонтрагента.Цена) Тогда
				СтрокаСообщения = "Для типа цен поставщика """ + Строка(ТипЦенКонтрагента.ТипЦен) + """ не заполнена цена.";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, ЗаголовокСообщений);
			КонецЕсли;

			// Валюта.
			Если НЕ ЗначениеЗаполнено(ТипЦенКонтрагента.Валюта) Тогда
				СтрокаСообщения = "Для типа цен поставщика """ + Строка(ТипЦенКонтрагента.ТипЦен) + """ не заполнена валюта.";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, ЗаголовокСообщений);
			КонецЕсли;

			// Единица измерения.
			Если НЕ ЗначениеЗаполнено(ТипЦенКонтрагента.ЕдиницаИзмерения) Тогда
				СтрокаСообщения = "Для типа цен поставщика """ + Строка(ТипЦенКонтрагента.ТипЦен) + """ не заполнена единица измерения.";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, ЗаголовокСообщений);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЦеныКонтрагента()

// Процедура проверяет правильность заполнения таблицы цен номенклатуры.
//
// Параметры:
//  ЗаголовокСообщений - Строка. Заголовок сообщений об эшибках.
//  Отказ - в эту переменную вернется значение Истина, если при проверке обнаружены ошибки.
Процедура ПроверитьЦеныНоменклатуры(ЗаголовокСообщений, Отказ)

	Для Каждого ТипЦенНоменклатуры Из ЦеныНоменклатуры Цикл
		Если ТипЦенНоменклатуры.Записать Тогда
			Если Не ТипЦенНоменклатуры.ТипЦен.Рассчитывается Тогда

				// Цена.
				Если НЕ ЗначениеЗаполнено(ТипЦенНоменклатуры.Цена) Тогда
					СтрокаСообщения = "Для типа цен """ + Строка(ТипЦенНоменклатуры.ТипЦен) + """ не заполнена цена.";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, ЗаголовокСообщений);
				КонецЕсли;
			КонецЕсли;

			// Способ расчета цены.
			Если ЗначениеЗаполнено(ТипЦенНоменклатуры.ТипЦен.БазовыйТипЦен) Тогда
				Если НЕ ЗначениеЗаполнено(ТипЦенНоменклатуры.СпособРасчетаЦены) Тогда
					СтрокаСообщения = "Для типа цен """ + Строка(ТипЦенНоменклатуры.ТипЦен) + """ не заполнен способ расчета цены.";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, ЗаголовокСообщений);
				КонецЕсли;
			КонецЕсли;

			// Валюта.
			Если НЕ ЗначениеЗаполнено(ТипЦенНоменклатуры.Валюта) Тогда
				СтрокаСообщения = "Для типа цен """ + Строка(ТипЦенНоменклатуры.ТипЦен) + """ не заполнена валюта.";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, ЗаголовокСообщений);
			КонецЕсли;

			// Единица измерения.
			Если НЕ ЗначениеЗаполнено(ТипЦенНоменклатуры.ЕдиницаИзмерения) Тогда
				СтрокаСообщения = "Для типа цен """ + Строка(ТипЦенНоменклатуры.ТипЦен) + """ не заполнена единица измерения.";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, ЗаголовокСообщений);
			КонецЕсли;

			// Доступность изменения процента скидки наценки в строке.
			Если ЗначениеЗаполнено(ТипЦенНоменклатуры.ТипЦен.БазовыйТипЦен)
			 И ТипЦенНоменклатуры.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда
				// Процент скидки/наценки.
				Если НЕ ЗначениеЗаполнено(ТипЦенНоменклатуры.ПроцентСкидкиНаценки) Тогда
					СтрокаСообщения = "Для типа цен """ + Строка(ТипЦенНоменклатуры.ТипЦен) + """ не заполнен процент скидки/наценки.";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, ЗаголовокСообщений);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЦеныНоменклатуры()

// Процедура сохраняет данные по номенклатуре контрагента.
//
// Параметры:
//  Отказ - в эту переменную вернется значение Истина, если попытка сохранения провалилась.
Процедура СохранитьНоменклатуруКонтрагента(Отказ)

	// Если Основной поставщик не выбран, то и делать больше нечего.
	Если ЗначениеЗаполнено(ОсновнойПоставщик) Тогда
		ЗаписатьЦеныКонтрагента = Ложь;
		Для Каждого ТипЦенКонтрагента Из ЦеныПоставщика Цикл
			Если ТипЦенКонтрагента.Записать Тогда
				ЗаписатьЦеныКонтрагента = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		// Если нет ни одного типа цен для записи, то создавать документ смысла нет.
		Если ЗаписатьЦеныКонтрагента Тогда
			Если НЕ ЗначениеЗаполнено(ДокументУстановкаЦенКонтрагента) Тогда
				Ответ = Вопрос("Не выбран документ для записи данных по ценам поставщика."
							   + Символы.ПС + "Создать новый документ ""Установка цен номенклатуры контрагентов"" и продолжить запись?"
							   , РежимДиалогаВопрос.ДаНет);

				Если Ответ = КодВозвратаДиалога.Да Тогда
					ДокументОбъект = Документы.УстановкаЦенНоменклатурыКонтрагентов.СоздатьДокумент();
					ДокументОбъект.Дата = РабочаяДата;
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"));
					ДокументОбъект.Контрагент = ОсновнойПоставщик;

					ИндексСтрокиТаблицыЦен = 0;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			Иначе
				ДокументОбъект = ДокументУстановкаЦенКонтрагента.ПолучитьОбъект();

				// Определим следующий индекс строки.
				СписокИндексов = Новый СписокЗначений;
				МассивИндексов = ДокументУстановкаЦенКонтрагента.Товары.ВыгрузитьКолонку("ИндексСтрокиТаблицыЦен");
				СписокИндексов.ЗагрузитьЗначения(МассивИндексов);
				СписокИндексов.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
				ИндексСтрокиТаблицыЦен = СписокИндексов[0].Значение + 1;
			КонецЕсли;

			Для Каждого ТипЦенКонтрагента Из ЦеныПоставщика Цикл
				Если ТипЦенКонтрагента.Записать Тогда
					СтрокаТипЦен = ДокументОбъект.ТипыЦен.Найти(ТипЦенКонтрагента.ТипЦен, "ТипЦен");

					Если СтрокаТипЦен = Неопределено Тогда
						СтрокаТипЦен = ДокументОбъект.ТипыЦен.Добавить();
						СтрокаТипЦен.ТипЦен = ТипЦенКонтрагента.ТипЦен;
					КонецЕсли;

					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Номенклатура", Ссылка);
					СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
					СтруктураПоиска.Вставить("ТипЦен", ТипЦенКонтрагента.ТипЦен);

					СтрокаТовары = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ДокументОбъект.Товары, СтруктураПоиска);

					Если СтрокаТовары = Неопределено Тогда
						СтрокаТовары = ДокументОбъект.Товары.Добавить();
						СтрокаТовары.Номенклатура = Ссылка;
						СтрокаТовары.ТипЦен = ТипЦенКонтрагента.ТипЦен;
						СтрокаТовары.ИндексСтрокиТаблицыЦен = ИндексСтрокиТаблицыЦен;
					КонецЕсли;

					СтрокаТовары.Цена = ТипЦенКонтрагента.Цена;
					СтрокаТовары.Валюта = ТипЦенКонтрагента.Валюта;
					СтрокаТовары.ЕдиницаИзмерения = ТипЦенКонтрагента.ЕдиницаИзмерения;
				КонецЕсли;
			КонецЦикла;

			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ДокументУстановкаЦенКонтрагента = ДокументОбъект.Ссылка;
			Исключение
				Сообщить("Не удалось записать документ установки цен: " + ОписаниеОшибки(), СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СохранитьНоменклатуруКонтрагента()

// Процедура - обработчик события ПриИзменении реквизита "ОсновнойПоставщик".
//
Процедура ОсновнойПоставщикПриИзменении(Элемент)

	ОбновитьДанные(Истина);
	УстановитьВидимость();

КонецПроцедуры // ОсновнойПоставщикПриИзменении()

// Функция возвращает значения констант, имена которых переданы в структуре.
//
// Параметры:
//  СтруктураКонстант - структура с именами нужных констант.
//
// Возвращаемое значение:
//  Выборка из результата запроса по константам.
//
Функция ПолучитьКонстанты(СтруктураКонстант)

	Запрос = Новый Запрос;

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|";

	Для Каждого ТекКонстанта Из СтруктураКонстант Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ТаблицаКонстант." + ТекКонстанта.Ключ + ",";
	КонецЦикла;

	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);

	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Константы КАК ТаблицаКонстант
	|";

	Запрос.Текст = ТекстЗапроса;

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка;

КонецФункции // ПолучитьКонстанты()

// Проверяет правильность заполнения реквизитов номенклатуры.
//
// Параметры:
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые надо проверить.
//  Отказ - флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеРеквизитовНоменклатуры(СтруктураОбязательныхПолей, Отказ) Экспорт

	ЗаголовокСообщений = Заголовок;

	Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		Значение = ЭтотОбъект[КлючЗначение.Ключ];

		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита """ + КлючЗначение.Значение + """!";

			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, ЗаголовокСообщений);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента()

// Проверяет уникальность номенклатуры.
//
// Параметры:
//  СтруктураПоискаДублей - структура, содержащая имена полей, по которым надо проверить дубли.
//  Отказ - флаг отказа в проведении.
//
Процедура ПроверитьУникальностьНоменклатуры(СтруктураПоискаДублей, Отказ) Экспорт

	Если СтруктураПоискаДублей.Количество() > 1 Тогда
		ПоискДублей = Обработки.ПоискИЗаменаДублирующихсяЭлементов.Создать();
		НайденныеОбъекты = ПоискДублей.НайтиДубли(ЭтотОбъект, СтруктураПоискаДублей);

		Если НайденныеОбъекты.Количество() <> 0 Тогда
			Если НайденныеОбъекты.Количество() <> 1 Или ЭтоНовый() Тогда
				ФормаПоискаДублей = ПоискДублей.ПолучитьФорму("ФормаПоиска", ЭтаФорма);
				ФормаПоискаДублей.НайденныеОбъекты = НайденныеОбъекты;

				Результат = ФормаПоискаДублей.ОткрытьМодально();
				Если Результат = Неопределено Тогда
					Отказ = Истина;
				ИначеЕсли Результат <> Истина Тогда
					Отказ = Истина;
					ОповеститьОЗаписиНовогоОбъекта(Результат);
					Модифицированность = Ложь;
					Закрыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента()

// Процедура обновляет основную(ТаблицаСтраниц) по новым настройкам установленным пользователем.
//
Процедура ОбновитьНастройки() Экспорт
	Для Каждого ЭлементСтраница Из ТаблицаСтраниц Цикл
		строкаСтраница = ТаблицаСтраницНастройки.Найти(ЭлементСтраница.Имя);
		Если строкаСтраница <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭлементСтраница, строкаСтраница);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ОбновитьНастройки()

// Процедура сохраняет настройки.
//
Процедура СохранитьНастройки() Экспорт

	ОбновитьНастройки();
	СохраненнаяНастройка = Новый Структура;
	СохраненнаяНастройка.Вставить("ТаблицаСтраниц"        , ТаблицаСтраниц);
	СохраненнаяНастройка.Вставить("ТаблицаРеквизитов"     , ТаблицаРеквизитов);
	СохраненнаяНастройка.Вставить("ТаблицаЦенНоменклатуры", ТаблицаЦенНоменклатуры);

	СтруктураНастройки = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(мТекущаяНастройка);
	СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);

	УниверсальныеМеханизмы.СохранениеНастроек(СтруктураНастройки);

КонецПроцедуры // СохранитьНастройки()
// Если для текущей настройки установлено свойство "Сохранять автоматически",
// то текущая настройка будет сохранена.
//
Процедура СохранитьНастройкуАвтоматически() Экспорт
	
	ОбновитьНастройки();
	СохраненнаяНастройка = Новый Структура;
	СохраненнаяНастройка.Вставить("ТаблицаСтраниц"        , ТаблицаСтраниц);
	СохраненнаяНастройка.Вставить("ТаблицаРеквизитов"     , ТаблицаРеквизитов);
	СохраненнаяНастройка.Вставить("ТаблицаЦенНоменклатуры", ТаблицаЦенНоменклатуры);

	мТекущаяНастройка.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);

	УниверсальныеМеханизмы.СохранитьНастройку(мТекущаяНастройка, мТекущаяНастройка);

КонецПроцедуры // СохранитьНастройкуАвтоматически()

// Обработчик события ПередНачаломДобавления ТЧ "Проекты".
//
Процедура ПроектыПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);

КонецПроцедуры // ПроектыПередНачаломДобавления()

// Обработчик события ПриНачалеРедактирования строки ТЧ "Проекты".
//
Процедура ПроектыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.НоменклатураПроекта = Ссылка;
//ВСТАВКА РЕЗОНАНС
		Элемент.ТекущиеДанные.Период = НачалоДня(ТекущаяДата());
//КОНЕЦ ВСТАВКИ
	КонецЕсли;

КонецПроцедуры // ПроектыПриНачалеРедактирования()

// Обработчик события НачалоВыбора реквизита "Проект" в ТЧ "Проекты".
//
Процедура ПроектыПроектНачалоВыбора(Элемент, СтандартнаяОбработка)

	УправлениеПроектами.НачалоВыбораПроекта(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры // ПроектыПроектНачалоВыбора()

// Процедура - обработчик события ПередНачаломДобавления ТЧ "Серии".
//
Процедура СерииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)

	Отказ = Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);

КонецПроцедуры // СерииПередНачаломДобавления()

// Обработчик события "ПриИзменении" реквизита "СпособРасчетаЦены" ТЧ ЦеныНоменклатуры.
//
Процедура ЦеныНоменклатурыСпособРасчетаЦеныПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ЦеныНоменклатуры.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СпособРасчетаЦены) Тогда
		ТекущаяСтрока.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип;
	КонецЕсли;

	Если ТекущаяСтрока.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
		ТекущаяСтрока.ПроцентСкидкиНаценки = 0;
	Иначе
		ТекущаяСтрока.ПроцентСкидкиНаценки = ТекущаяСтрока.ТипЦен.ПроцентСкидкиНаценки;
	КонецЕсли;

КонецПроцедуры // ЦеныНоменклатурыСпособРасчетаЦеныПриИзменении()

// Обработчик события "ПриОкончанииРедактирования" строки ТЧ ЦеныНоменклатуры.
//
Процедура ЦеныНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ТекущаяСтрока = ЭлементыФормы.ЦеныНоменклатуры.ТекущиеДанные;

	// После редактировании строки автоматически установим в этой строке флажок "Записать".
	Если Не ОтменаРедактирования Тогда
		Если ЭлементыФормы.ЦеныНоменклатуры.ТекущаяКолонка.Имя <> "Записать" Тогда
			ТекущаяСтрока.Записать = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЦеныНоменклатурыПриОкончанииРедактирования()

// Обработчик события "ПриИзмененииФлажка" ТЧ ЦеныНоменклатуры.
//
Процедура ЦеныНоменклатурыПриИзмененииФлажка(Элемент, Колонка)

	ТекущаяСтрока = ЭлементыФормы.ЦеныНоменклатуры.ТекущиеДанные;

	Если Колонка.Имя = "Записать" Тогда
		СтрокаТЗНастройкиЦен = ТаблицаЦенНоменклатуры.Найти(ТекущаяСтрока.ТипЦен, "Имя");
		Если СтрокаТЗНастройкиЦен.Обязательность Тогда
			ТекущаяСтрока.Записать = Истина;
			Предупреждение("Данные по типу цен """ + Строка(ТекущаяСтрока.ТипЦен) + """ должны быть обязательно заполнены.");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЦеныНоменклатурыПриИзмененииФлажка()

// Обработчик события "ПриВыводеСтроки" ТЧ ЦеныНоменклатуры.
//
Процедура ЦеныНоменклатурыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	// Доступность изменения способа расчета в строке.
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ТипЦен.БазовыйТипЦен) Тогда
		ОформлениеСтроки.Ячейки.СпособРасчетаЦены.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.СпособРасчетаЦены.ОтметкаНезаполненного = Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.СпособРасчетаЦены.ТолькоПросмотр = Ложь;

		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.СпособРасчетаЦены)
			 И ДанныеСтроки.Записать Тогда
			ОформлениеСтроки.Ячейки.СпособРасчетаЦены.ОтметкаНезаполненного = Истина;
		Иначе
			ОформлениеСтроки.Ячейки.СпособРасчетаЦены.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЕсли;

	// Доступность изменения цены, валюты, единицы измерения в строке.
	Если ДанныеСтроки.ТипЦен.Рассчитывается Тогда
		ОформлениеСтроки.Ячейки.Цена.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Валюта.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Цена.ОтметкаНезаполненного = Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.Цена.ТолькоПросмотр = Ложь;
		ОформлениеСтроки.Ячейки.Валюта.ТолькоПросмотр = Ложь;
		ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ТолькоПросмотр = Ложь;

		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Цена)
			 И ДанныеСтроки.Записать Тогда
			ОформлениеСтроки.Ячейки.Цена.ОтметкаНезаполненного = Истина;
		Иначе
			ОформлениеСтроки.Ячейки.Цена.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЕсли;

	// Доступность изменения процента скидки наценки в строке.
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ТипЦен.БазовыйТипЦен)
	 Или ДанныеСтроки.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
		ОформлениеСтроки.Ячейки.ПроцентСкидкиНаценки.ТолькоПросмотр = Истина;
	Иначе
		ОформлениеСтроки.Ячейки.ПроцентСкидкиНаценки.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры // ЦеныНоменклатурыПриВыводеСтроки()

// Процедура - обработчик события ПередНачаломДобавления ТЧ "Характеристики".
//
Процедура ХарактеристикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)

	Отказ = Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);

КонецПроцедуры // ХарактеристикиПередНачаломДобавления()

// Процедура устанавливает свойство в строке ТЧ.
//
// Параметры:
//  ТЗ - ТаблицаЗначений, в которой нужно установить свойство.
//  Имя - Строка. В строке, колонка "Имя" которой содержит переданный параметр,
//   нужно установить свойство.
//  ИмяСвойства - Строка. Имя свойства, которое нужно установить.
//  ЗначениеСвойства - значение которое нужно установить.
//
Процедура УстановитьСвойствоВТЗ(ТЗ, Имя, ИмяСвойства, ЗначениеСвойства)

	ТЗ.Найти(Имя, "Имя")[ИмяСвойства] = ЗначениеСвойства;

КонецПроцедуры // УстановитьСвойствоВТЗ()

// Процедура устанавливает отборы по ссылке во всех табличных частях со связанной информацией.
//
Процедура УстановитьОтборыДляТЧ()

	Проекты.Отбор.НоменклатураПроекта.Установить(Ссылка);
	ЭлементыФормы.Проекты.НастройкаОтбора.НоменклатураПроекта.Доступность = Ложь;

	Характеристики.Отбор.Владелец.Установить(Ссылка);
	ЭлементыФормы.Характеристики.НастройкаОтбора.Владелец.Доступность = Ложь;

	Комплектующие.Отбор.Номенклатура.Установить(Ссылка);
	ЭлементыФормы.Комплектующие.НастройкаОтбора.Номенклатура.Доступность = Ложь;

	Серии.Отбор.Владелец.Установить(Ссылка);
	ЭлементыФормы.Серии.НастройкаОтбора.Владелец.Доступность = Ложь;

	Штрихкоды.Отбор.Владелец.Установить(Ссылка);
	ЭлементыФормы.Штрихкоды.НастройкаОтбора.Владелец.Доступность = Ложь;

	КодыВесовогоТовара.Отбор.Номенклатура.Установить(Ссылка);
	ЭлементыФормы.КодыВесовогоТовара.НастройкаОтбора.Номенклатура.Доступность = Ложь;

	МестаХранения.Отбор.Номенклатура.Установить(Ссылка);
	ЭлементыФормы.МестаХранения.НастройкаОтбора.Номенклатура.Доступность = Ложь;

	НоменклатураКонтрагентов.Отбор.Номенклатура.Установить(Ссылка);
	НоменклатураКонтрагентов.Отбор.Контрагент.Установить(ОсновнойПоставщик);
	ЭлементыФормы.НоменклатураКонтрагентов.НастройкаОтбора.Номенклатура.Доступность = Ложь;
	ЭлементыФормы.НоменклатураКонтрагентов.НастройкаОтбора.Контрагент.Доступность = Ложь;

КонецПроцедуры // УстановитьОтборыДляТЧ()

Процедура ДокументУстановкаЦенКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.УстановкаЦенНоменклатурыКонтрагентов.ПолучитьФормуВыбора(, Элемент);
	
	ФормаВыбора.Отбор.Контрагент.Использование = Истина;
	ФормаВыбора.Отбор.Контрагент.Значение 	   = ОсновнойПоставщик;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры


//ВСТАВКА РЕЗОНАНС Обработчик изменения элемента формы

Процедура Р_ВесовойТоварПриИзменении(Элемент)
	
	ВесовойТоварПриИзменении(Элемент);
	
	Если Весовой Тогда
		Если НЕ Р_Делимый Тогда
			Р_Делимый = Истина;
		КонецЕсли
	ИначеЕсли Р_ВыгружатьНаПОС И (Р_КодДляПОС > 0) И Р_Делимый Тогда
		Если Вопрос("Признак ""Делимый"" для POS оставить установленным ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Р_Делимый = Ложь;
		КонецЕсли
	КонецЕсли
	
КонецПроцедуры

Процедура Р_СоздатьЗакладкуДанныхДляСвязиСЭККА()
	
	//Новые реквизиты для элемента номенклатуры необходимые для связи с ЭККА
	Этаформа.ЭлементыФормы.ОсновнаяПанель.Страницы.Добавить("Р_ОбменСPOS","POS (Обмен с POS)");
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_ОбменСPOS;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	НадписьП = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_Предупреждение",Истина,ЭлементыФормы.ОсновнаяПанель);
	НадписьП.Имя = "НадписьР_Предупреждение";
	НадписьП.Заголовок = "Запрещено менять эти параметры до Z-отчета, если в текущей смене ЭККА эта номенклатура попала в чек";
	НадписьП.Верх = 6;
	НадписьП.Лево = 6;
	НадписьП.Высота = 16;
	НадписьП.Ширина = 600;
	НадписьП.Доступность = Истина;
	НадписьП.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	НадписьП.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	НадписьП.Видимость = Истина;
	НадписьП.ВыделятьОтрицательные = Ложь;
	НадписьП.ГиперСсылка = Ложь;
	НадписьП.ИзменяетДанные = Ложь;
	НадписьП.ПервыйВГруппе = Ложь;
	НадписьП.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	НадписьП.ПорядокОтображения = 2;
	НадписьП.ПрозрачныйФон = Ложь;
	НадписьП.ПропускатьПриВводе = Ложь;
	НадписьП.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	НадписьП.УстановитьПривязку(ГраницаЭлементаУправления.Верх,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	НадписьП.УстановитьПривязку(ГраницаЭлементаУправления.Низ,   ЭлементыФормы.НадписьР_Предупреждение, ГраницаЭлементаУправления.Верх);
	НадписьП.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	НадписьП.УстановитьПривязку(ГраницаЭлементаУправления.Право,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Право);
	НадписьП.ЦветТекста = Новый Цвет(250,0,0);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	РамкаО = ЭлементыФормы.Добавить(Тип("РамкаГруппы"),"РамкаР_Общие",Истина,ЭлементыФормы.ОсновнаяПанель);
	РамкаО.Имя = "РамкаР_Общие";
	РамкаО.Заголовок = "Общие офис-коды";
	РамкаО.Верх = 26;
	РамкаО.Лево = 6;
	РамкаО.Высота = 44;
	РамкаО.Ширина = 627;
	РамкаО.УстановитьПривязку(ГраницаЭлементаУправления.Верх,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	РамкаО.УстановитьПривязку(ГраницаЭлементаУправления.Низ,   ЭлементыФормы.РамкаР_Общие, ГраницаЭлементаУправления.Верх);
	РамкаО.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	РамкаО.УстановитьПривязку(ГраницаЭлементаУправления.Право,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Право);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ФлажокВ = ЭлементыФормы.Добавить(Тип("Флажок"),"Р_ВыгружатьНаПОС",Истина,ЭлементыФормы.ОсновнаяПанель);
	ФлажокВ.Имя = "Р_ВыгружатьНаПОС";
	ФлажокВ.Данные = "Р_ВыгружатьНаПОС";
	ФлажокВ.Заголовок = "Выгружать на POS";
	ФлажокВ.Подсказка = "Выгружать на POS-терминал для ЭККА";
	ФлажокВ.Верх = 43;
	ФлажокВ.Лево = 15;
	ФлажокВ.Высота = 19;
	ФлажокВ.Ширина = 200;
	ФлажокВ.Доступность = Истина;
	ФлажокВ.АвтоКонтекстноеМеню = Истина;
	ФлажокВ.АктивизироватьПоУмолчанию = Ложь;
	ФлажокВ.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ФлажокВ.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ФлажокВ.Видимость = Истина;
	ФлажокВ.ИзменяетДанные = Ложь;
	ФлажокВ.ПервыйВГруппе = Ложь;
	ФлажокВ.ПоложениеЗаголовка = ПоложениеЗаголовка.ЗаголовокСправа;
	ФлажокВ.ПорядокОтображения = 3;
	ФлажокВ.ПрозрачныйФон = Ложь;
	ФлажокВ.ПропускатьПриВводе = Ложь;
	ФлажокВ.ТриСостояния = Ложь;
	ФлажокВ.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель,				ГраницаЭлементаУправления.Верх);
	ФлажокВ.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭлементыФормы.Р_ВыгружатьНаПОС,	ГраницаЭлементаУправления.Верх);
	ФлажокВ.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель,				ГраницаЭлементаУправления.Лево);
	ФлажокВ.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭлементыФормы.Р_ВыгружатьНаПОС,	ГраницаЭлементаУправления.Лево);
	ОбработкаПриИзменении = Новый Действие("Р_ВыгружатьНаПОСПриИзменении");
	ФлажокВ.УстановитьДействие("ПриИзменении",ОбработкаПриИзменении);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_КодДляПОС",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_КодДляПОС";
	Надпись.Заголовок = "Офис-код:";
	Надпись.Верх = 43;
	Надпись.Лево = 137;
	Надпись.Высота = 19;
	Надпись.Ширина = 70;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 4;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭлементыФормы.НадписьР_КодДляПОС,ГраницаЭлементаУправления.Верх);
	Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭлементыФормы.НадписьР_КодДляПОС,ГраницаЭлементаУправления.Лево);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВводаК = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_КодДляПОС",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВводаК.Имя = "Р_КодДляПОС";
	ПолеВводаК.Данные = "Р_КодДляПОС";
	ПолеВводаК.Подсказка = "Офис-код для ПОС. Заполняется автоматически при записи уникальным значением. При снятии флажка ""Выгружать на POS"" это поле НЕ очищайте";
	ПолеВводаК.Верх = 43;
	ПолеВводаК.Лево = 191;
	ПолеВводаК.Высота = 19;
	ПолеВводаК.Ширина = 60;
	ПолеВводаК.Доступность = Истина;
	ПолеВводаК.АвтоВыборНезаполненного = Ложь;
	ПолеВводаК.АвтоКонтекстноеМеню = Истина;
	ПолеВводаК.АвтоОтметкаНезаполненного = Ложь;
	ПолеВводаК.АвтоПереносСтрок = Истина;
	ПолеВводаК.АктивизироватьПоУмолчанию = Ложь;
	ПолеВводаК.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВводаК.Видимость = Истина;
	ПолеВводаК.ВыбиратьТип = Истина;
	ПолеВводаК.ВыборНезаполненного = Ложь;
	ПолеВводаК.ВыделятьОтрицательные = Ложь;
	ПолеВводаК.ИзменяетДанные = Ложь;
	ПолеВводаК.КнопкаВыбора = Ложь;
	ПолеВводаК.КнопкаОткрытия = Ложь;
	ПолеВводаК.КнопкаОчистки = Ложь;
	ПолеВводаК.КнопкаРегулирования = Ложь;
	ПолеВводаК.КнопкаСпискаВыбора = Ложь;
	ПолеВводаК.ОтметкаНезаполненного = Ложь;
	ПолеВводаК.ПервыйВГруппе = Ложь;
	ПолеВводаК.ПорядокОтображения = 5;
	ПолеВводаК.ПрозрачныйФон = Ложь;
	ПолеВводаК.ПропускатьПриВводе = Ложь;
	ПолеВводаК.РедактированиеТекста = Истина;
	ПолеВводаК.РежимВыбораИзСписка = Ложь;
	ПолеВводаК.ТолькоПросмотр = Ложь;
	ПолеВводаК.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	ПолеВводаК.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭлементыФормы.Р_КодДляПОС,ГраницаЭлементаУправления.Верх);
	ПолеВводаК.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	ПолеВводаК.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭлементыФормы.Р_КодДляПОС,ГраницаЭлементаУправления.Лево);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	НадписьН = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_НаименованиеДляЧека",Истина,ЭлементыФормы.ОсновнаяПанель);
	НадписьН.Имя = "НадписьР_НаименованиеДляЧека";
	НадписьН.Заголовок = "Наименование для чека:";
	НадписьН.Верх = 43;
	НадписьН.Лево = 262;
	НадписьН.Высота = 19;
	НадписьН.Ширина = 126;
	НадписьН.Доступность = Истина;
	НадписьН.АвтоКонтекстноеМеню = Истина;
	НадписьН.АктивизироватьПоУмолчанию = Ложь;
	НадписьН.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	НадписьН.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	НадписьН.Видимость = Истина;
	НадписьН.ВыделятьОтрицательные = Ложь;
	НадписьН.ГиперСсылка = Ложь;
	НадписьН.ИзменяетДанные = Ложь;
	НадписьН.ПервыйВГруппе = Ложь;
	НадписьН.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	НадписьН.ПорядокОтображения = 6;
	НадписьН.ПрозрачныйФон = Ложь;
	НадписьН.ПропускатьПриВводе = Ложь;
	НадписьН.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	НадписьН.УстановитьПривязку(ГраницаЭлементаУправления.Верх,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	НадписьН.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭлементыФормы.НадписьР_НаименованиеДляЧека, ГраницаЭлементаУправления.Верх);
	НадписьН.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	НадписьН.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.НадписьР_НаименованиеДляЧека, ГраницаЭлементаУправления.Лево);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВводаН = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_НаименованиеДляЧека",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВводаН.Имя = "Р_НаименованиеДляЧека";
	ПолеВводаН.Данные = "Р_НаименованиеДляЧека";
	ПолеВводаН.Подсказка = "Наименование для чека. При снятии флажка ""Выгружать на POS"" это поле НЕ очищайте";
	ПолеВводаН.Верх = 43;
	ПолеВводаН.Лево = 391;
	ПолеВводаН.Высота = 19;
	ПолеВводаН.Ширина = 165;
	ПолеВводаН.Доступность = Истина;
	ПолеВводаН.АвтоВыборНезаполненного = Ложь;
	ПолеВводаН.АвтоКонтекстноеМеню = Истина;
	ПолеВводаН.АвтоОтметкаНезаполненного = Ложь;
	ПолеВводаН.АвтоПереносСтрок = Истина;
	ПолеВводаН.АктивизироватьПоУмолчанию = Ложь;
	ПолеВводаН.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВводаН.Видимость = Истина;
	ПолеВводаН.ВыбиратьТип = Истина;
	ПолеВводаН.ВыборНезаполненного = Ложь;
	ПолеВводаН.ВыделятьОтрицательные = Ложь;
	ПолеВводаН.ИзменяетДанные = Ложь;
	ПолеВводаН.КнопкаВыбора = Ложь;
	ПолеВводаН.КнопкаОткрытия = Ложь;
	ПолеВводаН.КнопкаОчистки = Ложь;
	ПолеВводаН.КнопкаРегулирования = Ложь;
	ПолеВводаН.КнопкаСпискаВыбора = Ложь;
	ПолеВводаН.МногострочныйРежим = Ложь;
	ПолеВводаН.ОтметкаНезаполненного = Ложь;
	ПолеВводаН.ПервыйВГруппе = Ложь;
	ПолеВводаН.ПорядокОтображения = 7;
	ПолеВводаН.ПрозрачныйФон = Ложь;
	ПолеВводаН.ПропускатьПриВводе = Ложь;
	ПолеВводаН.РасширенноеРедактирование = Ложь;
	ПолеВводаН.РедактированиеТекста = Истина;
	ПолеВводаН.РежимВыбораИзСписка = Ложь;
	ПолеВводаН.РежимПароля = Ложь;
	ПолеВводаН.ТолькоПросмотр = Ложь;
	ПолеВводаН.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	ПолеВводаН.УстановитьПривязку(ГраницаЭлементаУправления.Низ,		ЭлементыФормы.Р_НаименованиеДляЧека, ГраницаЭлементаУправления.Верх);
	ПолеВводаН.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	ПолеВводаН.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭлементыФормы.Р_НаименованиеДляЧека, ГраницаЭлементаУправления.Лево);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ФлажокД = ЭлементыФормы.Добавить(Тип("Флажок"),"Р_Делимый", Истина, ЭлементыФормы.ОсновнаяПанель);
	ФлажокД.Имя = "Р_Делимый";
	ФлажокД.Данные = "Р_Делимый";
	ФлажокД.Заголовок = "Делимый товар";
	ФлажокД.Подсказка = "Только делимый товар может на ЭККА ""Мария"" продаваться дробным количеством";
	ФлажокД.Верх = 43;
	ФлажокД.Лево = 563;
	ФлажокД.Высота = 19;
	ФлажокД.Ширина = 58;
	ФлажокД.Доступность = Истина;
	ФлажокД.АвтоКонтекстноеМеню = Истина;
	ФлажокД.АктивизироватьПоУмолчанию = Ложь;
	ФлажокД.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ФлажокД.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ФлажокД.Видимость = Истина;
	ФлажокД.ИзменяетДанные = Ложь;
	ФлажокД.ПервыйВГруппе = Ложь;
	ФлажокД.ПоложениеЗаголовка = ПоложениеЗаголовка.ЗаголовокСправа;
	ФлажокД.ПорядокОтображения = 8;
	ФлажокД.ПрозрачныйФон = Ложь;
	ФлажокД.ПропускатьПриВводе = Ложь;
	ФлажокД.ТриСостояния = Ложь;
	ФлажокД.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель,			ГраницаЭлементаУправления.Верх);
	ФлажокД.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭлементыФормы.Р_Делимый,	ГраницаЭлементаУправления.Верх);
	ФлажокД.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	ФлажокД.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭлементыФормы.РамкаР_Общие, ГраницаЭлементаУправления.Право);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ФлажокН = ЭлементыФормы.Добавить(Тип("Флажок"),"Р_НеПрименятьСкидки", Истина, ЭлементыФормы.ОсновнаяПанель);
	ФлажокН.Имя = "Р_НеПрименятьСкидки";
	ФлажокН.Данные = "Р_НеПрименятьСкидки";
	ФлажокН.Заголовок = "Не применять скидки";
	ФлажокН.Подсказка = "На товар не распространяются автоматические скидки";
	ФлажокН.Верх = 72;
	ФлажокН.Лево = 6;
	ФлажокН.Высота = 19;
	ФлажокН.Ширина = 130;
	ФлажокН.Доступность = Истина;
	ФлажокН.АвтоКонтекстноеМеню = Истина;
	ФлажокН.АктивизироватьПоУмолчанию = Ложь;
	ФлажокН.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ФлажокН.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ФлажокН.Видимость = Истина;
	ФлажокН.ИзменяетДанные = Ложь;
	ФлажокН.ПервыйВГруппе = Ложь;
	ФлажокН.ПоложениеЗаголовка = ПоложениеЗаголовка.ЗаголовокСправа;
	ФлажокН.ПорядокОтображения = 8;
	ФлажокН.ПрозрачныйФон = Ложь;
	ФлажокН.ПропускатьПриВводе = Ложь;
	ФлажокН.ТриСостояния = Ложь;
	ФлажокН.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель,			ГраницаЭлементаУправления.Верх);
	ФлажокН.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭлементыФормы.Р_НеПрименятьСкидки,	ГраницаЭлементаУправления.Верх);
	ФлажокН.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель,			ГраницаЭлементаУправления.Лево);
	ФлажокН.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭлементыФормы.Р_НеПрименятьСкидки, ГраницаЭлементаУправления.Лево);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ФлажокД = ЭлементыФормы.Добавить(Тип("Флажок"),"Р_НеПрименятьБонусы", Истина, ЭлементыФормы.ОсновнаяПанель);
	ФлажокД.Имя = "Р_НеПрименятьБонусы";
	ФлажокД.Данные = "Р_НеПрименятьБонусы";
	ФлажокД.Заголовок = "Не применять для бонусов";
	ФлажокД.Подсказка = "Продажа товара не влияет на сумму бонусов";
	ФлажокД.Верх = 72;
	ФлажокД.Лево = 137;
	ФлажокД.Высота = 19;
	ФлажокД.Ширина = 160;
	ФлажокД.Доступность = Истина;
	ФлажокД.АвтоКонтекстноеМеню = Истина;
	ФлажокД.АктивизироватьПоУмолчанию = Ложь;
	ФлажокД.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ФлажокД.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ФлажокД.Видимость = Истина;
	ФлажокД.ИзменяетДанные = Ложь;
	ФлажокД.ПервыйВГруппе = Ложь;
	ФлажокД.ПоложениеЗаголовка = ПоложениеЗаголовка.ЗаголовокСправа;
	ФлажокД.ПорядокОтображения = 8;
	ФлажокД.ПрозрачныйФон = Ложь;
	ФлажокД.ПропускатьПриВводе = Ложь;
	ФлажокД.ТриСостояния = Ложь;
	ФлажокД.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель,			ГраницаЭлементаУправления.Верх);
	ФлажокД.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭлементыФормы.Р_НеПрименятьБонусы,	ГраницаЭлементаУправления.Верх);
	ФлажокД.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель,			ГраницаЭлементаУправления.Лево);
	ФлажокД.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭлементыФормы.Р_НеПрименятьБонусы, ГраницаЭлементаУправления.Лево);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	ВидимостьПоляГСМНБ = (ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ) И (ВидНоменклатуры.Р_ОсновнаяЕдиницаИзмеренияНаАЗС <> ВидНоменклатуры.Р_ОсновнаяЕдиницаИзмеренияНаНБ);
	
	НадписьН = ЭлементыФормы.Добавить(Тип("Надпись"), "НадписьР_ЭтотГСМНаНефтебазе", Истина, ЭлементыФормы.ОсновнаяПанель);
	НадписьН.Имя = "НадписьР_ЭтотГСМНаНефтебазе";
	НадписьН.Заголовок = "Этот ГСМ на НБ:";
	НадписьН.Верх = 72;
	НадписьН.Лево = 303;
	НадписьН.Высота = 19;
	НадписьН.Ширина = 130;
	НадписьН.Доступность = Истина;
	НадписьН.АвтоКонтекстноеМеню = Истина;
	НадписьН.АктивизироватьПоУмолчанию = Ложь;
	НадписьН.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	НадписьН.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	НадписьН.Видимость = ВидимостьПоляГСМНБ;
	НадписьН.ВыделятьОтрицательные = Ложь;
	НадписьН.ГиперСсылка = Ложь;
	НадписьН.ИзменяетДанные = Ложь;
	НадписьН.ПервыйВГруппе = Ложь;
	НадписьН.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	НадписьН.ПорядокОтображения = 6;
	НадписьН.ПрозрачныйФон = Ложь;
	НадписьН.ПропускатьПриВводе = Ложь;
	НадписьН.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	НадписьН.УстановитьПривязку(ГраницаЭлементаУправления.Верх,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	НадписьН.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	 ЭлементыФормы.НадписьР_ЭтотГСМНаНефтебазе, ГраницаЭлементаУправления.Верх);
	НадписьН.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	НадписьН.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.НадписьР_ЭтотГСМНаНефтебазе, ГраницаЭлементаУправления.Лево);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВводаН = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "Р_ЭтотГСМНаНефтебазе", Истина, ЭлементыФормы.ОсновнаяПанель);
	ПолеВводаН.Имя = "Р_ЭтотГСМНаНефтебазе";
	ПолеВводаН.Данные = "Р_ЭтотГСМНаНефтебазе";
	ПолеВводаН.Подсказка = "Этот ГСМ на нефтебазе. Заполняется для ГСМ, выгружаемого на АЗС (установлено ""Выгружать на POS"", ""Кода для POS"" > 0";
	ПолеВводаН.Верх = 72;
	ПолеВводаН.Лево = 391;
	ПолеВводаН.Высота = 19;
	ПолеВводаН.Ширина = 165;
	ПолеВводаН.Доступность = Истина;
	ПолеВводаН.АвтоВыборНезаполненного = Ложь;
	ПолеВводаН.АвтоКонтекстноеМеню = Истина;
	ПолеВводаН.АвтоОтметкаНезаполненного = Ложь;
	ПолеВводаН.АвтоПереносСтрок = Истина;
	ПолеВводаН.АктивизироватьПоУмолчанию = Ложь;
	ПолеВводаН.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВводаН.Видимость = ВидимостьПоляГСМНБ;
	ПолеВводаН.ВыбиратьТип = Истина;
	ПолеВводаН.ВыборНезаполненного = Ложь;
	ПолеВводаН.ВыделятьОтрицательные = Ложь;
	ПолеВводаН.ИзменяетДанные = Ложь;
	ПолеВводаН.КнопкаВыбора = Истина;
	ПолеВводаН.КнопкаОткрытия = Истина;
	ПолеВводаН.КнопкаОчистки = Истина;
	ПолеВводаН.КнопкаРегулирования = Ложь;
	ПолеВводаН.КнопкаСпискаВыбора = Ложь;
	ПолеВводаН.ОтметкаНезаполненного = Ложь;
	ПолеВводаН.ПервыйВГруппе = Ложь;
	ПолеВводаН.ПорядокОтображения = 7;
	ПолеВводаН.ПрозрачныйФон = Ложь;
	ПолеВводаН.ПропускатьПриВводе = Ложь;
	ПолеВводаН.РедактированиеТекста = Истина;
	ПолеВводаН.РежимВыбораИзСписка = Ложь;
	ПолеВводаН.ТолькоПросмотр = Ложь;
	ПолеВводаН.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	ПолеВводаН.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭлементыФормы.Р_ЭтотГСМНаНефтебазе, ГраницаЭлементаУправления.Верх);
	ПолеВводаН.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	ПолеВводаН.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭлементыФормы.Р_ЭтотГСМНаНефтебазе, ГраницаЭлементаУправления.Лево);
	ПолеВводаН.УстановитьДействие("ПриИзменении", Новый Действие("Р_ЭтотГСМНаНефтебазеПриИзменении"));
	
	ВидимостьПоляПетрол = (ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ);
	
	НадписьН = ЭлементыФормы.Добавить(Тип("Надпись"), "НадписьР_ИД_ГСМ_Петрол", Истина, ЭлементыФормы.ОсновнаяПанель);
	НадписьН.Имя = "НадписьР_ИД_ГСМ_Петрол";
	НадписьН.Заголовок = "ID Petrol:";
	НадписьН.Верх = 72;
	НадписьН.Лево = 563;
	НадписьН.Высота = 19;
	НадписьН.Ширина = 45;
	НадписьН.Доступность = Истина;
	НадписьН.АвтоКонтекстноеМеню = Истина;
	НадписьН.АктивизироватьПоУмолчанию = Ложь;
	НадписьН.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	НадписьН.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	НадписьН.Видимость = ВидимостьПоляПетрол;
	НадписьН.ВыделятьОтрицательные = Ложь;
	НадписьН.ГиперСсылка = Ложь;
	НадписьН.ИзменяетДанные = Ложь;
	НадписьН.ПервыйВГруппе = Ложь;
	НадписьН.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	НадписьН.ПорядокОтображения = 6;
	НадписьН.ПрозрачныйФон = Ложь;
	НадписьН.ПропускатьПриВводе = Ложь;
	НадписьН.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	НадписьН.УстановитьПривязку(ГраницаЭлементаУправления.Верх,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	НадписьН.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	 ЭлементыФормы.НадписьР_ИД_ГСМ_Петрол, ГраницаЭлементаУправления.Верх);
	НадписьН.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	НадписьН.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.НадписьР_ИД_ГСМ_Петрол, ГраницаЭлементаУправления.Лево);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВводаН = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "Р_ИД_ГСМ_Петрол", Истина, ЭлементыФормы.ОсновнаяПанель);
	ПолеВводаН.Имя = "Р_ИД_ГСМ_Петрол";
	ПолеВводаН.Данные = "Р_ИД_ГСМ_Петрол";
	ПолеВводаН.Подсказка = "ID услуги Petrol+";
	ПолеВводаН.Верх = 72;
	ПолеВводаН.Лево = 608;
	ПолеВводаН.Высота = 19;
	ПолеВводаН.Ширина = 60;
	ПолеВводаН.Доступность = Истина;
	ПолеВводаН.АвтоВыборНезаполненного = Ложь;
	ПолеВводаН.АвтоКонтекстноеМеню = Истина;
	ПолеВводаН.АвтоОтметкаНезаполненного = Ложь;
	ПолеВводаН.АвтоПереносСтрок = Истина;
	ПолеВводаН.АктивизироватьПоУмолчанию = Ложь;
	ПолеВводаН.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВводаН.Видимость = ВидимостьПоляПетрол;
	ПолеВводаН.ВыбиратьТип = Истина;
	ПолеВводаН.ВыборНезаполненного = Ложь;
	ПолеВводаН.ВыделятьОтрицательные = Ложь;
	ПолеВводаН.ИзменяетДанные = Ложь;
	ПолеВводаН.КнопкаВыбора = Ложь;
	ПолеВводаН.КнопкаОткрытия = Ложь;
	ПолеВводаН.КнопкаОчистки = Ложь;
	ПолеВводаН.КнопкаРегулирования = Ложь;
	ПолеВводаН.КнопкаСпискаВыбора = Ложь;
	ПолеВводаН.ОтметкаНезаполненного = Ложь;
	ПолеВводаН.ПервыйВГруппе = Ложь;
	ПолеВводаН.ПорядокОтображения = 7;
	ПолеВводаН.ПрозрачныйФон = Ложь;
	ПолеВводаН.ПропускатьПриВводе = Ложь;
	ПолеВводаН.РедактированиеТекста = Истина;
	ПолеВводаН.РежимВыбораИзСписка = Ложь;
	ПолеВводаН.ТолькоПросмотр = Ложь;
	ПолеВводаН.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	ПолеВводаН.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭлементыФормы.Р_ИД_ГСМ_Петрол, ГраницаЭлементаУправления.Верх);
	ПолеВводаН.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	ПолеВводаН.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭлементыФормы.Р_ИД_ГСМ_Петрол, ГраницаЭлементаУправления.Лево);
	
	Р_СоздатьТаблицуЧастныхОфисКодов();
	
	ЭлементыФормы.Р_Делимый.Доступность 			= Р_ВыгружатьНаПОС;
	ЭлементыФормы.Р_КодДляПОС.Доступность 			= Р_ВыгружатьНаПОС;
	ЭлементыФормы.Р_НаименованиеДляЧека.Доступность = Р_ВыгружатьНаПОС;
	ЭлементыФормы.Р_ТоварыНаПОС.Доступность			= Р_ВыгружатьНаПОС;

	Если НЕ РольДоступна("Р_Обмен_ПОС") Тогда
		ЭлементыФормы.Р_ВыгружатьНаПОС.Доступность = Ложь;
		ЭлементыФормы.Р_КодДляПОС.ТолькоПросмотр = Истина;
		ЭлементыФормы.Р_НаименованиеДляЧека.ТолькоПросмотр = Истина;
		ЭлементыФормы.Р_Делимый.Доступность = Ложь;
		ЭлементыФормы.Р_ТоварыНаПОС.ТолькоПросмотр = Истина;
	ИначеЕсли ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ Тогда
		ЭлементыФормы.Р_ТоварыНаПОС.ТолькоПросмотр = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура Р_ИзменитьТаблицуКомплектующие()
	
	ЭлементыФормы.Комплектующие.Колонки.Комплектующая.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	
КонецПроцедуры

Процедура Р_СоздатьТаблицуЧастныхОфисКодов()
	
	//Р_ТоварыНаПОС**************************************************
	НадписьЧ = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_Частные", Истина, ЭлементыФормы.ОсновнаяПанель);
	НадписьЧ.Имя = "НадписьР_Частные";
	НадписьЧ.Заголовок = "Частные офис-коды";
	НадписьЧ.Верх = 92;
	НадписьЧ.Лево = 12;
	НадписьЧ.Высота = 16;
	НадписьЧ.Ширина = 200;
	НадписьЧ.Доступность = Истина;
	НадписьЧ.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	НадписьЧ.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	НадписьЧ.Видимость = Истина;
	НадписьЧ.ГиперСсылка = Ложь;
	НадписьЧ.ИзменяетДанные = Ложь;
	НадписьЧ.ПервыйВГруппе = Ложь;
	НадписьЧ.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	НадписьЧ.ПорядокОтображения = 9;
	НадписьЧ.ПрозрачныйФон = Ложь;
	НадписьЧ.ПропускатьПриВводе = Ложь;
	НадписьЧ.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	НадписьЧ.УстановитьПривязку(ГраницаЭлементаУправления.Верх,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	НадписьЧ.УстановитьПривязку(ГраницаЭлементаУправления.Низ,   ЭлементыФормы.НадписьР_Частные, ГраницаЭлементаУправления.Верх);
	НадписьЧ.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	НадписьЧ.УстановитьПривязку(ГраницаЭлементаУправления.Право,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Право);
	ШТ = Новый Шрифт(НадписьЧ.Шрифт, , , Истина, , Истина);
	НадписьЧ.Шрифт = ШТ;
	НадписьЧ.ЦветТекста = Новый Цвет(159,101,0);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ТабличноеПоле = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "Р_ТоварыНаПОС", Истина, ЭлементыФормы.ОсновнаяПанель);
	ТабличноеПоле.Имя = "Р_ТоварыНаПОС";
	ТабличноеПоле.Данные = "Р_ТоварыНаПОС";
	ТабличноеПоле.Подсказка = "Список частных офис-кодов номенклатуры для POS";
	ТабличноеПоле.Лево = 6;
	ТабличноеПоле.Верх = 110;
	ТабличноеПоле.Высота = 100;
	ТабличноеПоле.Ширина = 627;
	ТабличноеПоле.ПорядокОтображения = 10;
	ТабличноеПоле.Шапка = Истина;
	ТабличноеПоле.ВысотаШапки = 1;
	ТабличноеПоле.ТолькоПросмотр = Ложь;
	ТабличноеПоле.Доступность = Истина;
	ТабличноеПоле.Видимость = Истина;
	ТабличноеПоле.ИзменяетДанные = Ложь;
	ТабличноеПоле.ИзменятьСоставСтрок = Истина;
	ТабличноеПоле.ИзменятьНастройкуКолонок = Истина;
	ТабличноеПоле.ИзменятьПозициюКолонок = Истина;
	ТабличноеПоле.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель,	ГраницаЭлементаУправления.Верх);
	ТабличноеПоле.УстановитьПривязку(ГраницаЭлементаУправления.Низ,		ЭтаФорма.Панель,	ГраницаЭлементаУправления.Низ);
	ТабличноеПоле.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель,	ГраницаЭлементаУправления.Лево);
	ТабличноеПоле.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭтаФорма.Панель, 	ГраницаЭлементаУправления.Право);
	ТабличноеПоле.УстановитьДействие("ПередНачаломДобавления", Новый Действие("Р_ТоварыНаПОСПередНачаломДобавления"));
	ТабличноеПоле.УстановитьДействие("ПередОкончаниемРедактирования", Новый Действие("Р_ТоварыНаПОСПередОкончаниемРедактирования"));
	ТабличноеПоле.УстановитьДействие("ПриНачалеРедактирования", Новый Действие("Р_ТоварыНаПОСПриНачалеРедактирования"));
	
	ТабличноеПоле.СоздатьКолонки();
	КолонкиТП = ТабличноеПоле.Колонки;
	
	КолонкиТП.ПОС.Ширина = 15;
	КолонкиТП.ПОС.ТекстШапки = "POS";
	КолонкиТП.ПОС.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("Р_ПОСПриИзменении"));
	
	КолонкиТП.ТипПО.Ширина = 12;
	КолонкиТП.ТипПО.ТекстШапки = "Тип ПО";
	КолонкиТП.ТипПО.ЭлементУправления.КнопкаСпискаВыбора = Истина;
	КолонкиТП.ТипПО.ЭлементУправления.КнопкаВыбора = Ложь;
	КолонкиТП.ТипПО.ЭлементУправления.КнопкаОчистки = Истина;
	Р_ТипПОНачалоВыбораИзСписка = Новый Действие("Р_ТипПОНачалоВыбораИзСписка");
	КолонкиТП.ТипПО.ЭлементУправления.УстановитьДействие("НачалоВыбораИзСписка", Р_ТипПОНачалоВыбораИзСписка);
	
	КолонкиТП.Код.Ширина = 12;
	КолонкиТП.Код.ТекстШапки = "Офис-код";
	КолонкиТП.Код.ТолькоПросмотр = Истина;
	
	КолонкиТП.НаименованиеДляЧека.Ширина = 30;
	КолонкиТП.НаименованиеДляЧека.ТекстШапки = "Наименование для чека";
	
	КолонкиТП.ЕдиницаИзмерения.Ширина = 12;
	КолонкиТП.ЕдиницаИзмерения.ТекстШапки = "Ед. изм.";
	Р_НачалоВыбораЕдИзм = Новый Действие("Р_ЕдИзмНачалоВыбора");
	КолонкиТП.ЕдиницаИзмерения.ЭлементУправления.УстановитьДействие("НачалоВыбора", Р_НачалоВыбораЕдИзм);
	
	КолонкиТП.КодНалога.Ширина = 7;
	КолонкиТП.КодНалога.ТекстШапки = "Код налога 1";
	КолонкиТП.КодНалога.ПропускатьПриВводе = Истина;
	КолонкиТП.КодНалога2.Ширина = 7;
	КолонкиТП.КодНалога2.ТекстШапки = "Код налога 2";
	КолонкиТП.КодНалога2.ПропускатьПриВводе = Истина;
	КолонкиТП.КодГруппы.Ширина = 7;
	КолонкиТП.КодГруппы.ТекстШапки = "Группа";
	КолонкиТП.КодГруппы.ПропускатьПриВводе = Истина;
	КолонкиТП.КодОтдела.Ширина = 7;
	КолонкиТП.КодОтдела.ТекстШапки = "Отдел";
	КолонкиТП.КодОтдела.ПропускатьПриВводе = Истина;
	
	КолонкиТП.Номенклатура.Видимость = Ложь;
	//КолонкиТП.ЕдиницаИзмерения.Видимость = Ложь;
	КолонкиТП.ХарактеристикаНоменклатуры.Видимость = Ложь;
	КолонкиТП.СерияНоменклатуры.Видимость = Ложь;
	
	Р_ТоварыНаПОС.Отбор.Номенклатура.Установить(Ссылка);
	ТабличноеПоле.НастройкаОтбора.Номенклатура.Доступность = Ложь;
	
КонецПроцедуры

Процедура Р_ПОСПриИзменении(Элемент)
	ТД = ЭлементыФормы.Р_ТоварыНаПОС.ТекущиеДанные;
	тПОС = ТД.ПОС;
	Если ЗначениеЗаполнено(тПОС) Тогда
		тТипыПОПОС = Р_ОбщегоНазначения_ПОС.ПолучитьТипыПОПОС(тПОС);
		Если тТипыПОПОС.Количество() > 0 Тогда
			ТД.ТипПО = тТипыПОПОС[0].ТипПО;
		Иначе
			ТД.ТипПО = Перечисления.Р_ТипыПОПОС.ПустаяСсылка();
		КонецЕсли
	ИначеЕсли ЗначениеЗаполнено(ТД.ТипПО) Тогда
		ТД.ТипПО = Перечисления.Р_ТипыПОПОС.ПустаяСсылка();
	КонецЕсли
КонецПроцедуры

Процедура Р_ТипПОНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВидов = Новый СписокЗначений;
	ТД = ЭлементыФормы.Р_ТоварыНаПОС.ТекущиеДанные;
	тПОС = ТД.ПОС;
	Если ЗначениеЗаполнено(тПОС) Тогда
		тТипыПОПОС = Р_ОбщегоНазначения_ПОС.ПолучитьТипыПОПОС(тПОС);
		Для Каждого СтрПО Из тТипыПОПОС Цикл
			СписокВидов.Добавить(СтрПО.ТипПО);
		КонецЦикла
	КонецЕсли;
	
	Элемент.СписокВыбора = СписокВидов;
	
КонецПроцедуры

Процедура Р_ЕдИзмНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ФормаВыб = Справочники.ЕдиницыИзмерения.ПолучитьФорму("ФормаВыбора",ЭтаФорма);
	ФормаВыб.Отбор.Владелец.Значение = ЭлементыФормы.Р_ТоварыНаПОС.ТекущиеДанные.Номенклатура.Ссылка;
	ФормаВыб.Отбор.Владелец.Использование = Истина;
	ФормаВыб.Открыть();
КонецПроцедуры

Процедура Р_ТоварыНаПОСПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Отказ = Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);

КонецПроцедуры

Процедура Р_ТоварыНаПОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТД = Элемент.ТекущиеДанные;
		ТД.Номенклатура = Ссылка;
		ТД.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
		ТД.Код = Р_КодДляПОС;
		ТД.НаименованиеДляЧека = Р_НаименованиеДляЧека;
		ТД.КодНалога = ?(УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)>0, "А", "");
		ТД.КодГруппы = ?(ЗначениеЗаполнено(Родитель), Число(Родитель.Код), 1);
		ТД.КодОтдела = 1;
	КонецЕсли
КонецПроцедуры

Процедура Р_ТоварыНаПОСПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	Если ЭтоНовый() Тогда
		Сообщить("Номенклатура должна быть записана", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ТД = Элемент.ТекущиеДанные;
	Если (НЕ ЗначениеЗаполнено(ТД.Код)) ИЛИ (НЕ ЗначениеЗаполнено(ТД.НаименованиеДляЧека)) Тогда
		Сообщить("Не заполнены ""Офис-код"" или ""Наименование для чека""", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТД.ПОС) Тогда
		Сообщить("Не выбран POS", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТД.ТипПО) Тогда
		Сообщить("Не выбран Тип ПО", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Р_ВыгружатьНаПОС Тогда
		Сообщить("Не установлено ""Выгружать на POS""", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Р_ОбщегоНазначения.ДопустимоеЗначениеПОПОСДляЧастногоОфисКода(ТД.ПОС, ТД.ТипПО) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Р_ОбщегоНазначения.ДопустимыйЧастныйОфисКод(ТД.Код, ТД.ПОС, ТД.ТипПО, Ссылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	тПроект = Р_ОбщегоНазначения_ПОС.ПолучитьПроектНоменклатуры(Ссылка, ТекущаяДата());
	Если НЕ ЗначениеЗаполнено(тПроект) Тогда
		Сообщить("Номенклатура должна иметь проект", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ТабПроектыПОПОС = Р_ОбщегоНазначения_ПОС.ПолучитьПроектыПОПОС(ТД.ПОС, ТД.ТипПО);
	Если ТабПроектыПОПОС.Найти(тПроект, "Проект") = Неопределено Тогда
		Сообщить("Проект номенклатуры не назначен для ПО POS", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ТД.Номенклатура <> Ссылка Тогда
		ТД.Номенклатура = Ссылка;
	КонецЕсли;
	тЭтоАЗС = (ТД.ПОС.ТорговаяТочка.Вид = Перечисления.Р_ВидыТорговыхТочек.АЗС);
	Если НЕ ЗначениеЗаполнено(ТД.КодНалога) Тогда
		Если тЭтоАЗС Тогда
			ТД.КодНалога = Обработки.Р_ОбменАЗС.ПолучитьКодНалога1ДляАЗС(Ссылка, ТД.ПОС);
		Иначе
			ТД.КодНалога = ?(УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС) > 0, "А", "");
		КонецЕсли
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТД.КодНалога2) Тогда
		Если тЭтоАЗС Тогда
			ТД.КодНалога2 = Обработки.Р_ОбменАЗС.ПолучитьКодНалога2ДляАЗС(Ссылка, ТД.ПОС);
		Иначе
			ТД.КодНалога2 = ?(ПодакцизныйТовар, "Б", ?(Р_ОбщегоНазначения_ПОС.ЭтоСкретчКарта(Ссылка), "Б", ""));
		КонецЕсли
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТД.КодГруппы) Тогда
		ТД.КодГруппы = Обработки.Р_ОбменАЗС.ПолучитьКодГруппыДляАЗС(Ссылка);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТД.КодОтдела) Тогда
		ТД.КодОтдела = Обработки.Р_ОбменАЗС.ПолучитьКодОтделаДляАЗС(Ссылка);
	КонецЕсли
КонецПроцедуры

Процедура Р_ВыгружатьНаПОСПриИзменении(Элемент) Экспорт 
	
	Если Р_ВыгружатьНаПОС Тогда 
		ЭлементыФормы.Р_КодДляПОС.Доступность 			= Истина;
		ЭлементыФормы.Р_НаименованиеДляЧека.Доступность = Истина;
		ЭлементыФормы.Р_Делимый.Доступность 			= Истина;
		ЭлементыФормы.Р_ТоварыНаПОС.Доступность			= Истина;
		Если НЕ ЗначениеЗаполнено(Р_КодДляПОС) Тогда 
			Если Вопрос("Установить код для ПОС ?", РежимДиалогаВопрос.ДаНет, 5) = КодВозвратаДиалога.Да Тогда
				Р_КодДляПОС = ПолучитьКод();
			КонецЕсли;
			ИмяЕдИзм = СокрЛП(БазоваяЕдиницаИзмерения.Наименование);
			Если (ИмяЕдИзм = "л") ИЛИ (ИмяЕдИзм = "кг") ИЛИ (ИмяЕдИзм = "м") ИЛИ (ИмяЕдИзм = "м3") Тогда
				Р_Делимый = Истина;
			КонецЕсли
		КонецЕсли;
	Иначе
		ЭлементыФормы.Р_КодДляПОС.Доступность 			= Ложь;
		ЭлементыФормы.Р_НаименованиеДляЧека.Доступность	= Ложь;
		ЭлементыФормы.Р_Делимый.Доступность 			= Ложь;
		ЭлементыФормы.Р_ТоварыНаПОС.Доступность			= Ложь;
	КонецЕсли; 
	
КонецПроцедуры

Процедура Р_СвойстваИЗначенияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	Если ЭтоНовый() Тогда
		Сообщить("Номенклатура должна быть записана", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ТД = Элемент.ТекущиеДанные;
	Если ТД.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Р_ПлотностьСредняяГСМ Тогда
		Если ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ Тогда
			Если ТД.Значение >= 1 Тогда
				Сообщить("""Плотность средняя"" должна быть меньше 1 кг/л", СтатусСообщения.Важное);
				ТД.Значение = 0;
				Отказ = Истина
			КонецЕсли
		Иначе
			Сообщить("Свойство ""Плотность средняя"" можно устанавливать только для номенклатуры с видом (типом) ""ГСМ""", СтатусСообщения.Важное);
			ТД.Значение = 0;
			Отказ = Истина
		КонецЕсли
	КонецЕсли
КонецПроцедуры

Процедура Р_КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)
	
	КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока);
	
	ТД = Элемент.ТекущиеДанные;
	Если ТД.Категория = Справочники.КатегорииОбъектов.Р_ГАЗ_ГСМ Тогда
		Если ТД.Принадлежность И (ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.ГСМ) Тогда
			Сообщить("Категорию ""Газ"" можно устанавливать только для номенклатуры с видом (типом) ""ГСМ""", СтатусСообщения.Важное);
			ТД.Принадлежность = Ложь
		КонецЕсли
	ИначеЕсли ТД.Категория = Справочники.КатегорииОбъектов.Р_СкретчКарта Тогда
		Если ТД.Принадлежность И (ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар) Тогда
			Сообщить("Категорию ""Скретч-Карта"" можно устанавливать только для номенклатуры с видом (типом) ""Товар""", СтатусСообщения.Важное);
			ТД.Принадлежность = Ложь
		КонецЕсли
	ИначеЕсли ТД.Категория = Справочники.КатегорииОбъектов.Р_ТопливнаяКарта Тогда
		Если ТД.Принадлежность И (ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар) Тогда
			Сообщить("Категорию ""Топливная карта"" можно устанавливать только для номенклатуры с видом (типом) ""Товар""", СтатусСообщения.Важное);
			ТД.Принадлежность = Ложь
		КонецЕсли
	ИначеЕсли ТД.Категория = Справочники.КатегорииОбъектов.Р_ПополнениеТопливнойКарты Тогда
		Если ТД.Принадлежность И (ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга) Тогда
			Сообщить("Категорию ""Пополнение топливной карты"" можно устанавливать только для номенклатуры с видом (типом) ""Услкга""", СтатусСообщения.Важное);
			ТД.Принадлежность = Ложь
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Процедура Р_ВидНоменклатурыПриИзменении(Элемент)
	
	ВидНоменклатурыПриИзменении(Элемент);
	
	ВидимостьПоляЭтотГСМНаНефтебазе = Ложь;
	Если (ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ)
	   И (ВидНоменклатуры.Р_ОсновнаяЕдиницаИзмеренияНаАЗС <> ВидНоменклатуры.Р_ОсновнаяЕдиницаИзмеренияНаНБ) Тогда
		ВидимостьПоляЭтотГСМНаНефтебазе = Истина;
	КонецЕсли;
	ЭлементыФормы.НадписьР_ЭтотГСМНаНефтебазе.Видимость = ВидимостьПоляЭтотГСМНаНефтебазе;
	ЭлементыФормы.Р_ЭтотГСМНаНефтебазе.Видимость = ВидимостьПоляЭтотГСМНаНефтебазе;
	Если (НЕ ВидимостьПоляЭтотГСМНаНефтебазе) И ЗначениеЗаполнено(Р_ЭтотГСМНаНефтебазе) Тогда
		Р_ЭтотГСМНаНефтебазе = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	ВидимостьПоляПетрол = Ложь;
	Если ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ Тогда
		ВидимостьПоляПетрол = Истина;
	КонецЕсли;
	ЭлементыФормы.НадписьР_ИД_ГСМ_Петрол.Видимость = ВидимостьПоляПетрол;
	ЭлементыФормы.Р_ИД_ГСМ_Петрол.Видимость = ВидимостьПоляПетрол;
	
КонецПроцедуры

Процедура Р_ЭтотГСМНаНефтебазеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Р_ЭтотГСМНаНефтебазе) Тогда
		Если (НЕ Р_ВыгружатьНаПОС)
		 ИЛИ (Р_КодДляПОС = 0)
		 ИЛИ (Р_ЭтотГСМНаНефтебазе.ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.ГСМ)
		 ИЛИ (Р_ЭтотГСМНаНефтебазе.Р_ВыгружатьНаПОС)
		 ИЛИ (Р_ЭтотГСМНаНефтебазе.Р_КодДляПОС = 0) Тогда
			Сообщить("Поле ""Этот ГСМ на НБ"" заполняется для ГСМ, выгружаемого на АЗС (установлено ""Выгружать на POS"", ""Кода для POS"" > 0", СтатусСообщения.Внимание);
			Сообщить("В поле ""Этот ГСМ на НБ"" должна быть номенклатура с видом ""ГСМ"" без признака ""Выгружать на POS"", (""Кода для POS"" > 0)", СтатусСообщения.Внимание);
			Р_ЭтотГСМНаНефтебазе = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли
	КонецЕсли
	
КонецПроцедуры

Процедура Р_ЗаписатьПроектПоУмолчанию()
	
	ПроектПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "Р_ОсновнойПроект");
	Если ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда 
		НаборЗаписей = РегистрыСведений.УстановкаПроектовДляНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НоменклатураПроекта.Значение = Ссылка;
		НаборЗаписей.Отбор.НоменклатураПроекта.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() <> 0 Тогда 
			Возврат;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.НоменклатураПроекта = Ссылка;
		НоваяЗапись.Проект 				= ПроектПоУмолчанию;
		НоваяЗапись.Период 				= НачалоДня(ТекущаяДата());
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить("Не удалось заполнить проект по номенклатуре: " + Строка(Ссылка),СтатусСообщения.Важное);
		КонецПопытки;
	КонецЕсли
	
КонецПроцедуры

Процедура Р_ШтрихкодыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	ШтрихкодыПередНачаломДобавления(Элемент, Отказ, Копирование);
	
	Если (НЕ Отказ) И Р_ВыгружатьНаПОС Тогда
		ТаблПроекты = РегистрыСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(, Новый Структура("НоменклатураПроекта", Ссылка));
		Если (ТаблПроекты.Количество() = 0) ИЛИ (НЕ ЗначениеЗаполнено(ТаблПроекты[0].Проект)) Тогда
			Отказ = Истина;
			Сообщить("Номенклатура выгружается на POS. Перед добавлением штрихкода назначте проект", СтатусСообщения.Внимание);
		КонецЕсли
	КонецЕсли
	
КонецПроцедуры

Процедура Р_ПроектыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования ИЛИ (НЕ Р_ВыгружатьНаПОС) Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПроект = Новый Структура("НоменклатураПроекта", Ссылка);
	
	ТаблПроект = РегистрыСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(ТекущаяДата(), ОтборПроект);
	текПроект = ?(ТаблПроект.Количество() = 0, Справочники.Проекты.ПустаяСсылка(), ТаблПроект[0].Проект);
	
	Если Р_СтарыйПроект <> текПроект Тогда
		Если НЕ ЗначениеЗаполнено(текПроект) Тогда
			Сообщить("Для номенклатуры выгружаемой на POS должен быть установлен проект", СтатусСообщения.Внимание);
		ИначеЕсли ЗначениеЗаполнено(Р_СтарыйПроект) Тогда
			Сообщить("Для номенклатуры выгружаемой на POS изменение проекта нежелательно. На POSы с прежним проектом """ + Р_СтарыйПроект + """ обновления не поступят", СтатусСообщения.Информация);
		КонецЕсли; 
		Если ЗначениеЗаполнено(текПроект) И (НЕ Модифицированность) Тогда
			Записать();
		КонецЕсли;
		Р_СтарыйПроект = текПроект;
	КонецЕсли 
	
КонецПроцедуры

Процедура Р_ПроектыПослеУдаления(Элемент)
	
	Если НЕ Р_ВыгружатьНаПОС Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПроект = Новый Структура("НоменклатураПроекта", Ссылка);
	
	ТаблПроект = РегистрыСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(ТекущаяДата(), ОтборПроект);
	текПроект = ?(ТаблПроект.Количество() = 0, Справочники.Проекты.ПустаяСсылка(), ТаблПроект[0].Проект);
	
	Если Р_СтарыйПроект <> текПроект Тогда
		Если НЕ ЗначениеЗаполнено(текПроект) Тогда
			Сообщить("Для номенклатуры выгружаемой на POS должен быть установлен проект", СтатусСообщения.Внимание);
		ИначеЕсли ЗначениеЗаполнено(Р_СтарыйПроект) Тогда
			Сообщить("Для номенклатуры выгружаемой на POS изменение проекта нежелательно. На POSы с прежним проектом """ + Р_СтарыйПроект + """ обновления не поступят", СтатусСообщения.Информация);
		КонецЕсли; 
		Если ЗначениеЗаполнено(текПроект) И (НЕ Модифицированность) Тогда
			Записать();
		КонецЕсли;
		Р_СтарыйПроект = текПроект;
	КонецЕсли 
	
КонецПроцедуры

Процедура Р_ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() И Не РольДоступна("Р_ИзменениеНоменклатуры") Тогда
		Сообщить("Запрещено добавлять номенклатуру");
		Отказ = Истина;
		Возврат;
	ИначеЕсли Не ЭтоНовый() И Не РольДоступна("Р_ИзменениеНоменклатуры") Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		ЭлементыФормы.КоманднаяПанельЕдиницыИзмерения.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКатегории.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКомплектующие.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельНоменклатураКонтрагентов.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельПроекты.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельСвойстваИЗначения.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельСерии.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельСчетаУчета.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельХарактеристики.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельЦеныНоменклатуры.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельЦеныПоставщика.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельШтрихкоды.Доступность = Ложь;
	КонецЕсли;
	
	ПередОткрытием(Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура Р_ПриОткрытии()
	
	ПриОткрытии();
	
	ОтборПроект = Новый Структура("НоменклатураПроекта", Ссылка);
	ТаблПроект = РегистрыСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(ТекущаяДата(), ОтборПроект);
	Р_СтарыйПроект = ?(ТаблПроект.Количество() = 0, Справочники.Проекты.ПустаяСсылка(), ТаблПроект[0].Проект);
	
	Если ЭтоНовый() И (Р_КодДляПОС > 0) Тогда
		Р_КодДляПОС = ПолучитьКод();
	КонецЕсли;
	
	Р_СоздатьЗакладкуДанныхДляСвязиСЭККА();
	
	Р_ИзменитьТаблицуКомплектующие();

	Если РольДоступна("Р_КБР_ПОС") Тогда
		Р_СоздатьЗакладкуДанныхОбщепит();
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ПоУмолчанию;

КонецПроцедуры

Процедура Р_ПередЗаписью(Отказ)
	
	ПередЗаписью(Отказ);
	
	Если (ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Блюдо)
	   И (НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа))
	   И (РольДоступна("Р_КБР_ПОС")) Тогда
		Сообщить("Для номенклатуры с типом ""Блюдо"" должно быть заполнено поле ""Номенклатурная группа"" !", СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	  
КонецПроцедуры

Процедура Р_ПриЗаписи(Отказ)
	
	ПриЗаписи(Отказ);
	
	Р_ЗаписатьПроектПоУмолчанию();

	Если РольДоступна("Р_КБР_ПОС") И НЕ Отказ Тогда
		Р_ЗаписатьХЭХ(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура Р_ПослеЗаписи()
	
	ПослеЗаписи();
	
	Р_ТоварыНаПОС.Отбор.Номенклатура.Установить(Ссылка);
	ЭлементыФормы.Р_ТоварыНаПОС.НастройкаОтбора.Номенклатура.Доступность = Ложь;
	
КонецПроцедуры

Процедура Р_ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
     ОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	 Если  ИмяСобытия = "ИзменениеТехХарактеристик" Тогда
		 Р_СформироватьНадписиТехническихХарактеристик();
	 КонецЕсли;
КонецПроцедуры


/////////////////////////////// Процедуры и Функции ОБЩЕПИТ /////////////////////
Процедура Р_СоздатьЗакладкуДанныхОбщепит()
	
	Этаформа.ЭлементыФормы.ОсновнаяПанель.Страницы.Добавить("Р_Общепит","КБР (Общепит)");
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_Общепит;
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	НадписьППХО = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_ППХО",Истина,ЭлементыФормы.ОсновнаяПанель);
	НадписьППХО.Имя = "НадписьР_ППХО";
	НадписьППХО.Заголовок = "Потери ХО: ";
	НадписьППХО.Подсказка = "Процент потерь при холодной обработке";
	НадписьППХО.Верх = 4;
	НадписьППХО.Лево = 6;
	НадписьППХО.Высота = 19;
	НадписьППХО.Ширина = 200;
	НадписьППХО.Доступность = Истина;
	НадписьППХО.АвтоКонтекстноеМеню = Истина;
	НадписьППХО.АктивизироватьПоУмолчанию = Ложь;
	НадписьППХО.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	НадписьППХО.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	НадписьППХО.Видимость = Истина;
	НадписьППХО.ВыделятьОтрицательные = Ложь;
	НадписьППХО.ГиперСсылка = Ложь;
	НадписьППХО.ИзменяетДанные = Ложь;
	НадписьППХО.ПервыйВГруппе = Ложь;
	НадписьППХО.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	НадписьППХО.ПорядокОтображения = 4;
	НадписьППХО.ПрозрачныйФон = Ложь;
	НадписьППХО.ПропускатьПриВводе = Ложь;
	НадписьППХО.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	НадписьППХО.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	НадписьППХО.Шрифт      = Новый Шрифт(НадписьППХО.Шрифт, , 9, Истина, , Истина);;

	НадписьППХО.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	НадписьППХО.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭлементыФормы.НадписьР_ППХО,ГраницаЭлементаУправления.Верх);
	НадписьППХО.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	НадписьППХО.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭлементыФормы.НадписьР_ППХО,ГраницаЭлементаУправления.Лево);
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	НадписьППГО = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_ППГО",Истина,ЭлементыФормы.ОсновнаяПанель);
	НадписьППГО.Имя = "НадписьР_ППГО";
	НадписьППГО.Заголовок = "Потери ГО: ";
	НадписьППГО.Подсказка = "Процент потерь при горячей обработке";
	НадписьППГО.Верх = 25;
	НадписьППГО.Лево = 6;
	НадписьППГО.Высота = 19;
	НадписьППГО.Ширина = 200;
	НадписьППГО.Доступность = Истина;
	НадписьППГО.АвтоКонтекстноеМеню = Истина;
	НадписьППГО.АктивизироватьПоУмолчанию = Ложь;
	НадписьППГО.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	НадписьППГО.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	НадписьППГО.Видимость = Истина;
	НадписьППГО.ВыделятьОтрицательные = Ложь;
	НадписьППГО.ГиперСсылка = Ложь;
	НадписьППГО.ИзменяетДанные = Ложь;
	НадписьППГО.ПервыйВГруппе = Ложь;
	НадписьППГО.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	НадписьППГО.ПорядокОтображения = 6;
	НадписьППГО.ПрозрачныйФон = Ложь;
	НадписьППГО.ПропускатьПриВводе = Ложь;
	НадписьППГО.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	НадписьППГО.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	НадписьППГО.Шрифт      = Новый Шрифт(НадписьППГО.Шрифт, , 9, Истина, , Истина);;
	
	НадписьППГО.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	НадписьППГО.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭлементыФормы.НадписьР_ППГО,ГраницаЭлементаУправления.Верх);
	НадписьППГО.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	НадписьППГО.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭлементыФормы.НадписьР_ППГО,ГраницаЭлементаУправления.Лево);
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	НадписьКвоХЭХ = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_КвоХЭХ",Истина,ЭлементыФормы.ОсновнаяПанель);
	НадписьКвоХЭХ.Имя = "НадписьР_КвоХЭХ";
	НадписьКвоХЭХ.Заголовок = "Количество для ХЭХ: "; //Р_НадписьКвоХЭХ();
	НадписьКвоХЭХ.Верх = 4;
	НадписьКвоХЭХ.Лево = 212;
	НадписьКвоХЭХ.Высота = 19;
	НадписьКвоХЭХ.Ширина = 220;
	НадписьКвоХЭХ.Доступность = Истина;
	НадписьКвоХЭХ.АвтоКонтекстноеМеню = Истина;
	НадписьКвоХЭХ.АктивизироватьПоУмолчанию = Ложь;
	НадписьКвоХЭХ.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	НадписьКвоХЭХ.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	НадписьКвоХЭХ.Видимость = Истина;
	НадписьКвоХЭХ.ВыделятьОтрицательные = Ложь;
	НадписьКвоХЭХ.ГиперСсылка = Ложь;
	НадписьКвоХЭХ.ИзменяетДанные = Ложь;
	НадписьКвоХЭХ.ПервыйВГруппе = Ложь;
	НадписьКвоХЭХ.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	НадписьКвоХЭХ.ПорядокОтображения = 8;
	НадписьКвоХЭХ.ПрозрачныйФон = Ложь;
	НадписьКвоХЭХ.ПропускатьПриВводе = Ложь;
	НадписьКвоХЭХ.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	НадписьКвоХЭХ.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	НадписьКвоХЭХ.Шрифт = Новый Шрифт(НадписьКвоХЭХ.Шрифт, , 9, Истина,);
	
	НадписьКвоХЭХ.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	НадписьКвоХЭХ.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	    ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	НадписьКвоХЭХ.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	НадписьКвоХЭХ.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Право);
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	НадписьКалор = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_Калорийность",Истина,ЭлементыФормы.ОсновнаяПанель);
	НадписьКалор.Имя = "НадписьР_Калорийность";
	НадписьКалор.Заголовок = "Формула калорийности:  ";
	НадписьКалор.Верх = 25;
	НадписьКалор.Лево = 212;
	НадписьКалор.Высота = 19;
	НадписьКалор.Ширина = 220;
	НадписьКалор.Доступность = Истина;
	НадписьКалор.АвтоКонтекстноеМеню = Истина;
	НадписьКалор.АктивизироватьПоУмолчанию = Ложь;
	НадписьКалор.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	НадписьКалор.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	НадписьКалор.Видимость = Истина;
	НадписьКалор.ВыделятьОтрицательные = Ложь;
	НадписьКалор.ГиперСсылка = Ложь;
	НадписьКалор.ИзменяетДанные = Ложь;
	НадписьКалор.ПервыйВГруппе = Ложь;
	НадписьКалор.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	НадписьКалор.ПорядокОтображения = 9;
	НадписьКалор.ПрозрачныйФон = Ложь;
	НадписьКалор.ПропускатьПриВводе = Ложь;
	НадписьКалор.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	НадписьКалор.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	НадписьКалор.Шрифт = Новый Шрифт(НадписьКалор.Шрифт, , 9, Истина);

	НадписьКалор.УстановитьПривязку(ГраницаЭлементаУправления.Верх,		ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	НадписьКалор.УстановитьПривязку(ГраницаЭлементаУправления.Низ,		ЭлементыФормы.НадписьР_ППХО,ГраницаЭлементаУправления.Верх);
	НадписьКалор.УстановитьПривязку(ГраницаЭлементаУправления.Лево,		ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	НадписьКалор.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Право);
	
	ЭлементВремя = ЭлементыФормы.Добавить(Тип("Надпись"),"СсылкаР_ВремяПриготовления",Истина,ЭлементыФормы.ОсновнаяПанель);
	ЭлементВремя.Имя = "СсылкаР_ВремяПриготовления";
	ЭлементВремя.Заголовок = "Время приготовления: "+Р_ВремяПриготовления+" мин.";
	ЭлементВремя.Верх = 4;
	ЭлементВремя.Лево = 450;
	ЭлементВремя.Высота = 19;
	ЭлементВремя.Ширина = 180;
	ЭлементВремя.Доступность = Истина;
	ЭлементВремя.АвтоКонтекстноеМеню = Истина;
	ЭлементВремя.АктивизироватьПоУмолчанию = Ложь;
	ЭлементВремя.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ЭлементВремя.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ЭлементВремя.Видимость = Истина;
	ЭлементВремя.ВыделятьОтрицательные = Ложь;
	ЭлементВремя.ГиперСсылка    = Истина;
	ЭлементВремя.ИзменяетДанные = Ложь;
	ЭлементВремя.ПервыйВГруппе  = Ложь;
	ЭлементВремя.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	ЭлементВремя.ПрозрачныйФон      = Ложь;
	ЭлементВремя.ПропускатьПриВводе = Ложь;
	ЭлементВремя.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	ЭлементВремя.УстановитьДействие("Нажатие",Новый Действие("Р_СсылкаНаВремяНажатие"));
	
	ЭлементВремя.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	ЭлементВремя.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭлементыФормы.СсылкаР_ВремяПриготовления,ГраницаЭлементаУправления.Верх);
	ЭлементВремя.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭлементыФормы.НадписьР_КвоХЭХ, ГраницаЭлементаУправления.Право);
	ЭлементВремя.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭтаФорма.Панель,ГраницаЭлементаУправления.Право);
	ЭлементВремя.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	ЭлементВремя.Шрифт     = Новый Шрифт(НадписьКвоХЭХ.Шрифт, , 9, Истина, Истина, Истина);;
	
	Р_СоздатьТаблицуРецептур();
	Р_СформироватьНадписиТехническихХарактеристик();
КонецПроцедуры

Процедура Р_СоздатьТаблицуРецептур()
	
	//Рецептуры
	НадписьРецептура = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_Рецептуры",Истина,ЭлементыФормы.ОсновнаяПанель);
	НадписьРецептура.Имя = "НадписьР_Рецептуры";
	НадписьРецептура.Заголовок = "Рецептуры";
	НадписьРецептура.Верх = 53;
	НадписьРецептура.Лево = 6;
	НадписьРецептура.Высота = 19;
	НадписьРецептура.Ширина = 627;
	НадписьРецептура.Доступность = Истина;
	НадписьРецептура.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	НадписьРецептура.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	НадписьРецептура.Видимость      = Истина;
	НадписьРецептура.ГиперСсылка    = Ложь;
	НадписьРецептура.ИзменяетДанные = Ложь;
	НадписьРецептура.ПервыйВГруппе  = Ложь;
	НадписьРецептура.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	НадписьРецептура.ПорядокОтображения = 10;
	НадписьРецептура.ПрозрачныйФон      = Ложь;
	НадписьРецептура.ПропускатьПриВводе = Ложь;
	НадписьРецептура.РазмерКартинки     = РазмерКартинки.АвтоРазмер;
	НадписьРецептура.УстановитьПривязку(ГраницаЭлементаУправления.Верх,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	НадписьРецептура.УстановитьПривязку(ГраницаЭлементаУправления.Низ,   ЭтаФорма.Панель, ГраницаЭлементаУправления.Верх);
	НадписьРецептура.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	НадписьРецептура.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭтаФорма.Панель, ГраницаЭлементаУправления.Право);
	НадписьРецептура.Шрифт      = Новый Шрифт(НадписьРецептура.Шрифт, , , Истина, , );
	НадписьРецептура.ЦветТекста = Новый Цвет(159,101,0);
	НадписьРецептура.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание,1);
	НадписьРецептура.ЦветРамки = НадписьРецептура.ЦветТекста;
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ТаблицаРецептур = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "Р_Рецептуры", Истина, ЭлементыФормы.ОсновнаяПанель);
	ТаблицаРецептур.Имя = "Р_Рецептуры";
	ТаблицаРецептур.Данные = "Р_Рецептуры";
	ТаблицаРецептур.Подсказка = "Список рецептур для блюда";
	ТаблицаРецептур.Лево = 6;
	ТаблицаРецептур.Верх = 100;
	ТаблицаРецептур.Высота = 120;
	ТаблицаРецептур.Ширина = 627;
	ТаблицаРецептур.ПорядокОтображения = 12;
	ТаблицаРецептур.Шапка       = Истина;
	ТаблицаРецептур.ВысотаШапки = 1;
	ТаблицаРецептур.ТолькоПросмотр = Ложь;
	ТаблицаРецептур.Доступность    = Истина;
	ТаблицаРецептур.Видимость      = Истина;
	ТаблицаРецептур.ИзменяетДанные = Ложь;
	ТаблицаРецептур.ИзменятьСоставСтрок       = Истина;
	ТаблицаРецептур.ИзменятьНастройкуКолонок  = Истина;
	ТаблицаРецептур.ИзменятьПозициюКолонок    = Истина;
	ТаблицаРецептур.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель,	ГраницаЭлементаУправления.Верх);
	ТаблицаРецептур.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭтаФорма.Панель,	ГраницаЭлементаУправления.Низ);
	ТаблицаРецептур.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель,	ГраницаЭлементаУправления.Лево);
	ТаблицаРецептур.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭтаФорма.Панель, 	ГраницаЭлементаУправления.Право);
	ТаблицаРецептур.УстановитьДействие("ПередНачаломДобавления", Новый Действие("Р_РецептурыПередНачаломДобавления"));
	ТаблицаРецептур.УстановитьДействие("ПриНачалеРедактирования", Новый Действие("Р_РецептурыПриНачалеРедактирования"));
	
	ТаблицаРецептур.СоздатьКолонки();
	КолонкиТаблицы = ТаблицаРецептур.Колонки;
	КолонкиТаблицы.Проведен.Видимость = Ложь;
	
	//Добавить Колонки 
	КолонкаТЗ = КолонкиТаблицы.Добавить("Номенклатура");
	КолонкаТЗ.Данные = "Номенклатура";
	КолонкаТЗ.Видимость = Истина;
	
	Р_Рецептуры.Отбор.Номенклатура.Установить(Ссылка);
	ТаблицаРецептур.НастройкаОтбора.Номенклатура.Доступность = Ложь;
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	кпРецептуры = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), "кп_Рецептуры", Истина, ЭлементыФормы.ОсновнаяПанель);
	кпРецептуры.АвтоЗаполнение  = Истина;
	кпРецептуры.Вспомогательная = Ложь;
	кпРецептуры.Доступность     = Истина;
	кпРецептуры.Лево   = 6;
	кпРецептуры.Верх   = 74;
	кпРецептуры.Ширина = 627;
	кпРецептуры.Высота = 24;
	кпРецептуры.ИсточникДействий = ТаблицаРецептур;
	
КонецПроцедуры

Процедура Р_РецептурыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ЭтоНовый() Тогда
		Предупреждение("Перед вводом рецептуры, следует записать элемент!",5);
		Отказ = Истина;	Возврат;
	КонецЕсли;
	
	Если Не ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Блюдо Тогда
		 Сообщить("Не возможно создать рецептуру для номенклатуры, которая не является блюдом",СтатусСообщения.Внимание);
		 Отказ = Истина; Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура Р_РецептурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
КонецПроцедуры

Процедура Р_СформироватьНадписиТехническихХарактеристик()
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КэшХЭХ=Неопределено Тогда
		ЗначенияПараметров = КэшХЭХ;
	Иначе
		ЗначенияПараметров = РегистрыСведений.Р_ТехническиеХарактеристики.Получить(Новый Структура("Номенклатура",Ссылка));
		Если ЗначенияПараметров.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.НадписьР_ППХО.Заголовок = "Потери ХО: " + ЗначенияПараметров.ПроцентПотерьПриХолоднойОбработке+" %";
	ЭлементыФормы.НадписьР_ППГО.Заголовок = "Потери ГО: " + ЗначенияПараметров.ПроцентПотерьПриГорячейОбработке+" %";
	ЭлементыФормы.НадписьР_КвоХЭХ.Заголовок = "Количество для ХЭХ: " + ЗначенияПараметров.КоличествоНоменклатурыДляХЭХ;
	
	//Формирование Заголовка Калорийнности
	Р_НадписьКалорийность(ЗначенияПараметров);
КонецПроцедуры

Процедура Р_ДействияФормыХЭХ(Кнопка)
	
	Если ЭтоНовый() Тогда
		Предупреждение("Необходимо записать объект",4,"Корректировка ХЭХ");
		Возврат;
	КонецЕсли;
	
	ТекущаяНоменклатура = ЭтаФорма.Ссылка;								
	обОсновныеПоказателиОбщепит = Обработки.Р_ОсновныеПоказателиОбщепит.Создать();
	ЭтаФорма.КлючУникальности = "ЭлементНоменклатура";
	обОсновныеПоказателиОбщепит.ОткрытьПанель(ЭтаФорма, Кнопка, ТекущаяНоменклатура, Кнопка.Пометка);

КонецПроцедуры

Процедура Р_ЗаписатьХЭХ(Отказ)
	
	Если КэшХЭХ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Запись основных Тех характеристик
	ЗаписьРегистра = РегистрыСведений.Р_ТехническиеХарактеристики.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Номенклатура = Ссылка;
	ЗаполнитьЗначенияСвойств(ЗаписьРегистра,КэшХЭХ);
	ЗаписьРегистра.Записать();
	
	//Запись Химико энергетических 
	НаборЗаписей = РегистрыСведений.Р_ХимикоэнергетическиеХарактеристики.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Ссылка);
	
	Для Каждого ТекСтрока Из КэшХЭХ.ТаблицаХЭХ Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ХимикоэнергетическаяХарактеристика) Тогда
			Отказ = Истина;
			Предупреждение(НСтр("ru='Имеется строка с незаполненной химикоэнергетической характеристикой!"
                           "Запись химикоэнергетических характеристик для этого объекта отменена.';uk=""Є рядок з незаповненою хімікоенергетичною характеристикою!"
                            "Запис хімікоенергетичних характеристик для цього об'єкта скасований."""));
			Возврат;
		КонецЕсли;
		// С нулевым количеством ХЭХ не записываем в регистр
		Если (ТекСтрока.КоличествоХарактеристики > 0) И ТекСтрока.Изменено Тогда
			НоваяЗапись					= НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекСтрока);
			НоваяЗапись.Номенклатура	= Ссылка;
		КонецЕсли
	КонецЦикла;	
	
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

Процедура Р_ДействияФормыАналоги(Кнопка)
	
	Если Не ЭтаФорма.Ссылка.Пустая() Тогда
		ТекущаяНоменклатура = ЭтаФорма.Ссылка;								
		ФормаРС = РегистрыСведений.Р_Аналоги.ПолучитьФормуСписка();
		ФормаРС.Отбор.Заменяемое.Значение      = ТекущаяНоменклатура;
		ФормаРС.Отбор.Заменяемое.Использование = Истина;
		ФормаРС.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура Р_ДействияФормыСезонность(Кнопка)
	
	Если Не ЭтаФорма.Ссылка.Пустая() Тогда
		ТекущаяНоменклатура = ЭтаФорма.Ссылка;								
		ФормаРС = РегистрыСведений.Р_СезонныеПроценты.ПолучитьФормуСписка();
		ФормаРС.Отбор.Номенклатура.Значение      = ТекущаяНоменклатура;
		ФормаРС.Отбор.Номенклатура.Использование = Истина;
		ФормаРС.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура Р_СсылкаНаВремяНажатие(Элемент)
	ЗначениеВвода =  Р_ВремяПриготовления;
	Если ВвестиЧисло(ЗначениеВвода,"Указать время приготовления блюда",6,2) Тогда
		Р_ВремяПриготовления = ЗначениеВвода;
	КонецЕсли;
	ЭлементыФормы.СсылкаР_ВремяПриготовления.Заголовок = "Время приготовления:"+Р_ВремяПриготовления+" мин.";
КонецПроцедуры

Процедура Р_НадписьКалорийность(ЗначениеПараметров)
	Надпись = ЭлементыФормы.НадписьР_Калорийность;
	
	Длинная = Ложь;
	СРК = "Способ расчета калорийности:  ";
	Если ЗначениеЗаполнено(ЗначениеПараметров.СпособРасчетаКалорийности) Тогда
		Если ЗначениеПараметров.СпособРасчетаКалорийности = Перечисления.Р_СпособыРасчетаКалорийности.Суммированием Тогда
			СРК = СРК + ЗначениеПараметров.СпособРасчетаКалорийности;
		Иначе
			СРК = "Формула калорийности:  " + ЗначениеПараметров.ФормулаРасчетаКалорийности;
			Длинная = Истина;
		КонецЕсли
	Иначе
		СРК = СРК + "НЕ задан";
	КонецЕсли;
	Надпись.Заголовок = СРК;
	Если Длинная Тогда
		Надпись.Шрифт = Новый Шрифт(Надпись.Шрифт, , 8, Ложь, , Истина);
		Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭтаФорма.Панель,ГраницаЭлементаУправления.Право);
		Надпись.Ширина = ЭтаФорма.Ширина - Надпись.Лево - 20;
	Иначе
		Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭлементыФормы.НадписьР_ППХО,ГраницаЭлементаУправления.Лево);
		Надпись.Ширина = 300;
	КонецЕсли
КонецПроцедуры

ЭтаФорма.УстановитьДействие("ПередОткрытием", Новый Действие("Р_ПередОткрытием")); 
	
Если РольДоступна("Р_Обмен_ПОС") Тогда
	
	ЭтаФорма.УстановитьДействие("ПриОткрытии", Новый Действие("Р_ПриОткрытии"));

	ЭтаФорма.УстановитьДействие("ПередЗаписью", Новый Действие("Р_ПередЗаписью"));

	ЭтаФорма.УстановитьДействие("ПриЗаписи", Новый Действие("Р_ПриЗаписи"));

	ЭтаФорма.УстановитьДействие("ПослеЗаписи", Новый Действие("Р_ПослеЗаписи"));

	ЭлементыФормы.ВидНоменклатуры.УстановитьДействие("ПриИзменении", Новый Действие("Р_ВидНоменклатурыПриИзменении"));
	
	ЭлементыФормы.Весовой.УстановитьДействие("ПриИзменении", Новый Действие("Р_ВесовойТоварПриИзменении"));
	
	ЭлементыФормы.Штрихкоды.УстановитьДействие("ПередНачаломДобавления", Новый Действие("Р_ШтрихкодыПередНачаломДобавления"));
	
	ЭлементыФормы.Проекты.УстановитьДействие("ПриОкончанииРедактирования", Новый Действие("Р_ПроектыПриОкончанииРедактирования"));
	
	ЭлементыФормы.Проекты.УстановитьДействие("ПослеУдаления", Новый Действие("Р_ПроектыПослеУдаления"));
	
	Если РольДоступна("Р_АЗС_ПОС") Тогда
		ЭлементыФормы.СвойстваИЗначения.УстановитьДействие("ПередОкончаниемРедактирования", Новый Действие("Р_СвойстваИЗначенияПередОкончаниемРедактирования"));
		ЭлементыФормы.Категории.УстановитьДействие("ПриИзмененииФлажка", Новый Действие("Р_КатегорииПриИзмененииФлажка"));
	КонецЕсли;
	
	Если РольДоступна("Р_КБР_ПОС") Тогда
		
		ЭтаФорма.УстановитьДействие("ОбработкаОповещения",Новый Действие("Р_ОбработкаОповещения"));

		ЭлементыФормы.ДействияФормы.Кнопки.Добавить("Р_Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);
		кнХЭХ = ЭлементыФормы.ДействияФормы.Кнопки.Добавить("ХЭХ", ТипКнопкиКоманднойПанели.Действие, "ХЭХ", Новый Действие("Р_ДействияФормыХЭХ"));
		кнХЭХ.Подсказка = "Химико-энергетические характеристики";
		кнХЭХ.Пояснение = "Химико-энергетические характеристики";
		ЭлементыФормы.ДействияФормы.Кнопки.Добавить("Р_Разделитель2", ТипКнопкиКоманднойПанели.Разделитель);
		
		кнАналоги = ЭлементыФормы.ДействияФормы.Кнопки.Добавить("кн_Аналоги", ТипКнопкиКоманднойПанели.Действие, "Аналоги", Новый Действие("Р_ДействияФормыАналоги"));
		кнАналоги.Картинка = БиблиотекаКартинок.Заменить;
		кнАналоги.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
		кнАналоги.Подсказка = "Аналоги номенклатуры/Заменители";
		кнАналоги.Пояснение = "Аналоги номенклатуры/Заменители";
		
		кнСезонность = ЭлементыФормы.ДействияФормы.Кнопки.Добавить("кн_СезонныеКоэффициенты", ТипКнопкиКоманднойПанели.Действие, "Сезонные коэффициенты", Новый Действие("Р_ДействияФормыСезонность"));
		кнСезонность.Картинка    = БиблиотекаКартинок.Картинка;
		кнСезонность.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
		кнСезонность.Подсказка = "Сезонные коэффициенты";
		кнСезонность.Пояснение = "Сезонные коэффициенты";
		
	КонецЕсли;

КонецЕсли;

//КОНЕЦ ВСТАВКИ

мПустаяКартинка = Новый Картинка;
мЖирныйШрифт    = Новый Шрифт(, , Истина);

СтруктураКонстант = Новый Структура;
СтруктураКонстант.Вставить("ИспользоватьХарактеристикиНоменклатуры");
СтруктураКонстант.Вставить("ИспользоватьСерииНоменклатуры");
СтруктураКонстант.Вставить("ИспользоватьСерийныеНомера");
СтруктураКонстант.Вставить("ЕдиницаИзмеренияВеса");
СтруктураКонстант.Вставить("ЕдиницаИзмеренияОбъема");

СтруктураСкрываемыхСтраниц = Новый Структура();

мКонстанты = ПолучитьКонстанты(СтруктураКонстант);

мИспользоватьХарактеристики = мКонстанты.ИспользоватьХарактеристикиНоменклатуры;
мИспользоватьСерии          = мКонстанты.ИспользоватьСерииНоменклатуры;
мИспользоватьСерийныеНомера = мКонстанты.ИспользоватьСерийныеНомера;
мЕдиницаИзмеренияВеса       = мКонстанты.ЕдиницаИзмеренияВеса;
мЕдиницаИзмеренияОбъема     = мКонстанты.ЕдиницаИзмеренияОбъема;

// Заполним перечень страниц, которые можно открыть только после записи номенклатуры.
мСтраницыПослеЗаписи = Новый Соответствие;
мСтраницыПослеЗаписи.Вставить(ЭлементыФормы.ОсновнаяПанель.Страницы["НоменклатураПоставщика"], 0);
мСтраницыПослеЗаписи.Вставить(ЭлементыФормы.ОсновнаяПанель.Страницы["ЦеныНоменклатуры"]      , 0);

// Заполним перечень возможных реквизитов.
// Истина в значении соответствия означает,
// что реквизит является флагом. Такие реквизиты не могут быть обязательными,
// но можно настроить их доступность.
мСписокВозможныхРеквизитов = Новый Соответствие;
мСписокВозможныхРеквизитов.Вставить("Родитель"                              , Ложь);
мСписокВозможныхРеквизитов.Вставить("Наименование"                          , Ложь);
мСписокВозможныхРеквизитов.Вставить("Код"                                   , Ложь);
мСписокВозможныхРеквизитов.Вставить("Артикул"                               , Ложь);
мСписокВозможныхРеквизитов.Вставить("ВидНоменклатуры"                       , Ложь);
мСписокВозможныхРеквизитов.Вставить("НаименованиеПолное"                    , Ложь);
мСписокВозможныхРеквизитов.Вставить("СтавкаНДС"                             , Ложь);
мСписокВозможныхРеквизитов.Вставить("ОсновнойПоставщик"                     , Ложь);
мСписокВозможныхРеквизитов.Вставить("ЦеноваяГруппа"                         , Ложь);
мСписокВозможныхРеквизитов.Вставить("ОтветственныйМенеджерЗаПокупки"        , Ложь);
мСписокВозможныхРеквизитов.Вставить("НоменклатурнаяГруппа"                  , Ложь);
мСписокВозможныхРеквизитов.Вставить("ВесовойКоэффициентВхождения"           , Ложь);
мСписокВозможныхРеквизитов.Вставить("Комментарий"                           , Ложь);
мСписокВозможныхРеквизитов.Вставить("БазоваяЕдиницаИзмерения"               , Ложь);
мСписокВозможныхРеквизитов.Вставить("ЕдиницаХраненияОстатков"               , Ложь);
мСписокВозможныхРеквизитов.Вставить("ЕдиницаДляОтчетов"                     , Ложь);
мСписокВозможныхРеквизитов.Вставить("СтатьяЗатрат"                          , Ложь);
мСписокВозможныхРеквизитов.Вставить("НоменклатурнаяГруппаЗатрат"            , Ложь);
мСписокВозможныхРеквизитов.Вставить("ВестиУчетПоСериям"                     , Истина); // флаги
мСписокВозможныхРеквизитов.Вставить("ВестиУчетПоХарактеристикам"            , Истина); // флаги
мСписокВозможныхРеквизитов.Вставить("ВестиПартионныйУчетПоСериям"           , Истина); // флаги
мСписокВозможныхРеквизитов.Вставить("Весовой"                               , Истина); // флаги
мСписокВозможныхРеквизитов.Вставить("ВестиСерийныеНомера"                   , Истина); // флаги
мСписокВозможныхРеквизитов.Вставить("ЕдиницаИзмеренияМест"                  , Ложь);

мСписокВозможныхРеквизитов.Вставить("БланкСтрогогоУчета"                    , Истина); // флаги
мСписокВозможныхРеквизитов.Вставить("УчитываетсяПоНоминальнойСтоимости"     , Истина); // флаги
мСписокВозможныхРеквизитов.Вставить("ТранспортнаяУслуга"                    , Истина); // флаги
мСписокВозможныхРеквизитов.Вставить("ЛьготаНДС"                   			, Ложь); 
мСписокВозможныхРеквизитов.Вставить("КодЛьготы"                   			, Ложь); 
мСписокВозможныхРеквизитов.Вставить("ТекстДляПечатиВКолонкеКоличествоНалоговойНакладной", Ложь);

// Заполним перечень типов цен номенклатуры.
мСписокТиповЦенНоменклатуры = Новый Соответствие;

Запрос = Новый Запрос("
|ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	ТипыЦен.Ссылка КАК ТипЦен,
|	ТипыЦен.Наименование КАК ТипЦенПредставление
|ИЗ
|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦен
|");

Выборка = Запрос.Выполнить().Выбрать();
Пока Выборка.Следующий() Цикл
	мСписокТиповЦенНоменклатуры.Вставить(Выборка.ТипЦен, Выборка.ТипЦенПредставление);
КонецЦикла;

// Создадим дерево, показывающее, какие ЭУ к каким рамкам относятся.
мДеревоРамок = Новый ДеревоЗначений;
мДеревоРамок.Колонки.Добавить("ИмяЭУ");

// Аналитика затрат.
ДобавитьЭУВДерево("РамкаГруппыАналитикаЗатрат", Новый Структура("СтатьяЗатрат, НоменклатурнаяГруппаЗатрат"));

// Номенклатурная группа.
ДобавитьЭУВДерево("РамкаГруппыНоменклатурнаяГруппа", Новый Структура("НоменклатурнаяГруппа, ВесовойКоэффициентВхождения"));

// Серийные номера.
ДобавитьЭУВДерево("РамкаГруппыСерийныеНомера", Новый Структура("ВестиСерийныеНомера"));

// Заполним перечень реквизитов, которые система заполняет автоматически при записи элемента.
мРеквизитыСАвтозаполнением = Новый Соответствие;
мРеквизитыСАвтозаполнением.Вставить("ЕдиницаХраненияОстатков", 0);
мРеквизитыСАвтозаполнением.Вставить("ЕдиницаДляОтчетов"      , 1);

// Заполним перечень реквизитов, по которым можно устанавливать контроль уникальности.
мРеквизитыКонтрольУникальности = Новый Соответствие;
мРеквизитыКонтрольУникальности.Вставить("Наименование"      , 0);
мРеквизитыКонтрольУникальности.Вставить("НаименованиеПолное", 1);
мРеквизитыКонтрольУникальности.Вставить("Артикул"           , 2);

мТекущаяНастройка = Новый Структура;
мТекущаяНастройка.Вставить("ИмяОбъекта"             , "СправочникОбъект.Номенклатура");
мТекущаяНастройка.Вставить("Пользователь"           , глЗначениеПеременной("глТекущийПользователь"));
мТекущаяНастройка.Вставить("НаименованиеНастройки"  , "");
мТекущаяНастройка.Вставить("ИспользоватьПриОткрытии", Ложь);
мТекущаяНастройка.Вставить("СохранятьАвтоматически" , Ложь);
мТекущаяНастройка.Вставить("СохраненнаяНастройка"   , Неопределено);

мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");

ЦеныНоменклатуры.Индексы.Добавить("ТипЦен");
ЦеныПоставщика.Индексы.Добавить("ТипЦен");

Для Каждого ТекКолонка Из ЭлементыФормы.Штрихкоды.Колонки Цикл
	Если ЗначениеЗаполнено(ТекКолонка.Данные) Тогда
		Штрихкоды.Колонки.Добавить(ТекКолонка.Имя);
	КонецЕсли;
КонецЦикла;

