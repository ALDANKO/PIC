////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем ПечататьДокументы Экспорт;
Перем мОповещатьВладельцаОЗакрытии Экспорт;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента;

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

// Хранят текущее значение налоговой схемы организации
Перем мТекущаяСхемаНалогообложения;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, мКолонкиДокументы, мКолонкиТаблицаАвтоСкидок;

// Хранит информацию о сумме без скидки документа.
Перем мКоличествоПредыдущее;
Перем мЦенаПредыдущая;

Перем мРазрешитьНулевыеЦеныВОпте, мРазрешитьНулевыеЦеныВРознице;

// Автоотметка СкладОредра без учета заполненности ТЧ.
Перем мАвтоОтметкаСклада;

// Признак перерасчета сумм НДС с учетом погрешностей округления
Перем мПерерасчетПроизведен;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит соответствие 
Перем мКнопкиЗаполненияТЧ;

Перем мТерминалы;

Перем мФормаСоставНабора, мТекущаяСтрокаНабор;

// Предыдущие значения реквизитов
Перем мСтароеЗначениеСделки, мСтароеЗначениеСклада;

Перем мКартинкаСерийныеНомера, мКартинкаНаборКомплект;
Перем мКачество;

Перем мНоваяСтрока;


// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
//	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	//***170705
Ответ = Вопрос("Вы действительно хотите распечатать Документы?", 
		РежимДиалогаВопрос.ДаНет, 
			, , 
				"Печать документов.");
	Если Ответ = КодВозвратаДиалога.Нет Тогда  	
		возврат;
	КонецЕсли; 	//***170705

	ПечатьИзДокумента();	
	ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	ЭтаФорма.Закрыть();
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если РаботаСДиалогами.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента, "Реализация");
	Если ЕстьКолонкаЗаказ Тогда
		УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, Товары, "ЗаказПокупателя");
		УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, ВозвратнаяТара, "ЗаказПокупателя");
		//УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, Услуги, "ЗаказПокупателя");
	КонецЕсли;
	
	
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	УстановитьЗаголовкиПоДоговору();
	ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Истина);

	ПересчитатьАвтоматическиеСкидки();
	
	мПоДокументамРасчетов = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;

	Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
		Проект = ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ОтражатьВБухгалтерскомУчете Тогда

		Если ПоказыватьВДокументахСчетаУчета Тогда
			
			Ответ = Вопрос("Установить счета бухгалтерского и налогового учета в соответствии со значениями по умолчанию?", 
							РежимДиалогаВопрос.ДаНет, 
							, , 
							"Изменения счетов учета");
			
		Иначе
							
			Ответ = КодВозвратаДиалога.Да;
			
		КонецЕсли;

		Если Ответ = КодВозвратаДиалога.Да Тогда

			Если Товары.Количество() + ВозвратнаяТара.Количество() > 0 Тогда
				ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
				ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
				
			КонецЕсли;

			СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
			
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателяПриБартере;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателяПриБартере;
			Иначе
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			КонецЕсли;
			
			СчетУчетаРасчетовПоТаре          = СчетаУчета.СчетУчетаТарыПокупателя;
			СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТареПокупателя;
			СчетУчетаНДС 					 = СчетаУчета.СчетУчетаНДСПродаж;
			СчетУчетаНДСПодтвержденный  	 = СчетаУчета.СчетУчетаНДСПродажПодтвержденный;
			
		КонецЕсли;

	КонецЕсли;
 
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда


	КонецЕсли;	
	
	//установка автоотметки незаполненного для заказа в табличной части
	//РаботаСДиалогами.УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, ВидОперации, ДоговорКонтрагента, мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, мКолонкиДокументы, ЭлементыФормы.Сделка);
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

// Выполняет необходимые действия при изменении вида склада.
//
Процедура ПриИзмененииВидаСклада()

	// Определим текущий вид склада
	ВидСклада = Склад.ВидСклада;

	// Оформление колонок таблицы
	ФлагАвтоОтметкиНезаполненого = Истина;

	Если (ВидСклада = Перечисления.ВидыСкладов.Оптовый ИЛИ НЕ ЗначениеЗаполнено(ВидСклада)) И мРазрешитьНулевыеЦеныВОпте Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	ИначеЕсли ВидСклада = Перечисления.ВидыСкладов.Розничный И мРазрешитьНулевыеЦеныВРознице Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	КонецЕсли;

	мКолонкиТовары.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	мКолонкиТовары.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	//мКолонкиУслуги.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	//мКолонкиУслуги.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	//мКолонкиВозвратнаяТара.Сумма.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	//мКолонкиВозвратнаяТара.Цена.АвтоОтметкаНезаполненного  = ФлагАвтоОтметкиНезаполненого;

КонецПроцедуры // ПриИзмененииВидаСклада()

// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧасть(ТабличнаяЧасть)

	ПредставлениеЗаказПокупателя = Метаданные.Документы.ЗаказПокупателя.Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	ИначеЕсли НЕ ЗначениеЗаполнено(Сделка)
		  или (Не ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		          И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")) Тогда
		ТекстПредупреждения = "Не выбран заказ покупателя (счет на оплату).
							  |Заполнение невозможно.";
	
	ИначеЕсли Не Сделка.Проведен И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ТекстПредупреждения = ПредставлениеЗаказПокупателя + " не проведен.
							  |Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , );
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
		Если ТабличнаяЧасть = Товары Тогда
			СоставНабора.Очистить();
			СерийныеНомера.Очистить();
			СерийныеНомераСоставНабора.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Если ТабличнаяЧасть = Товары Тогда
			СкопироватьТовары();
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
			СкопироватьВозвратнуюТару();
		КонецЕсли;
	Иначе
		Если ТабличнаяЧасть = Товары 
		 Или ТабличнаяЧасть = ВозвратнаяТара Тогда

			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ТабличнаяЧасть, Сделка);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть, РазворачиватьДоКачества)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	ПустойТипЦен = НЕ ЗначениеЗаполнено(ТипЦен);

	Если ТабличнаяЧасть = Товары
	 ИЛИ ТабличнаяЧасть = ВозвратнаяТара Тогда
		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
			СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		КонецЕсли;

		СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");
		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
				СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
		КонецЕсли;

		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
			РазворачиватьДоКачества = ТабличнаяЧасть = Товары;
		КонецЕсли;
		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
			СписокЗапросов.Добавить("РасходЦеныУслуг", "По ценам и услугам предприятия");
		КонецЕсли;
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Функция получает качество для подстановки значения качества при построчном вводе в табличную часть "Товары"
// или при подборе номенклатуры с помощью обработки "Подбор номенклатуры" или обработки ввод серийных номеров
// Рассчитывает качество только для вида операции "Брак", для других случаев качество по умолчанию новое.
//
// Параметры:
// Качество                  - СправочникСсылка.Качество, необязательный параметр, если параметр заполнен он же возвращается,
//                             ситуация возможна при варианте подбора через обработку подбор номенклатуры или обработку ввода серийных номеров.
//
// Возвращаемое значение:
// СправочникСсылка.Качество - для вида операции "Брак" возвращается качество отличное от Нового и если количество таких элементов равное одному,
//                             в остальных случаях пустая ссылка справочника качество.
//                           - для остальных видов операций качество по умолчанию новое.
//
Функция ПолучитьКачествоНоменклатуры(Качество = Неопределено)
	Перем Результат;

	Если ЗначениеЗаполнено(Качество) Тогда
		возврат Качество;
	КонецЕсли;

	Если НЕ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		// Для отличного вида операции от Брак, качество новое.
		возврат Справочники.Качество.Новый;
	КонецЕсли;

	Если НЕ мКачество = Неопределено Тогда
		возврат мКачество;
	КонецЕсли;
	Результат = Справочники.Качество.ПустаяСсылка();

	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Качество.Ссылка КАК Качество
	|ИЗ
	|	Справочник.Качество КАК Качество
	|ГДЕ
	|	НЕ Качество.Ссылка = ЗНАЧЕНИЕ(Справочник.Качество.Новый)
	|";
	таблицаКачество = Запрос.Выполнить().Выгрузить();
	Если таблицаКачество.Количество() = 1 Тогда
		Результат = таблицаКачество[0]["Качество"];
	КонецЕсли;
	мКачество = Результат;
	Возврат Результат;
КонецФункции // ПолучитьКачествоНоменклатуры()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	РазворачиватьДоКачества = Ложь;
	ЕстьЦена            = мМожноМенятьЦенуВДокументе;
	ЕстьСерия           = Истина;
	Валюта              = ВалютаДокумента;
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	Качество            = ?(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия, Справочники.Качество.Новый, Неопределено);
	ПодбиратьУслуги         = Ложь;
	ЕстьСкладВТабличнойЧасти = мУказаниеСкладовВТЧ;

	Если ТабличнаяЧасть = Товары Тогда

		Команда           = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти = "Товары";

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Тара";

	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть, РазворачиватьДоКачества);
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"   , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Контрагент);
	СтруктураПараметровПодбора.Вставить("Сделка"               , Сделка);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
	СтруктураПараметровПодбора.Вставить("Качество"             , Качество);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества", РазворачиватьДоКачества);
	СтруктураПараметровПодбора.Вставить("ИспользоватьГруппуДоступности", Истина);
	
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");
	СтруктураПараметровПодбора.Вставить("УсловиеПродаж"        , УсловиеПродаж);
	СтруктураПараметровПодбора.Вставить("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти);
	СтруктураПараметровПодбора.Вставить("ВременныеТаблицы",ОбработкаТабличныхЧастей.СтруктураДляРасчетаРезерваПриПодбореНоменклатуры(ЭтаФорма, Истина, "Сделка"));
	
	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены, ЕстьСкладВТабличнойЧасти;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество, ВыборИзСправочника;
	
	ЗначениеВыбора.Свойство("ВыборИзСправочника", ВыборИзСправочника);
	ВыборИзСправочника = ВыборИзСправочника = Истина;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   (ТабличнаяЧасть <> Товары Или ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	УправлениеЗапасами.ПолучитьПараметрыДокументаИзСтруктуры(ЗначениеВыбора, ТипЦен,
	                                      СпособЗаполненияЦен, Номенклатура, Количество, КоличествоМест, Характеристика,
	                                      ВалютаЦены, Цена, ЕдиницаИзмерения);

	ЗначениеВыбора.Свойство("Серия"   , Серия);
	ЗначениеВыбора.Свойство("Качество", Качество);

	Если НЕ ЗначениеВыбора.Свойство("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти) Тогда
		ЕстьСкладВТабличнойЧасти = Ложь;
	КонецЕсли;

	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ВозвратнаяТара)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	Если ВыборИзСправочника Тогда
		
		СтрокаТабличнойЧасти = Неопределено;
		ЗначениеВыбора.Свойство("ТекущиеДанные",СтрокаТабличнойЧасти);
		
	Иначе
		
		СтруктураОтбора = Новый Структура();

		Если ТабличнаяЧасть = Товары Тогда
			Качество = ПолучитьКачествоНоменклатуры(Качество);
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
			СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
			Если ЗначениеЗаполнено(Качество) Тогда
				СтруктураОтбора.Вставить("Качество"         , Качество);
			КонецЕсли;
			Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
				СтруктураОтбора.Вставить("Цена", Цена);
			КонецЕсли;
		Иначе
			СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
		КонецЕсли;

		Если ЕстьСкладВТабличнойЧасти
		   И ЗначениеЗаполнено(Склад) Тогда
			СтруктураОтбора.Вставить("Склад", Склад);
		КонецЕсли;
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);

	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если Не ПересчитатьАвтоматическиеСкидки() Тогда // рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			СтрокаТабличнойЧасти.Склад = Склад;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;
			
			Если ВыборИзСправочника Тогда
				ОбработкаТабличныхЧастей.ОбновитьДанныеСтроки(СтрокаТабличнойЧасти,ЗначениеВыбора);
				ТоварыПриНачалеРедактирования(ЭлементыФормы.Товары, мНоваяСтрока);
				ТоварыНоменклатураПриИзменении(ЗначениеВыбора["ВладельцыФормы"]["Элемент"]);
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.Склад = Склад;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			Если ЗначениеЗаполнено(Качество) Тогда
				СтрокаТабличнойЧасти.Качество          = Качество;
			КонецЕсли;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

			Если Цена <> Неопределено Тогда
				Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                                                 СпособЗаполненияЦен,
				                                                 ТипЦен.ЦенаВключаетНДС,
				                                                 УчитыватьНДС,
				                                                 СуммаВключаетНДС,
				                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
			КонецЕсли;

			// Рассчитываем реквизиты табличной части.
			СтрокаТабличнойЧасти.Склад = Склад;
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Качество) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			Если Не ПересчитатьАвтоматическиеСкидки() Тогда // рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);

			// Ввод состава набора
			СтрокаТабличнойЧасти.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
			УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Цена;
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.Склад = Склад;

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);

		КонецЕсли;
	КонецЕсли;

	ТабличнаяЧастьИмя = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	Если НЕ ВыборИзСправочника Тогда
		ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
		ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];
	КонецЕсли;
	
	

	УчетСерийныхНомеров.ОбработкаПодбораНоменклатурыПоСерийномуНомеру(ЗначениеВыбора, СерийныеНомера,
	                                              ТабличнаяЧасть, СтрокаТабличнойЧасти,
	                                              мПараметрыСвязиСтрокТЧ,
	                                              ТабличнаяЧастьИмя,
	                                              ЭтотОбъект);

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение документа переданными из формы заполнения данными.
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ТаблицаИсточник - таблица значений - источник для заполняемой табличной части.
//
Процедура ОбработкаЗаполнения(ТабличнаяЧасть, ТаблицаИсточник) Экспорт

	// Сформировать таблицу по ценам и скидкам
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ДокументОбъект.ВидОперации, ДокументОбъект.ДоговорКонтрагента);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Если ЕстьКолонкаЗаказ Тогда
		ТаблицаЗаказов = ТаблицаИсточник.Скопировать();
		ТаблицаЗаказов.Свернуть("ЗаказПокупателя");
		СписокЗаказов = Новый СписокЗначений;
		Для Каждого Строка Из ТаблицаЗаказов Цикл
			Если ЗначениеЗаполнено(Строка.ЗаказПокупателя) Тогда
				СписокЗаказов.Добавить(Строка.ЗаказПокупателя.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если НЕ СписокЗаказов.Количество() > 0 Тогда
			СписокЗаказов.Добавить(Сделка);
		КонецЕсли;
		Запрос.УстановитьПараметр("СписокЗаказов",   СписокЗаказов);
	Иначе
		Запрос.УстановитьПараметр("ЗаказПокупателя", Сделка);
	КонецЕсли;
	Запрос.УстановитьПараметр("СтатусТары", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	ИмяРеквизитаКоличества = "Количество";

	Если ТабличнаяЧасть = Товары Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя                      КАК ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена                                 КАК Цена,
		|	ОстаткиЗаказ.СтавкаНДС                            КАК СтавкаНДС,
		|	ОстаткиЗаказ.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент         КАК Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок          КАК ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки          КАК УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента"
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПокупателя В (&СписокЗаказов)", "
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя") + "
		|	                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена,
		|	ОстаткиЗаказ.СтавкаНДС,
		|	ОстаткиЗаказ.ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки
		|";

		ИмяРеквизитаКоличества = "Количество";

		ТаблицаИсточник.Колонки.Добавить("СтавкаНДС");
		ТаблицаИсточник.Колонки.Добавить("Коэффициент");
		ТаблицаИсточник.Колонки.Добавить("ПроцентСкидкиНаценки");
		ТаблицаИсточник.Колонки.Добавить("ПроцентАвтоматическихСкидок");
		ТаблицаИсточник.Колонки.Добавить("УсловиеАвтоматическойСкидки");
		ТаблицаИсточник.Колонки.Добавить("ЗначениеУсловияАвтоматическойСкидки");

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.Цена                                 КАК Цена,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя                      КАК ЗаказПокупателя,", "") + "
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента" 
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПокупателя В (&СписокЗаказов)", "
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя") + "
		|	                                              И СтатусПартии = &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена
		|";

	КонецЕсли;

	ТаблицаЦенСкидок = Запрос.Выполнить().Выгрузить();
	СтрокаИндекса = "Номенклатура";
	Если ТабличнаяЧасть = Товары Тогда
		СтрокаИндекса = СтрокаИндекса + ",ХарактеристикаНоменклатуры";
	КонецЕсли;
	ТаблицаЦенСкидок.Индексы.Добавить(СтрокаИндекса);

	ТаблицаИсточник.Колонки.Добавить("Цена");

	НомерСтроки = 0;
	ТаблицаИсточникКоличество = ТаблицаИсточник.Количество();
	Пока НомерСтроки < ТаблицаИсточникКоличество Цикл

		СтрокаТаблицы = ТаблицаИсточник[НомерСтроки];

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура",                   СтрокаТаблицы.Номенклатура);
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		КонецЕсли;

		Если ЕстьКолонкаЗаказ И ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			СтруктураОтбора.Вставить("ЗаказПокупателя", СтрокаТаблицы.ЗаказПокупателя);
		ИначеЕсли ЕстьКолонкаЗаказ И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтруктураОтбора.Вставить("ЗаказПокупателя", Сделка);
		КонецЕсли;

		ОтобранныеСтрокиТаблицыЦенСкидок = ТаблицаЦенСкидок.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицыЦенСкидок Из ОтобранныеСтрокиТаблицыЦенСкидок Цикл

			Если СтрокаТаблицыЦенСкидок.Количество > 0 Тогда

				Если СтрокаТаблицыЦенСкидок.Количество >= СтрокаТаблицы[ИмяРеквизитаКоличества] Тогда

					СтрокаТаблицы.Цена = СтрокаТаблицыЦенСкидок.Цена;

					Если ТабличнаяЧасть = Товары Тогда
						СтрокаТаблицы.ПроцентСкидкиНаценки = СтрокаТаблицыЦенСкидок.ПроцентСкидкиНаценки;
						СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыЦенСкидок.ПроцентАвтоматическихСкидок;
						СтрокаТаблицы.УсловиеАвтоматическойСкидки = СтрокаТаблицыЦенСкидок.УсловиеАвтоматическойСкидки;
						СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = СтрокаТаблицыЦенСкидок.ЗначениеУсловияАвтоматическойСкидки;

						СтрокаТаблицы.СтавкаНДС            = СтрокаТаблицыЦенСкидок.СтавкаНДС;

						Если ТабличнаяЧасть = Товары Тогда

							СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
							СтрокаТаблицы.Коэффициент      = СтрокаТаблицыЦенСкидок.Коэффициент;

							СтрокаТаблицы.Количество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
							                             СтрокаТаблицы.Количество
							                             * СтрокаТаблицыЦенСкидок.КоэффициентЕдиницыХранения
							                             / СтрокаТаблицы.Коэффициент);




						КонецЕсли;
					КонецЕсли;

					СтрокаТаблицыЦенСкидок.Количество = СтрокаТаблицыЦенСкидок.Количество - СтрокаТаблицы[ИмяРеквизитаКоличества];

				Иначе

					// Разобьем на две строки
					КопияСтроки = ТаблицаИсточник.Добавить();
                    КопияСтроки[ИмяРеквизитаКоличества] = СтрокаТаблицы[ИмяРеквизитаКоличества];

					СтрокаТаблицы[ИмяРеквизитаКоличества] = СтрокаТаблицыЦенСкидок.Количество;
					СтрокаТаблицы.Цена                    = СтрокаТаблицыЦенСкидок.Цена;

					Если ТабличнаяЧасть = Товары		 Тогда
						СтрокаТаблицы.ПроцентСкидкиНаценки = СтрокаТаблицыЦенСкидок.ПроцентСкидкиНаценки;
						СтрокаТаблицы.СтавкаНДС            = СтрокаТаблицыЦенСкидок.СтавкаНДС;
						Если ТабличнаяЧасть = Товары Тогда
							СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыЦенСкидок.ПроцентАвтоматическихСкидок;
							СтрокаТаблицы.ЕдиницаИзмерения            = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
							СтрокаТаблицы.Коэффициент                 = СтрокаТаблицыЦенСкидок.Коэффициент;

							СтрокаТаблицы.Количество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
							                             СтрокаТаблицы.Количество
							                             * СтрокаТаблицыЦенСкидок.КоэффициентЕдиницыХранения
							                             / СтрокаТаблицы.Коэффициент);

						КонецЕсли;
					КонецЕсли;
                    ЗаполнитьЗначенияСвойств(КопияСтроки, СтрокаТаблицы,,ИмяРеквизитаКоличества);

					КопияСтроки[ИмяРеквизитаКоличества] = КопияСтроки[ИмяРеквизитаКоличества] - СтрокаТаблицы[ИмяРеквизитаКоличества];

				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;

	// Загрузить в документ обработанную таблицу
	Если НЕ ЕстьКолонкаЗаказ Тогда
		ОрганизацияЗаказа                   = Сделка.Организация;
		ДатаЗаказа                          = Сделка.Дата;
	КонецЕсли;
	
	КопияТабличнойЧасти = ТабличнаяЧасть.Выгрузить();
    ТабличнаяЧасть.Загрузить(ТаблицаИсточник);


	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ЕстьКолонкаЗаказ И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;
		КонецЕсли;

		Если ТабличнаяЧасть = Товары Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент) Тогда
				СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			КонецЕсли;
            Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
				СтрокаТабличнойЧасти.Склад = Склад;
			КонецЕсли;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
			
			// Заполнение цены зависит от розничности операции.
			//Заказ для получения курса и кратности извлекается либо из таб. части либо из шапки
			Если ЕстьКолонкаЗаказ Тогда
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
					текЗаказ = СтрокаТабличнойЧасти.ЗаказПокупателя;
				Иначе
					текЗаказ = Сделка;
				КонецЕсли;
			Иначе
				текЗаказ = Сделка;
			КонецЕсли;
			Если ЗначениеЗаполнено(текЗаказ) Тогда
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
												МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
												текЗаказ.ВалютаДокумента, ВалютаДокумента,
												ЗаполнениеДокументов.КурсДокумента(текЗаказ, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
												ЗаполнениеДокументов.КратностьДокумента(текЗаказ, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
												Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
												текЗаказ.СуммаВключаетНДС,
												УчитыватьНДС,
												СуммаВключаетНДС,
												УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
            КонецЕсли;
			ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
            Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
				СтрокаТабличнойЧасти.Склад = Склад;
			КонецЕсли;

			// Выполнить общие действия для всех документов при изменении возвратной тары.
			ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);

		КонецЕсли;

	КонецЦикла;
	
	Если КопияТабличнойЧасти.Количество()>0 Тогда
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТабличнойЧасти, ТабличнаяЧасть);
	КонецЕсли;
	
	Если ТабличнаяЧасть = Товары Тогда
		СтрокаХарактеристика       = ", ХарактеристикаНоменклатуры";
	Иначе
		СтрокаХарактеристика       = "";
	КонецЕсли;
	
	Если ЕстьКолонкаЗаказ Тогда
		СтрокаЗаказ = ", ЗаказПокупателя";
	Иначе
		СтрокаЗаказ = "";
	КонецЕсли;
	
	Если ТабличнаяЧасть  = Товары Тогда
		СтрокаСпособСписания = ", СпособСписанияОстаткаТоваров";
	Иначе
		СтрокаСпособСписания = "";
	КонецЕсли;
	
	Если ТабличнаяЧасть  = Товары И мУказаниеСкладовВТЧ Тогда
		СтрокаСклад = ", Склад";
	Иначе
		СтрокаСклад = "";
	КонецЕсли;
	
	Если ТабличнаяЧасть = Товары И мЕстьКолонкаСерии Тогда
		СтрокаСерия = ", СерияНоменклатуры";
	Иначе
		СтрокаСерия = "";
	КонецЕсли;
	
	КолонкиГруппировок = "";
	КолонкиСуммирования = "";
	Для каждого Колонка из КопияТабличнойЧасти.Колонки цикл
		ИмяКолонки = Колонка.Имя;
		Если ИмяКолонки = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяКолонки = "Количество" или ИмяКолонки = "Сумма" или ИмяКолонки = "КоличествоМест" или ИмяКолонки = "СуммаНДС" Тогда
			КолонкиСуммирования = КолонкиСуммирования + ?(КолонкиСуммирования="","",",") + ИмяКолонки ;
			Продолжить;
		КонецЕсли;
		КолонкиГруппировок = КолонкиГруппировок + ?(КолонкиГруппировок="","",",") + ИмяКолонки ;
	КонецЦикла;

	ТабличнаяЧасть.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	ТабличнаяЧасть.Сортировать("Номенклатура" + СтрокаХарактеристика + СтрокаЗаказ + СтрокаСклад + СтрокаСерия + СтрокаСпособСписания + ", Цена");

КонецПроцедуры // ОбработкаЗаполнения()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
	ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнение цены зависит от розничности операции.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	
	// Состав набора зависит от его характеристики.
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
// Для оптового склада или услуг в рознице цена редактируется,
// Для товаров на розничном складе выбирается из списка наличия в регистре.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭлементУправления = мКолонкиТовары.Цена.ЭлементУправления;
	
	ЭлементУправления.КнопкаСпискаВыбора = Ложь;

КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	// Колонка СуммаНДС не доступна для редактировани, если включен АвторасчетНДС
	//ЭлементыФормы.Товары.Колонки.СуммаНДС.ТолькоПросмотр = АвторасчетНДС;
	//ЭлементыФормы.Услуги.Колонки.СуммаНДС.ТолькоПросмотр = АвторасчетНДС;
	
	// Колонки налога показываем только тогда, когда его учитываем.
	//Если УчитыватьНДС <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
	//	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС);
	//КонецЕсли;
	//Если УчитыватьНДС <> мКолонкиТовары.СуммаНДС.Видимость Тогда
	//	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС);
	//КонецЕсли;
	//Если УчитыватьНДС <> мКолонкиУслуги.СтавкаНДС.Видимость Тогда
	//	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СтавкаНДС, УчитыватьНДС);
	//КонецЕсли;
	//Если УчитыватьНДС <> мКолонкиУслуги.СуммаНДС.Видимость Тогда
	//	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СуммаНДС, УчитыватьНДС);
	//КонецЕсли;

	ВидимостьСпособаСписания = Ложь;
	//Если НЕ (ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак) Тогда

	//	//видимость колонки ЗаказПокупателя определили ранее с помощью процедуры УстановитьВидимостьКолонкиЗаказ 
	//	ВидимостьКолонкиЗаказ = мКолонкиТовары.ЗаказПокупателя.Видимость;
	//	Если ВидимостьКолонкиЗаказ Тогда
	//		ВидимостьСпособаСписания = Истина;
	//	Иначе
	//		Если ЗначениеЗаполнено(Сделка) Тогда
	//			ВидимостьСпособаСписания = (Сделка.Метаданные().Имя = "ЗаказПокупателя");
	//		КонецЕсли;
	//	КонецЕсли;	
	//КонецЕсли;

	//Если ВидимостьСпособаСписания <> мКолонкиТовары.СпособСписанияОстаткаТоваров.Видимость Тогда
	//	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СпособСписанияОстаткаТоваров, ВидимостьСпособаСписания);
	//	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.СпособСписанияОстаткаТоваров, ВидимостьСпособаСписания);
	//КонецЕсли;

	// Видимость страници "Услуги"
	//ЭтоКомиссия = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	//ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = НЕ ЭтоКомиссия;

	//УстановитьДоступностьКнопкиЗаполнитьИПровести();

	//ЭлементыФормы.Подразделение.Видимость        = ОтражатьВУправленческомУчете;
	//ЭлементыФормы.НадписьПодразделение.Видимость = ОтражатьВУправленческомУчете;

	// Качество указывается только для брака
	//ВидимостьКолонкиКачества = (ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Качество, ВидимостьКолонкиКачества);

	//РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");
	//
	//Внешнеэкономический = ДоговорКонтрагента.Внешнеэкономический;	
	//ЭтоОборудование 	= (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование);
	//ЕстьНалогНаПрибыльДо2015 = мТекущаяСхемаНалогообложения.НалогНаПрибыль И (Дата < глЗначениеПеременной("ДатаНКУ2015"));
	//
	// Установка видимости колонок если отражаем в рег. учете.
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СчетУчетаБУ,              	ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета);
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПереданныеСчетУчетаБУ,    	ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета И ЭтоКомиссия);
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СхемаРеализации,    		 	ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета И НЕ ЭтоКомиссия);
	//
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.НалоговоеНазначение, 			  ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета И мТекущаяСхемаНалогообложения.НДС);
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.НалоговоеНазначениеДоходовИЗатрат, ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета  И ЕстьНалогНаПрибыльДо2015 И НЕ ЭтоКомиссия);
	//
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.СчетУчетаБУ, 				ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета);
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.СхемаРеализации,		 		ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета);
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.НалоговоеНазначение, 		ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета И мТекущаяСхемаНалогообложения.НДС);
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.НалоговоеНазначениеДоходовИЗатрат, 		ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета И ЕстьНалогНаПрибыльДо2015);

	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СхемаРеализации,    	ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета);
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.НалоговоеНазначениеДоходовИЗатрат, 	ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета И ЕстьНалогНаПрибыльДо2015);
	//
	//ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета;
	//
	// Счета учета взаиморасчетов
	//ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Видимость          = ОтражатьВБухгалтерскомУчете И НЕ ЭтоКомиссия;
	//ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентом.Видимость   = ОтражатьВБухгалтерскомУчете И НЕ ЭтоКомиссия;
	//ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость              = ОтражатьВБухгалтерскомУчете И НЕ ЭтоКомиссия;
	//ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансам.Видимость       = ОтражатьВБухгалтерскомУчете И НЕ ЭтоКомиссия;
	//
	//СложныйНалоговыйУчет = ДоговорКонтрагента.СложныйНалоговыйУчет;                                     

	// управление видимостью тары
	//ЭлементыУправленияПоТаре = Новый Массив();
	//ЭлементыУправленияПоТаре.Добавить(ЭлементыФормы.СчетУчетаРасчетовПоТаре);
	//ЭлементыУправленияПоТаре.Добавить(ЭлементыФормы.НадписьСчетУчетаРасчетовПоТаре);
	//ЭлементыУправленияПоТаре.Добавить(ЭлементыФормы.СчетУчетаРасчетовПоТареПоАвансам);
	//ЭлементыУправленияПоТаре.Добавить(ЭлементыФормы.НадписьСчетУчетаРасчетовПоТареПоАвансам);
	//ТараНеУчитывается = Внешнеэкономический;
	//РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма, ЭлементыУправленияПоТаре, ТараНеУчитывается);
	//
	//ВестиПоДокументамРасчетовСКонтрагентом     = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом; 
	//ВестиПоДокументамРасчетовСКонтрагентомРегл = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентомРегл; 
	//Если ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
	//	ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость =    (ОтражатьВУправленческомУчете И ВестиПоДокументамРасчетовСКонтрагентом)
	//																					ИЛИ (ОтражатьВБухгалтерскомУчете  И ВестиПоДокументамРасчетовСКонтрагентомРегл);
	//Иначе
	//	ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость = ложь;
	//КонецЕсли;
	
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.СуммаВзаиморасчетов, 	ОтражатьВУправленческомУчете И мТекущаяВалютаВзаиморасчетов <> ВалютаДокумента);
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.ВозвратнаяТара, 		ОтражатьВБухгалтерскомУчете И ВестиПоДокументамРасчетовСКонтрагентомРегл И НЕ ТараНеУчитывается);
	//ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.СтавкаНДС, 			ОтражатьВБухгалтерскомУчете И ВестиПоДокументамРасчетовСКонтрагентомРегл И мТекущаяСхемаНалогообложения.НДС И НЕ СложныйНалоговыйУчет И УчитыватьНДС);
	
	//УправлениеВзаиморасчетами.УстановитьНадписьОВеденииВзаиморасчетовПоДокументамРасчетов(ЭлементыФормы, 
	//															ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, Ложь, 
	//															ВестиПоДокументамРасчетовСКонтрагентом, ВестиПоДокументамРасчетовСКонтрагентомРегл,
	//															СложныйНалоговыйУчет);	

	//ЭлементыФормы.ЕстьАвансДо01042011.Видимость 	   		   = ЕстьНалогНаПрибыльДо2015 И НЕ ЭтоКомиссия;
	//ЭлементыФормы.НадписьСуммаВДВРПоАвансуДо01042011.Видимость = ЕстьНалогНаПрибыльДо2015 И ЕстьАвансДо01042011 И НЕ НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ И НЕ ЭтоКомиссия;
	//ЭлементыФормы.СуммаВДВРПоАвансуДо01042011.Видимость 	   = ЕстьНалогНаПрибыльДо2015 И ЕстьАвансДо01042011 И НЕ НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ И НЕ ЭтоКомиссия;
	//ЭлементыФормы.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ.Видимость = ЕстьНалогНаПрибыльДо2015 И ЕстьАвансДо01042011 И НЕ ЭтоКомиссия;
	//
	//ЭлементыФормы.ДоверенностьСерия.Видимость = НЕ ПолучилПоДругомуДокументу;
	//ЭлементыФормы.ДоверенностьДата.Видимость = НЕ ПолучилПоДругомуДокументу;
	//ЭлементыФормы.ДоверенностьНомер.Видимость = НЕ ПолучилПоДругомуДокументу;
	//ЭлементыФормы.НадписьДоверенностьСерия.Видимость = НЕ ПолучилПоДругомуДокументу;
	//ЭлементыФормы.НадписьДоверенностьДата.Видимость = НЕ ПолучилПоДругомуДокументу;
	//ЭлементыФормы.НадписьДоверенностьНомер.Видимость = НЕ ПолучилПоДругомуДокументу;
	//ЭлементыФормы.ДокументПодтверждающийПолномочия.Видимость = ПолучилПоДругомуДокументу;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает видимость реквизитов, управления контролем взаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьКонтроляВзаиморасчетов()

	ФлагВидимости = УправлениеВзаиморасчетами.ЕстьРазрешениеПроводитьБезКонтроляВзаиморасчетов();

	ЭлементыФормы.РамкаКонтрольВзаиморасчетов.Видимость     = ФлагВидимости;
	ЭлементыФормы.ОтключитьКонтрольВзаиморасчетов.Видимость = ФлагВидимости;

КонецПроцедуры // УстановитьВидимостьКонтроляВзаиморасчетов()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
	(НачалоДня(Дата) = НачалоДня(ТекущаяДата()));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает автоотметку незаполненного для Склада
Процедура УстановитьАвтоотметкуСклада()

	//Автоотметка = мАвтоОтметкаСклада 
	//              И (Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0);

	//ЭлементыФормы.Склад.АвтоотметкаНезаполненного = Автоотметка;
	//
	//Если ЭлементыФормы.Склад.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(Склад) Тогда
	//	ЭлементыФормы.Склад.ОтметкаНезаполненного     = Автоотметка;
	//КонецЕсли;

КонецПроцедуры // УстановитьАвтоотметкуСклада()

// Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	//РаботаСДиалогами.УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма);
	//РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// Покажем цветом, что суммы еще могут изменится - пересчитаться при проведении/записи
	
	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары"));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
						+ " " +  ДокументОбъект.ВалютаДокумента
		                + " = " + ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.УсловиеПродаж) Тогда
		ВременнаяСтрока = ВременнаяСтрока + ", Условие продаж: " + ДокументОбъект.УсловиеПродаж;
	КонецЕсли;

	Если АвторасчетНДС Тогда
		ВременнаяСтрока = ВременнаяСтрока + " Автоматический расчет НДС.";
	КонецЕсли;

	//ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//***
    Если не ЭтоНовый()     тогда
        Попытка 
            ЭтотОбъект.Заблокировать();
        Исключение
            Предупреждение(ОписаниеОшибки(), 300);
            Отказ = истина;
            возврат;
        КонецПопытки;    
    КонецЕсли;    //***
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если ЭтоНовый()
	   И ЗначениеЗаполнено(ПараметрОснование)
	   И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
	   И НЕ ПараметрОснование.Проведен Тогда
	   
		ТекстВопроса = "Заказ покупателя не проведен, документ не будет заполнен, продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	//мКолонкиТовары.ПроцентАвтоматическихСкидок.Видимость = МожноРассчитыватьАвтоматическиеСкидки();
	//мКолонкиУслуги.ПроцентАвтоматическихСкидок.Видимость = МожноРассчитыватьАвтоматическиеСкидки();
	//ЭлементыФормы.ОсновнаяПанель.Страницы.АвтоматическиеСкидки.Видимость = МожноРассчитыватьАвтоматическиеСкидки();

	// Установка кнопок печати
	//УстановитьКнопкиПечати();
	

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);
	Если ЭтоНовый() Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа", ПараметрОбъектКопирования, ПараметрОснование);	
		ОбщегоНазначения.ЗаполнитьОбязательныеРеквизитыШапкиНовогоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		ЭтотОбъект.ВидОперации=Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;//***
		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			
			СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
			
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателяПриБартере;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателяПриБартере;
			Иначе
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			КонецЕсли;
			
			СчетУчетаРасчетовПоТаре          = СчетаУчета.СчетУчетаТарыПокупателя;
			СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТареПокупателя;
		
			СчетУчетаНДС 				= СчетаУчета.СчетУчетаНДСПродаж;
			СчетУчетаНДСПодтвержденный  = СчетаУчета.СчетУчетаНДСПродажПодтвержденный;
			
		КонецЕсли;
		
	Иначе
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	
	КонецЕсли;
	
	//МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	//РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

	//СтруктураКолонок = Новый Структура();

	//// Установить колонки, видимостью которых пользователь управлять не может.
	//СтруктураКолонок.Вставить("Номенклатура");
	//СтруктураКолонок.Вставить("Количество");
	//СтруктураКолонок.Вставить("Цена");
	//СтруктураКолонок.Вставить("Сумма");
	//СтруктураКолонок.Вставить("СпособСписанияОстаткаТоваров");
	//СтруктураКолонок.Вставить("СчетУчетаБУ");
	//СтруктураКолонок.Вставить("СхемаРеализации");
	//СтруктураКолонок.Вставить("НалоговоеНазначение");
	//СтруктураКолонок.Вставить("НалоговоеНазначениеДоходовИЗатрат");

	//// Установить ограничение - изменять видимоть колонок для таличной части 
	//// "Возвратная тара".
	//ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВозвратнаяТара, СтруктураКолонок);

	//// Установить колонки, видимостью которых пользователь управлять не может.
	//СтруктураКолонок.Вставить("СтавкаНДС");
	//СтруктураКолонок.Вставить("СуммаНДС");
	//СтруктураКолонок.Вставить("ЕдиницаИзмерения");
	//СтруктураКолонок.Вставить("Качество");
	//СтруктураКолонок.Вставить("СчетУчетаБУ");
	//СтруктураКолонок.Вставить("ПереданныеСчетУчетаБУ");
	//СтруктураКолонок.Вставить("СхемаРеализации");
	//СтруктураКолонок.Вставить("НалоговоеНазначение");
	//СтруктураКолонок.Вставить("НалоговоеНазначениеДоходовИЗатрат");
	//
	//ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	//// Установить колонки, видимостью которых пользователь управлять не может.
	//СтруктураКолонок = Новый Структура();
	//СтруктураКолонок.Вставить("Номенклатура");
	//СтруктураКолонок.Вставить("Количество");
	//СтруктураКолонок.Вставить("Сумма");
	//СтруктураКолонок.Вставить("СхемаРеализации");
	//СтруктураКолонок.Вставить("НалоговоеНазначение");
	//СтруктураКолонок.Вставить("НалоговоеНазначениеДоходовИЗатрат");

	//ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиУслуги, СтруктураКолонок);
	//
	//// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	//// формы, значениями перечисления "Вид операции" данного вида документа.
	//// В качестве обработки выбора вида операции назначается процедура 
	//// ДействияФормыДействиеУстановитьОперацию модуля формы.
	//РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	//                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	//                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	//РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	//УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
    мТекущаяСхемаНалогообложения = ОбщегоНазначения.ПолучитьСхемуНалогообложения(Дата,Организация);

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	//РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	//РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТаблицаАвтоСкидок);

	// Управление видимостью счетов
	//ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	//ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	//РаботаСДиалогами.УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, мКолонкиВозвратнаяТара, ЭлементыФормы.Склад, "Склад", мУказаниеСкладовВТЧ);

	//Запомним автоотметку поля шапки Склад
	//мАвтоОтметкаСклада = ЭлементыФормы.Склад.АвтоОтметкаНезаполненного;
	//
	//РаботаСДиалогами.УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, ВидОперации, ДоговорКонтрагента, мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, мКолонкиДокументы, ЭлементыФормы.Сделка);
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	//УстановитьВидимостьКонтроляВзаиморасчетов();
 	
	УстановитьАвтоотметкуСклада();

	//ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = (ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	ПриИзмененииВидаСклада();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();

	мКолонкиТовары.Цена.ЭлементУправления.ТолькоПросмотр                 = истина;// НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.Сумма.ЭлементУправления.ТолькоПросмотр                = истина;//НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = истина;//НЕ мМожноМенятьЦенуВДокументе;
	//мКолонкиТовары.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = истина;//НЕ мМожноМенятьЦенуВДокументе;

	//мКолонкиВозвратнаяТара.Цена.ЭлементУправления.ТолькоПросмотр         = истина;//НЕ мМожноМенятьЦенуВДокументе;
	//мКолонкиВозвратнаяТара.Сумма.ЭлементУправления.ТолькоПросмотр        = истина;//НЕ мМожноМенятьЦенуВДокументе;

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары",                         "Товары");
	//Страницы.Добавить("Тара",                           "ВозвратнаяТара");
	//Страницы.Добавить("ДокументыРасчетовСКонтрагентом", "ДокументыРасчетовСКонтрагентом");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,"Товары");
	ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = Истина;
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Сохраним текущее значение сделки
	мСтароеЗначениеСделки = Сделка;
	мСтароеЗначениеСклада = Склад;


//***
Если Контрагент.ЗапретПродажи=Истина Или  ЭтотОбъект.Проведен Или  ЭтотОбъект.Распечатано тогда
	ЭтаФорма.ТолькоПросмотр =Истина;
	ЭлементыФормы.Весы.Видимость=Ложь;
	ЭлементыФормы.ВесыМинус.Видимость=Ложь;	
	ЭлементыФормы.ВесыПлюс.Видимость=Ложь;
	ЭлементыФормы.КнопкаДобавить.Видимость=Ложь;
	ЭлементыФормы.КнопкаУдалить.Видимость=Ложь;
	ЭлементыФормы.Ящ1.Видимость=Ложь;
	ЭлементыФормы.Ящ2.Видимость=Ложь;
	ЭлементыФормы.ФлажокМинусТары.Видимость=Ложь;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Доступность=Ложь;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Доступность=Ложь;
КонецЕсли;	//***

//ЭлементыФормы.ФлажокПечать.Значение=(не ЭтотОбъект.Проведен И не ЭтотОбъект.ПометкаУдаления
//И не ЭтотОбъект.Распечатано И РольДоступна("Экспедиция"));

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	//Если КурсВзаиморасчетов = 0 Тогда
	//	ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	//Иначе
	//	ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
	//												ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
	//												ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
	//												ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	//КонецЕсли;

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	ЗаголовокТовары = "Товары (";
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Товары.Заголовок = ЗаголовокТовары + ДокументОбъект.Товары.Количество() + " поз.)";
	ЗаголовокТовары = "Ящ (";
	СтраницаПанели.Тара.Заголовок = ЗаголовокТовары + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";

	
	ЭлементыФормы.Весы.Доступность=ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница=ЭлементыФормы.ОсновнаяПанель.Страницы.Товары;
	ЭлементыФормы.ВесыПлюс.Доступность=ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница=ЭлементыФормы.ОсновнаяПанель.Страницы.Товары;
	ЭлементыФормы.ВесыМинус.Доступность=ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница=ЭлементыФормы.ОсновнаяПанель.Страницы.Товары;
	//***
	Если ЭлементыФормы.Контрагент.Значение.ЗапретПродажи=Истина тогда
		ЭлементыФормы.Контрагент.ЦветФонаПоля=WebЦвета.СветлоРозовый;
	иначе
		ЭлементыФормы.Контрагент.ЦветФонаПоля=WebЦвета.Белый;
	КонецЕсли;	
	//***170705
///	ЭлементыФормы.НадписьАдресДоставки.Значение="Адрес доставки: "+СокрЛП(ЭтотОбъект.АдресДоставки);
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);


		ИначеЕсли Команда = "ЗаполнениеТабличныхЧастей" Тогда

			Если ЗначениеВыбора.ЗаполнятьТовары Тогда
				ОбработкаЗаполнения(Товары, ЗначениеВыбора.Товары);
			КонецЕсли;
			Если ЗначениеВыбора.ЗаполнятьТару Тогда
				ОбработкаЗаполнения(ВозвратнаяТара, ЗначениеВыбора.ВозвратнаяТара);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	//МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установка кнопок печати
	//УстановитьКнопкиПечати();
	
	//Ценообразование.ПроверитьВозможностьЗаменыДисконтнойКарты(ЭтотОбъект, ПолучитьЗначениеУчетнойПолитики());

КонецПроцедуры // ПослеЗаписи()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);
КонецПроцедуры

// Обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()

Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	     Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательМагнитныхКарт
	     Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных
	     Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательRFIDМеток Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СЧИТЫВАТЕЛЬ МАГНИТНЫХ КАРТ)
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров[Кнопка.Имя];
	КонецЕсли;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоПоступлению(Кнопка)

	ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаПоступления.Заголовок = "Выберите документ поступления для заполнения документа реализации";
	ФормаПоступления.РежимВыбора = Истина;
	Поступление = ФормаПоступления.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыПоПоступлениюТоваровУпр(Поступление);

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказуПокупателя(Кнопка)

	ЗаполнитьТабличнуюЧасть(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		//Расчет скидок
		ПересчитатьАвтоматическиеСкидки();
		
		Если АвторасчетНДС Тогда
			// соответствие для хранения погрешностей округлений
			ПогрешностиОкругления = Новый Соответствие();
			// пересчет сумм НДС с учетом ошибок округления
			ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ПогрешностиОкругления, ?(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование, "Оборудование", "Товары"));
			// пересчет сумм НДС с учетом ошибок округления
			//ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, ЭтотОбъект, ПогрешностиОкругления, "Услуги");
			// Установим признак перерасчета сумм НДС
			мПерерасчетПроизведен = ИСТИНА;
		КонецЕсли;
		
	    Для каждого Строка Из ДокументыРасчетовСКонтрагентом Цикл
			
			Строка.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.Сумма,  
			                                             ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
			                                             ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
			                                             ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);	
			
		КонецЦикла;

		УстановитьВидимость();
	    ОбновитьПодвал();
		
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мРассчитыватьАвтоматическиеСкидки   = РассчитыватьАвтоматическиеСкидки();
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧастиТовары.мМинимальныеЦены = мМинимальныеЦены;
	ФормаИзменениеТабличнойЧастиТовары.мСписокФильтров = мСписокФильтров;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара" и выборе соответствующего подменю, 
// вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоЗаказуПокупателя(Кнопка)

	ЗаполнитьТабличнуюЧасть(ВозвратнаяТара);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараДействиеЗаполнитьПоПоступлению(Кнопка)
	
	ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаПоступления.Заголовок = "Выберите документ поступления для заполнения документа реализации";
	ФормаПоступления.РежимВыбора = Истина;
	Поступление = ФормаПоступления.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(Поступление);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Возвратная тара".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельВозвратнаяТараДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары = Ложь;
			Форма.ПоказыватьУслуги = Ложь;
			Форма.ПоказыватьТару   = Истина;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары   = Ложь;
			Форма.ФлажокУслуги   = Ложь;
			Форма.ФлажокТара     = Истина;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)
   	Если Элемент.Значение.ЗапретПродажи=Истина	тогда
 			Предупреждение("Снимите запрет на продажу данному контрагенту!");
			//Элемент.Значение = Справочники.Контрагенты.ПустаяСсылка();
			//возврат;
	КонецЕсли;
		     
	ЭтотОбъект.ДоговорКонтрагента=Элемент.Значение.ОсновнойДоговорКонтрагента;
	ЭтотОбъект.ТипЦен=ЭтотОбъект.ДоговорКонтрагента.ТипЦен;
	ПриИзмененииКонтрагента();

//*** Изменения БУ Ф2	
	Если Элемент.Значение.ОсновнойВидДеятельности.Код<>"000000001" Тогда				
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателяПриБартере;
			СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателяПриБартере;
		Иначе
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;
				
		СчетУчетаРасчетовПоТаре          = СчетаУчета.СчетУчетаТарыПокупателя;
		СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТареПокупателя;
		СчетУчетаНДС 				= СчетаУчета.СчетУчетаНДСПродаж;
		СчетУчетаНДСПодтвержденный  = СчетаУчета.СчетУчетаНДСПродажПодтвержденный;
		
		// обработка счетов НУ в ТЧ
		Если Товары.Количество() + ВозвратнаяТара.Количество()  Тогда				
			ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
			ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
			
		КонецЕсли;
	КонецЕсли;//*** Изменения БУ Ф2	
	//***
	ЭтотОбъект.ПрименятьПроцентСкидкиНаВес=Элемент.Значение.РезрешитьСкидкуНаВес;
	ЭтотОбъект.ОтражатьВБухгалтерскомУчете=Элемент.Значение.БухУчет;
	
КонецПроцедуры // КонтрагентПриИзменении()


// Процедура - обработчик события "НачалоВыбора" элемента формы АдресДоставки
//
Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	КонтрагентАдресаДоставки = ?(Грузополучатель.Пустая(), Контрагент, Грузополучатель);
	
	Если НЕ ЗначениеЗаполнено(КонтрагентАдресаДоставки) Тогда
		ВвестиЗначение(КонтрагентАдресаДоставки, "Выберите контрагента");
	КонецЕсли;

	Если ЗначениеЗаполнено(КонтрагентАдресаДоставки) Тогда
		ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;

		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = КонтрагентАдресаДоставки;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;

		СтруктураОтбораАдресов = Новый СписокЗначений;
		СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;

		ВыбАдресДоставки = ФормаВыбора.ОткрытьМодально();

		Если ЗначениеЗаполнено(ВыбАдресДоставки) Тогда
			АдресДоставки = ВыбАдресДоставки;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры


// Процедура - обработчик события "Очистка" элемента формы АдресДоставки
//
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)

	АдресДоставки = "";
	ДополнениеКАдресуДоставки = "";

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	мНоваяСтрока = НоваяСтрока;
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	
	Если НоваяСтрока  Тогда

		СтрокаТабличнойЧасти.Качество = ПолучитьКачествоНоменклатуры(СтрокаТабличнойЧасти.Качество);

		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад    = Склад;
		КонецЕсли;
	КонецЕсли;

	Если НоваяСтрока
	   И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
	   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
	КонецЕсли;

	мКоличествоПредыдущее = СтрокаТабличнойЧасти.Количество;
	мЦенаПредыдущая = СтрокаТабличнойЧасти.Цена;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
		Элемент.ТекущиеДанные.КлючСвязи  = 0;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			// Ввод состава набора
			УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если Не ОтменаРедактирования Тогда
		УстановитьАвтоотметкуСклада();

		ПересчитатьАвтоматическиеСкидки();
		
		мПерерасчетПроизведен = ЛОЖЬ;
	
	КонецЕсли;

КонецПроцедуры //ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПриПолученииДанных" табличной части
// "Товары".
Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьКартинкиВСтрокахТЧ(ОформленияСтрок, мКартинкаСерийныеНомера, мКартинкаНаборКомплект);
	//***170212
    Для Каждого строка из  ОформленияСтрок Цикл
        Если ЗначениеЗаполнено(строка.ДанныеСтроки.ХарактеристикаНоменклатуры) Тогда
            строка.ЦветФона = WebЦвета.СветлоСерый;
        Иначе
            строка.ЦветФона = WebЦвета.Белый;
		КонецЕсли;
    КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ПередУдалениемТовары(Элемент, Отказ);

КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" табличной части
// "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	УстановитьАвтоотметкуСклада();

	ПослеУдаленияТовары(Элемент);

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	//Если мКолонкиТовары.Всего.Видимость Тогда
		//ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		//ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		//                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
	//КонецЕсли;

	//РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	//РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	//РаботаСДиалогами.ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);

КонецПроцедуры // ТоварыПриВыводеСтроки()

Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	МояФорма=Обработки.ВыборТовараЭкспедиция.ПолучитьФорму("Форма");
  	СтрокаТабличнойЧасти.Номенклатура = МояФорма.ОткрытьМодально();	
	
	//
	//СтруктураВыборСХарактеристикой = Новый Структура("мУказаниеСкладовВТЧ, ПоляДляОбновления, ВладельцыФормы, СтрокаТабличнойЧасти, МетаданныеДокумента"
	//								, мУказаниеСкладовВТЧ
	//								, Новый Структура("Склад,ХарактеристикаНоменклатуры,Номенклатура", ЭлементыФормы.Товары.ТекущиеДанные["Склад"])
	//								, Новый Структура("ЭтаФорма,Элемент", ЭтаФорма,Элемент)
	//								, СтрокаТабличнойЧасти
	//								, Метаданные());
	//ОбработкаТабличныхЧастей.ОткрытьФормуСправочникаНоменклатурыДляВыбора(СтруктураВыборСХарактеристикой);
	ПриИзмененииНоменклатурыТовары(Элемент);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

   	Если ЭтотОбъект.Контрагент.ЗапретПродажи=Истина	тогда
 			Предупреждение("Снимите запрет на продажу данному контрагенту!");
	КонецЕсли;
	
	ПриИзмененииНоменклатурыТовары(Элемент);
	//*** 
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;	
	Если ЭтотОбъект.ПрименятьПроцентСкидкиНаВес тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=СтрокаТабличнойЧасти.Номенклатура.Поход;
	Иначе
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=0;
	КонецЕсли;
	СтрокаТабличнойЧасти.СкидкаНаВес=СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.ПроцентСкидкиНаВес/100;
	СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество-СтрокаТабличнойЧасти.СкидкаНаВес;
	//***
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

Процедура ТоварыСкладПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
	
КонецПроцедуры 

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	//*** 
	Если ЭтотОбъект.ПрименятьПроцентСкидкиНаВес тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=СтрокаТабличнойЧасти.Номенклатура.Поход;
	Иначе
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=0;
	КонецЕсли;
	СтрокаТабличнойЧасти.СкидкаНаВес=СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.ПроцентСкидкиНаВес/100;
	СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество-СтрокаТабличнойЧасти.СкидкаНаВес;
	
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;		
	Если ЭтотОбъект.Контрагент.ЗапретПродажи=Истина	тогда
 			Предупреждение("Снимите запрет на продажу данному контрагенту!");
			СтрокаТабличнойЧасти.Количество=0;
			СтрокаТабличнойЧасти.КоличествоПоВесам=0;
			СтрокаТабличнойЧасти.СкидкаНаВес=0;
	КонецЕсли;
		
	Если Элемент.Значение=0 тогда
		СтрокаТабличнойЧасти.КоличествоПоВесам=0;
		СтрокаТабличнойЧасти.Количество=0;
		СтрокаТабличнойЧасти.СкидкаНаВес=0;
	КонецЕсли;
		
	ПриИзмененииКоличестваТовары(Элемент);
	ЭтотОбъект.Весовщик=глЗначениеПеременной("глТекущийПользователь");
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), РассчитыватьАвтоматическиеСкидки(),истина, ,истина,"Товары");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "Товары".
Процедура ТоварыЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "Организация", Организация);
	СтруктураОтбора.Вставить( "Контрагент",  Контрагент);
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "ЗаказПокупателя" ,СтруктураОтбора);		
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "Склад"
// в строке табличной части "Товары".
Процедура ТоварыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры //ТоварыСкладНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Возвратная тара"
//
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
		СтрокаТабличнойЧасти.Склад = Склад;

		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
		   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьАвтоотметкуСклада();
КонецПроцедуры //ВозвратнаяТараПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПослеУдаления(Элемент)
	УстановитьАвтоотметкуСклада();
КонецПроцедуры //ВозвратнаяТараПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ЭтотОбъект, , мВалютаРегламентированногоУчета);
	ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
    СтрокаТабличнойЧасти.Вес=СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Вес;
КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

Процедура ВозвратнаяТараСкладПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);
    ТекСтрока=ЭлементыФормы.ВозвратнаяТара.ТекущаяСтрока;
	ТекСтрока.Вес=ТекСтрока.Количество*ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков.Вес
	
КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	//Если мКолонкиВозвратнаяТара.ЕдиницаХранения.Видимость Тогда
	//	ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	//КонецЕсли;

	//РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "ВозвратнаяТара".
Процедура ВозвратнаяТараЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "Организация", Организация);
	СтруктураОтбора.Вставить( "Контрагент",  Контрагент);
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "ЗаказПокупателя" ,СтруктураОтбора);		

КонецПроцедуры

Процедура ВозвратнаяТараСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		УправлениеКонтактами.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары");
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		УправлениеКонтактами.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары", ЭтотОбъект, ЭтаФорма);

		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПеретаскивание()

// Процедура - обработчик события "ОбработкаВыбора" элемента формы СчетУчетаРасчетовПоАвансам
//
Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры		

// Процедура - обработчик события "ОбработкаВыбора" элемента формы СчетУчетаРасчетовПоТаре
//
Процедура СчетУчетаРасчетовПоТареОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" элемента формы СчетУчетаРасчетовПоТареПоАвансам
//
Процедура СчетУчетаРасчетовПоТареПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" элемента формы СчетУчетаРасчетовСКонтрагентом
//
Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура СчетУчетаНДСПодтвержденныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЧ ДокументыРасчетовСКонтрагентом

Процедура РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные)

	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.РассчитатьПогашаемыеСуммыПоДокументуРасчетов(ДокументОбъект, ТекДанные, мСтруктураПараметровВзаиморасчетов);

КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные.Сделка,
								СтандартнаяОбработка, "ЗаказПокупателя");
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомСделкаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные);
	
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента,
													Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	УправлениеВзаиморасчетами.ОпределитьДатуОплатыДокументаРасчетовСКонтрагентом(ТекДанные);
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные);
	
КонецПроцедуры
 
Процедура КоманднаяПанельДокументыРасчетовСКонтрагентомЗаполнитьТолькоПоЗаказу(Кнопка)
	
	УправлениеВзаиморасчетами.ЗаполнитьПредоплату(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомПриИзмененииФлажка(Элемент, Колонка)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные);
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомСтавкаНДСПриИзменении(Элемент)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные);
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомСуммаПриИзменении(Элемент)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	ТекДанные.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекДанные.Сумма,  
		                                             ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
		                                             ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
		                                             ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);	
	
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	Если НЕ УчитыватьНДС Тогда
		ТекДанные.СтавкаНДС = перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;	
КонецПроцедуры


// Процедура вызывается при нажатии кнопки "СоставНабора" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСоставНабора(Кнопка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
		Предупреждение("Номенклатура не является набором-комплектом!");
		Возврат;
	КонецЕсли;

	мТекущаяСтрокаНабор = СтрокаТабличнойЧасти;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура",      СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("Количество",        СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",  СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект",    ЭтотОбъект);
	СтруктураПараметров.Вставить("ФормаДокумента",    ЭтаФорма);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", "Товары");
	СтруктураПараметров.Вставить("КлючСтроки",        СтрокаТабличнойЧасти.КлючСтроки);
	СтруктураПараметров.Вставить("ТолькоПросмотр",    Не СтрокаТабличнойЧасти.Номенклатура.Комплект);
	СтруктураПараметров.Вставить("ЗаголовокФормы",    "Состав набора-комплекта");

	СтруктураПараметров.Вставить("ЕстьНалогНаПрибыль",мТекущаяСхемаНалогообложения.НалогНаПрибыль);
	
	// Открываем форму "Состав набора".
	мФормаСоставНабора = Обработки.СоставНабора.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	мФормаСоставНабора.СтруктураИсходныхПараметров = СтруктураПараметров;
	мФормаСоставНабора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Грузополучатель"
//
Процедура ГрузополучательПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(АдресДоставки) Тогда
		АдресДоставки = ЗаполнениеДокументов.ПолучитьАдресДоставкиСтрокой(Грузополучатель, ДополнениеКАдресуДоставки);
	КонецЕсли;

КонецПроцедуры // ГрузополучательПриИзменении()

// Процедура вызывается при нажатии кнопки "ВыгрузитьВФорматеCommerceMLФайлПанель"
// подменю "ВыгрузитьВФорматеCommerceMLПанель" командной панели формы
//
Процедура ДействияФормыВыгрузитьВФорматеCommerceMLФайлПанель(Кнопка)

	ЗаполнениеДокументов.ВыгрузитьДокументВФайлCommerceML(Ссылка);
    	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ВыгрузитьВФорматеCommerceMLЭлПочтаПанель"
// подменю "ВыгрузитьВФорматеCommerceMLПанель" командной панели формы
//
Процедура ДействияФормыВыгрузитьВФорматеCommerceMLЭлПочтаПанель(Кнопка)

	ЗаполнениеДокументов.ОтправитьДокументПоПочтеCommerceML(Ссылка);

КонецПроцедуры

// Обработчик события "Нажатие" кнопки "ОткрытьФормуНастройкиАдресногоСклада" в подменю "Действия".
//
Процедура ДействияФормыОткрытьФормуНастройкиБланкаТоварногоНаполнения(Кнопка)

	РаботаСДиалогами.ОткрытьФормуНастройкиБланкаТоварногоНаполнения(ЭтотОбъект);

КонецПроцедуры // ДействияФормыОткрытьФормуНастройкиАдресногоСклада()

// Обработчик события "Нажатие" кнопки "ОткрытьФормуНастройкиОформленияПакетаДокументов" в подменю "Действия".
//
Процедура ДействияФормыОткрытьФормуНастройкиОформленияПакетаДокументов(Кнопка)

	ФормаФормированияПакетаДокументов = ПолучитьФорму("ФормаФормированияПакетаДокументов", ЭтаФорма, ЭтаФорма);
	ФормаФормированияПакетаДокументов.Реализация = ЭтотОбъект;
	ФормаФормированияПакетаДокументов.мПоказыватьФормуПринудительно = Истина;
	ФормаФормированияПакетаДокументов.Открыть();

КонецПроцедуры // ДействияФормыОткрытьФормуНастройкиОформленияПакетаДокументов()

// Обработчик события "Нажатие" кнопки "ОформитьДокументы" в верхней командной панели.
//
Процедура ДействияФормыОформитьДокументы(Кнопка)
	
	ФормаФормированияПакетаДокументов = ПолучитьФорму("ФормаФормированияПакетаДокументов", ЭтаФорма, ЭтаФорма);
	ФормаФормированияПакетаДокументов.Реализация = ЭтотОбъект;
	ФормаФормированияПакетаДокументов.Открыть();

КонецПроцедуры // ДействияФормыОформитьДокументы()

// Заменяет значение реквизита в табличных частях "Товары", "Услуги", "Возвратная тара".
//
Процедура ЗаменитьЗначениеРеквизитаВТабличныхЧастях(ИмяРеквизита, СтароеЗначение, НовоеЗначение, КромеУслуг = Ложь)
	
	// Заменим значения в строках
	Для Каждого Строка Из Товары Цикл
		Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
			Строка[ИмяРеквизита] = НовоеЗначение;
		КонецЕсли;
	КонецЦикла;

	Для Каждого Строка Из ВозвратнаяТара Цикл
		Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
			Строка[ИмяРеквизита] = НовоеЗначение;
		КонецЕсли;
	КонецЦикла;

	Если НЕ КромеУслуг Тогда
		Для Каждого Строка Из Услуги Цикл
			Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
				Строка[ИмяРеквизита] = НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается для обработки программного изменения строки.
//
// Параметры
//  СтрокаТабличнойЧасти - строка ТЧ "Товары", изменение которой нужно обработать.
//  ИзмененнаяКолонка - название колонки, обработчик изменения которой необходимо вызвать.
//
Процедура ИзменениеСтрокиПрограммное(СтрокаТабличнойЧасти, ИзмененнаяКолонка) Экспорт

	ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;

	Если ИзмененнаяКолонка = "Номенклатура" Тогда
		ПриИзмененииНоменклатурыТовары(ЭлементыФормы.Товары);
	ИначеЕсли ИзмененнаяКолонка = "Количество" Тогда
		ПриИзмененииКоличестваТовары(ЭлементыФормы.Товары);
	КонецЕсли;

КонецПроцедуры // ИзменениеСтрокиПрограммное()

// Изменяет значение реквизита "Заказ покупателя" в табличных частях при изменении "Сделки".
//
Процедура ИзменитьЗаказВТабличнойЧасти()
	
	// Если табличные части пустые - выходим
	Если (Товары.Количество() +  ВозвратнаяТара.Количество()) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если колонка заказ недоступна - очистим заказ в табличных частях и выходим
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ДокументОбъект.ВидОперации, ДокументОбъект.ДоговорКонтрагента);
	
	Если НЕ ЕстьКолонкаЗаказ Тогда
		ОчиститьРеквизитВТабличныхЧастях("ЗаказПокупателя");
		Возврат;
	КонецЕсли;

	// Если не "пустое значение" и не "заказ покупателя" - значение неподходит, выходим
	Если ЗначениеЗаполнено(Сделка) И НЕ ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	// Если не "пустое значение" и не "заказ покупателя" - значение неподходит, выходим
	Если ЗначениеЗаполнено(мСтароеЗначениеСделки) И НЕ ТипЗнч(мСтароеЗначениеСделки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	// Если оба значения пустые - менять нечего, выходим
	Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСделки) И НЕ ЗначениеЗаполнено(Сделка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Сделка <> мСтароеЗначениеСделки Тогда // Изменен заказ в шапке
		
		// Получим список заказов из табличных частей документа
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(Товары, "ЗаказПокупателя");
		
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(ВозвратнаяТара, "ЗаказПокупателя", СписокЗаказов);
		
		// Приведем тип пустого значения к типу пустого значения в строках ТЧ для поиска
		Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСделки) Тогда
			мСтароеЗначениеСделки = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		
		Если СписокЗаказов.Количество() = 0 И ЗначениеЗаполнено(Сделка) Тогда
			// Все поля пустые, можно заполнить выбранным значением
			мСтароеЗначениеСделки = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			ТекстВопроса = "Заполнить значение заказа в табличных частях?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение заказа");
			// Очистим значения в строках
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗаменитьЗначениеРеквизитаВТабличныхЧастях("ЗаказПокупателя", мСтароеЗначениеСделки, Сделка);
			КонецЕсли;
			
		ИначеЕсли НЕ СписокЗаказов.НайтиПоЗначению(мСтароеЗначениеСделки) = Неопределено Тогда
			// В табличных частях есть строки со старым значением сделки
			
			Если НЕ ЗначениеЗаполнено(Сделка) Тогда
				ТекстВопроса = "Очистить значение заказа в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Пустое значение заказа");
				// Очистим значения в строках
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ОчиститьРеквизитВТабличныхЧастях("ЗаказПокупателя");
				КонецЕсли;
			Иначе
				ТекстВопроса = "Заменить значение заказа в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение заказа");
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ЗаменитьЗначениеРеквизитаВТабличныхЧастях("ЗаказПокупателя", мСтароеЗначениеСделки, Сделка);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		мСтароеЗначениеСделки = Сделка;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗаказВТабличнойЧасти()

// <Процедура ОбработчикИзмененияДанных обслуживает подключенные обработчики изменения данных>
//
// Параметры
//  <ИмяЭлемента>  – <Строка> – <Путь к данным>
//
Процедура ОбработчикИзмененияДанных(ИмяЭлемента)

	Если ИмяЭлемента = "ДокументОбъект.ОтражатьВУправленческомУчете" ИЛИ ИмяЭлемента = "ДокументОбъект.ВидПередачи" Тогда
		мФормаОформитьДокументы = ПолучитьФорму("ФормаФормированияПакетаДокументов", ЭтаФорма, ЭтаФорма);
		Если НЕ мФормаОформитьДокументы.мОткрыта = Неопределено Тогда
			мФормаОформитьДокументы.УстановитьДоступность();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработчикИзмененияДанных()

// Процедура - обработчик события "ПриСменеСтраницы" основной панели.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "АвтоматическиеСкидки" Тогда
		ТаблицаАвтоСкидок.Очистить();

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Товары, ТаблицаАвтоСкидок);
		

		КоличествоСтрок = ТаблицаАвтоСкидок.Количество() - 1;
		Для Тмп = 0 По КоличествоСтрок Цикл
			ТекСтрока = ТаблицаАвтоСкидок[КоличествоСтрок - Тмп];

			Если ТекСтрока.ПроцентАвтоматическихСкидок = 0 Тогда
				ТаблицаАвтоСкидок.Удалить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Очищает значение реквизита в табличных частях "Товары", "Услуги", "Возвратная тара".
//
Процедура ОчиститьРеквизитВТабличныхЧастях(ИмяРеквизита, КромеУслуг = Ложь)
	
	// Очистим значения в строках
	Для Каждого Строка Из Товары Цикл
		Строка[ИмяРеквизита] = Неопределено;
	КонецЦикла;

	Для Каждого Строка Из ВозвратнаяТара Цикл
		Строка[ИмяРеквизита] = Неопределено;
	КонецЦикла;

	Если НЕ КромеУслуг Тогда
		Для Каждого Строка Из Услуги Цикл
			Строка[ИмяРеквизита] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//Отказ=ЭтотОбъект.Распечатано;
	
	//При проведении документа проверим возможность получения бонусов.
	//Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Проведен Тогда
	//	ТолькоСерые = Неопределено;
	//	
	//	Если Ценообразование.ЕстьСпецПредложения("Товары", ЭтотОбъект, ТолькоСерые, Перечисления.ВидыСкидок.Оптовая) Тогда
	//		Если Не(ТолькоСерые И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "НеПредлагатьНеполныеСпецПредложения")) Тогда
	//			Ответ = Вопрос("В документе можно составить спец. предложения." + Символы.ПС + "Открыть форму подбора спец. предложений?", РежимДиалогаВопрос.ДаНет);
	//			
	//			Если Ответ = КодВозвратаДиалога.Да Тогда
	//				Ценообразование.РассчитатьНатуральныеСкидки("Товары", ЭтотОбъект, ЭтаФорма, Перечисления.ВидыСкидок.Оптовая);
	//				
	//				// Если пользователь отказался от выбора спец. предложения - вернемся к редактированию документа.
	//				Если Ценообразование.ЕстьСпецПредложения("Товары", ЭтотОбъект, ТолькоСерые, Перечисления.ВидыСкидок.Оптовая) Тогда
	//					Отказ = Истина;
	//					Возврат;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//Если ЭлементыФормы.ФлажокПечать.Значение И ЭтотОбъект.Распечатано=Ложь  Тогда
	//    ЭтотОбъект.Распечатано=Истина;
	//	ПечататьДокументы=Истина;
	//КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью()

// Процедура выполняет необходимые действия перед удалением строки ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//  Отказ - флаг отказа.
//
Процедура ПередУдалениемТовары(Элемент, Отказ)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если Элемент.ТекущиеДанные = мТекущаяСтрокаНабор И мФормаСоставНабора.Открыта() Тогда
		мФормаСоставНабора.Закрыть();
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.КлючСвязи <> 0 Тогда
		Поиск = Новый Структура();
		Поиск.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		Строки = СерийныеНомера.НайтиСтроки(Поиск);
		Для Каждого СерийныйНомер Из Строки Цикл
			СерийныеНомера.Удалить(СерийныйНомер);
		КонецЦикла;
	КонецЕсли;

	УправлениеЗапасами.ОчиститьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПередУдалениемТовары()

// Процедура выполняет необходимые действия после удаления строки ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПослеУдаленияТовары(Элемент)

	УстановитьАвтоотметкуСклада();

	ПересчитатьАвтоматическиеСкидки();

	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;

КонецПроцедуры // ПослеУдаленияТовары()

// Процедура выполняет необходимые действия при изменении количества в ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПриИзмененииКоличестваТовары(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭтотОбъект.ПрименятьПроцентСкидкиНаВес=ЭтотОбъект.Контрагент.РезрешитьСкидкуНаВес;
	//*** 
	Если ЭтотОбъект.ПрименятьПроцентСкидкиНаВес тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=СтрокаТабличнойЧасти.Номенклатура.Поход;
	Иначе
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=0;
	КонецЕсли;
	СтрокаТабличнойЧасти.СкидкаНаВес=СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.ПроцентСкидкиНаВес/100;
	СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество-СтрокаТабличнойЧасти.СкидкаНаВес;
	//***
	
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииКоличестваТовары()

// Процедура выполняет необходимые действия при изменении контрагента.
//
Процедура ПриИзмененииКонтрагента()

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // ПриИзмененииКонтрагента()

// Процедура выполняет необходимые действия при изменении номенклатуры в ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПриИзмененииНоменклатурыТовары(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
	
	// Ввод состава набора
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииНоменклатурыТовары()

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура вызывается для обработки программного удалениия строки.
//
// Параметры
//  СтрокаТабличнойЧасти - строка ТЧ "Товары", которую нужно удалить.
//
Процедура УдалениеСтрокиПрограммное(СтрокаТабличнойЧасти) Экспорт

	ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;

	ПередУдалениемТовары(ЭлементыФормы.Товары, Ложь);

	Товары.Удалить(СтрокаТабличнойЧасти);

	ПослеУдаленияТовары(ЭлементыФормы.Товары);

КонецПроцедуры // УдалениеСтрокиПрограммное()

Процедура ТоварыНалоговоеНазначениеДоходовИЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура ТоварыНалоговоеНазначениеДоходовИЗатратАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура ТоварыНалоговоеНазначениеДоходовИЗатратОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеДоходовИЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеДоходовИЗатратАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеДоходовИЗатратОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
КонецПроцедуры

Процедура ТоварыНалоговоеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ТоварыНалоговоеНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ТоварыНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС)
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС)
КонецПроцедуры

Процедура ЕстьАвансДо01042011ПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	Если НЕ ЕстьАвансДо01042011 Тогда
		
		СуммаВДВРПоАвансуДо01042011 = 0;	
		НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НеОтноситьСебестоимостьЗапасовНаРасходыПоНУПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

Процедура ВывестиИнформациюОбИспользованииРеквизитовДляГСМ()
	Сообщить("Особенности ввода данных и двойного количественного учета ГСМ на нефтебазе (регистр ""ГСМ на складах (Р)""):", СтатусСообщения.Информация);
	Сообщить(" - при вводе объема, массы, плотности в любой последовательности, если один из параметров пустой, он будет заполнен по двум остальным по формуле");
	Сообщить(" - при вводе 1-го количества (есть плотность) будет пересчитано 2-е количество");
	Сообщить(" - при вводе 2-го количества (есть плотность) это кол-во останется тем, что введено, ничего не пересчитывается");
	Сообщить(" - при вводе плотности будет пересчитано 2-е количество");
	Сообщить(" - при уст. флаге ""Введена вручную 2-я ед."" в движения попадет 2-е кол-во из документа, иначе - расчетное значение по 1-му кол-ву и плотности");
КонецПроцедуры

Процедура ДоступностьДатаКнопкиОКЗаписать()
	
	Для каждого Элемент Из ЭлементыФормы Цикл
		Если ТипЗнч(Элемент) = Тип("Флажок") Тогда
			Элемент.Доступность = Ложь;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеВвода") Тогда
			Если Элемент.Имя = "Дата" Тогда
				Элемент.ТолькоПросмотр = Ложь;
			Иначе
				Элемент.ТолькоПросмотр = Истина;
			КонецЕсли
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТабличноеПоле") Тогда
			Элемент.ТолькоПросмотр = Истина;
		ИначеЕсли ТипЗнч(Элемент) = Тип("Кнопка") Тогда
			Если (Элемент.Имя = "ОК") ИЛИ (Элемент.Имя = "Записать") Тогда
				Элемент.Доступность = Истина;
			Иначе
				Элемент.Доступность = Ложь;
			КонецЕсли
		КонецЕсли
	КонецЦикла
	
КонецПроцедуры

Процедура ТоварыКоличествоЗаявкиПриИзменении(Элемент)
   	Если ЭтотОбъект.Контрагент.ЗапретПродажи=Истина	тогда
 			Предупреждение("Снимите запрет на продажу данному контрагенту!");
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ЭтотОбъект.ИтогоКоличествоТовара=0 И ЭтотОбъект.ИтогоКоличествоЗаявки<>0 
		И не ЭтотОбъект.ПометкаУдаления И не ЭтотОбъект.Р_ЗапретРедактирования  тогда
				Документы.РеализацияТоваровУслуг.СоздатьЗаказ(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

//Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли; 	

КонецПроцедуры

Процедура ТоварыХарактеристикаНоменклатурыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтрокаТабличнойЧасти=ЭлементыФормы.Товары.ТекущаяСтрока;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ХарактеристикаНоменклатуры.Ссылка
	                      |ИЗ
	                      |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаНоменклатуры
	                      |ГДЕ
	                      |	ХарактеристикаНоменклатуры.ПометкаУдаления = ЛОЖЬ
	                      |	И ХарактеристикаНоменклатуры.Владелец = &Номенклатура");
	
	Запрос.УстановитьПараметр("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокУпаковок = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокУпаковок.Добавить(Выборка.ссылка);
	КонецЦикла;
	Элемент.СписокВыбора= СписокУпаковок;
КонецПроцедуры

Процедура ПриИзмененииТоварыВесы(Элемент)
	ТекущаяСтрокаТЧ=ЭлементыФормы.Товары.ТекущаяСтрока;
	Весы1Нажатие();
	Если ЭтотОбъект.Контрагент.ЗапретПродажи=Истина тогда
		ТекущаяСтрокаТЧ.Количество=0;
		ТекущаяСтрокаТЧ.КоличествоПоВесам=0; 
	 	ТекущаяСтрокаТЧ.СкидкаНаВес=0;
		ТекущаяСтрокаТЧ.Цена=0;	
		ТекущаяСтрокаТЧ.Сумма=0;
		Предупреждение("Снимите запрет на продажу!");
		возврат;
	КонецЕсли;
	ПриИзмененииНоменклатурыТовары(ТекущаяСтрокаТЧ);
	ПересчитатьАвтоматическиеСкидки();	
	ЭтаФорма.ТекущийЭлемент=ЭлементыФормы.Товары;
	ЭлементыФормы.Товары.ТекущаяСтрока=ЭлементыФормы.Товары.ТекущаяСтрока;
	ЭтотОбъект.Весовщик=глЗначениеПеременной("глТекущийПользователь");
	ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры // ТоварыКоличествоПриИзменении()


Процедура Весы1Нажатие()
ВесНаВесах=0;
ВесНаВесах=СчитываниеВесов();
Если ВесНаВесах>0 Тогда
	РассчитатьВзвешивание(ВесНаВесах);
КонецЕсли;
КонецПроцедуры

Функция РассчитатьВзвешивание(Количество) экспорт
	Если Количество=0 или ТипЗНЧ(Количество)<>Тип("Число") тогда
		возврат 0;
	КонецЕсли;
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭтотОбъект.ПрименятьПроцентСкидкиНаВес=ЭтотОбъект.Контрагент.РезрешитьСкидкуНаВес;
	Если ЭтотОбъект.ПрименятьПроцентСкидкиНаВес=Истина   тогда
			СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=СтрокаТабличнойЧасти.Номенклатура.Поход;
	Иначе
			СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=0;
	КонецЕсли;
	СтрокаТабличнойЧасти.КоличествоПоВесам=Количество; 
	СтрокаТабличнойЧасти.СкидкаНаВес=СтрокаТабличнойЧасти.КоличествоПоВесам*СтрокаТабличнойЧасти.ПроцентСкидкиНаВес/100;
	//***180629 СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоПоВесам-СтрокаТабличнойЧасти.СкидкаНаВес;
	СтрокаТабличнойЧасти.Количество=Окр(СтрокаТабличнойЧасти.КоличествоПоВесам-СтрокаТабличнойЧасти.СкидкаНаВес,?(Контрагент.Родитель.Код="000000456",2,3));
	
КонецФункции

Процедура ВесыПлюсНажатие()
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	ВесНаВесах=0;
	ВесНаВесах=СчитываниеВесов();
	РассчитатьВзвешиваниеПлюс(ВесНаВесах);
КонецПроцедуры
   
Функция РассчитатьВзвешиваниеПлюс(Количество) экспорт
	Если Количество=0 или ТипЗНЧ(Количество)<>Тип("Число") тогда
		возврат 0;
	КонецЕсли;
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;	
	ЭтотОбъект.ПрименятьПроцентСкидкиНаВес=ЭтотОбъект.Контрагент.РезрешитьСкидкуНаВес;
	Если ЭтотОбъект.ПрименятьПроцентСкидкиНаВес=Истина тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=СтрокаТабличнойЧасти.Номенклатура.Поход;
	Иначе
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=0;
	КонецЕсли;
	СтрокаТабличнойЧасти.КоличествоПоВесам=СтрокаТабличнойЧасти.КоличествоПоВесам	+	Количество; 
	СтрокаТабличнойЧасти.СкидкаНаВес=СтрокаТабличнойЧасти.КоличествоПоВесам*СтрокаТабличнойЧасти.ПроцентСкидкиНаВес/100;
	//***180629 СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоПоВесам-СтрокаТабличнойЧасти.СкидкаНаВес;
	СтрокаТабличнойЧасти.Количество=Окр(СтрокаТабличнойЧасти.КоличествоПоВесам-СтрокаТабличнойЧасти.СкидкаНаВес,?(Контрагент.Родитель.Код="000000456",2,3));

КонецФункции

Процедура ВесыМинусНажатие()
ВесНаВесах=0;
ВесНаВесах=СчитываниеВесов();
Если ВесНаВесах>0 Тогда
	РассчитатьВзвешиваниеМинус(ВесНаВесах);
КонецЕсли;
КонецПроцедуры

Функция РассчитатьВзвешиваниеМинус(Количество) экспорт
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭтотОбъект.ПрименятьПроцентСкидкиНаВес=ЭтотОбъект.Контрагент.РезрешитьСкидкуНаВес;
	Если ЭтотОбъект.ПрименятьПроцентСкидкиНаВес=Истина  тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=СтрокаТабличнойЧасти.Номенклатура.Поход;
	Иначе
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=0;
	КонецЕсли;
	СтрокаТабличнойЧасти.КоличествоПоВесам=СтрокаТабличнойЧасти.КоличествоПоВесам	-	Количество; 
	СтрокаТабличнойЧасти.СкидкаНаВес=СтрокаТабличнойЧасти.КоличествоПоВесам*СтрокаТабличнойЧасти.ПроцентСкидкиНаВес/100;
	//***180629 	СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.КоличествоПоВесам-СтрокаТабличнойЧасти.СкидкаНаВес;
	СтрокаТабличнойЧасти.Количество=Окр(СтрокаТабличнойЧасти.КоличествоПоВесам-СтрокаТабличнойЧасти.СкидкаНаВес,?(Контрагент.Родитель.Код="000000456",2,3));	
	Если СтрокаТабличнойЧасти.Количество=0 тогда
		СтрокаТабличнойЧасти.КоличествоПоВесам=0;
		СтрокаТабличнойЧасти.СкидкаНаВес=0;
	КонецЕсли;
		
КонецФункции



Процедура ВесыПриИзменении(Элемент)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Название", СокрЛП(ЭтотОбъект.Весы));
	ПараметрыОтбора.Вставить("ВидыОборудованияComПортов", Перечисления.ВидыОборудованияComПортов.Весы);
	НайденныеСтроки = ПараметрыСеанса.РабочееМесто.COMпорты.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество()>0  Тогда
		ЭтотОбъект.COMПортВесов	=	НайденныеСтроки[0].COMпорт;
		ТекущаяДЛЛ	  		 	=	СокрЛП(НайденныеСтроки[0].ВесовоеОборудование.СтрокаПутьDLL)+СокрЛП(НайденныеСтроки[0].ВесовоеОборудование.DLL);
		ТекущийОбъектВесов	 	=	НайденныеСтроки[0].ВесовоеОборудование.Ссылка;
		ТекущаяСтрокаЗапросаВесов= 	НайденныеСтроки[0].СтрокаОпроса;
		//Сообщить(ТекущаяДЛЛ+" "+ТекущийОбъектВесов+" "+ТекущаяСтрокаЗапросаВесов);
	КонецЕсли;
КонецПроцедуры

Процедура ВесыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СписокВесов = Новый СписокЗначений;
	Шаг=0;
	Пока Шаг<ПараметрыСеанса.РабочееМесто.COMпорты.Количество() Цикл
		Если ПараметрыСеанса.РабочееМесто.COMпорты[Шаг].ВидыОборудованияComПортов=Перечисления.ВидыОборудованияComПортов.Весы тогда
			СписокВесов.Добавить(ПараметрыСеанса.РабочееМесто.COMпорты[Шаг].Название);
		КонецЕсли;
		Шаг=Шаг+1;
	КонецЦикла;
	Элемент.СписокВыбора= СписокВесов;
КонецПроцедуры

Процедура ПриИзмененииТоварыВесыПлюс(Элемент)
	ТекущаяСтрокаТЧ=ЭлементыФормы.Товары.ТекущаяСтрока;
	Если ЭтотОбъект.Контрагент.ЗапретПродажи=Истина тогда
		ТекущаяСтрокаТЧ.Количество=0;
		ТекущаяСтрокаТЧ.КоличествоПоВесам=0; 
	 	ТекущаяСтрокаТЧ.СкидкаНаВес=0;
		ТекущаяСтрокаТЧ.Цена=0;	
		ТекущаяСтрокаТЧ.Сумма=0;
		Предупреждение("Снимите запрет на продажу!");
		возврат;
	КонецЕсли;
	ВесыПлюсНажатие();	
	//ПриИзмененииКоличестваТовары(ТекущаяСтрокаТЧ);
	ПриИзмененииНоменклатурыТовары(ТекущаяСтрокаТЧ);
	ПересчитатьАвтоматическиеСкидки();	
	ЭтотОбъект.Весовщик=глЗначениеПеременной("глТекущийПользователь");
	ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

Процедура ПриИзмененииТоварыВесыМинус(Элемент)
	ТекущаяСтрокаТЧ=ЭлементыФормы.Товары.ТекущаяСтрока;
	ПриИзмененииКонтрагента();
	Если ЭтотОбъект.Контрагент.ЗапретПродажи=Истина тогда
		ТекущаяСтрокаТЧ.Количество=0;
		ТекущаяСтрокаТЧ.КоличествоПоВесам=0; 
	 	ТекущаяСтрокаТЧ.СкидкаНаВес=0;
		ТекущаяСтрокаТЧ.Цена=0;	
		ТекущаяСтрокаТЧ.Сумма=0;
		Предупреждение("Снимите запрет на продажу!");
		возврат;
	КонецЕсли;
	ВесыМинусНажатие();	
	ПересчитатьАвтоматическиеСкидки();
	//ПриИзмененииКоличестваТовары(ТекущаяСтрокаТЧ);
	ПриИзмененииНоменклатурыТовары(ТекущаяСтрокаТЧ);
	ЭтаФорма.ТекущийЭлемент=ЭлементыФормы.Товары;	
	ЭлементыФормы.Товары.ТекущаяСтрока=ЭлементыФормы.Товары.ТекущаяСтрока;
	ЭтотОбъект.Весовщик=глЗначениеПеременной("глТекущийПользователь");
	ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры
  
Функция СчитываниеВесов()
   ТекВес=0;
	try
		scale = Новый COMОбъект("CasAD_AP_DB_EM.Scale");
	except
		Message("dll для весов CAS не инициирован!");
		return ТекВес;
	endtry;
	мТекПользователь=ИмяПользователя();
	Свойство=СокрЛП("COM порт №1");
	Отбор = Новый Структура; 
	Отбор.Вставить("Пользователь", Справочники.Пользователи.НайтиПоНаименованию(СокрЛП(мТекПользователь))); 
	Отбор.Вставить("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию(СокрЛП(Свойство))); 
	Результат = РегистрыСведений.НастройкиПользователей.Получить(Отбор); 
	НовоеЗначение=Результат.Значение;
	//НовоеЗначение=1;
	Если Строка(НовоеЗначение)="0" или Строка(НовоеЗначение)=""  тогда
		 	Message("СОМ порт не найден, работа с весами невозможна!");
		return ТекВес;
	КонецЕсли;
	try
		scale.Connect(Результат.Значение,0);
	except
		Message("Нет подключения к веам.");
	endtry;

	// Чтение веса:	
	
	try
		scale.Update();
	except
		// Первая попытка не удалась, пробуем ещё раз!
		try
			scale.Update();
		except
			// Вторая попытка не удалась, пробуем ещё раз!
			try
				scale.Update();
			except
				Message("нет подключения третий раз.");
			endtry;
		endtry;
	endtry;
	
	ТекВес=scale.Weight;
	try
		scale.DisconnectAll();
	except
			try
				scale.DisconnectAll();
			except
			endtry;
	endtry;
	возврат ТекВес;	
КонецФункции

Процедура КнопкаДобавитьНажатие(Элемент)
Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница=ЭлементыФормы.ОсновнаяПанель.Страницы.Товары тогда
		
	Если не ЭлементыФормы.Товары.ТекущаяСтрока = Неопределено тогда
		НомТекСтр=ЭлементыФормы.Товары.ТекущиеДанные.НомерСтроки;
	КонецЕсли;
	
	Товары.Добавить();
	ЭлементыФормы.Товары.ТекущаяСтрока=ЭтотОбъект.Товары.Получить(МАКС(Товары.Количество()-1,0)); 
ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница=ЭлементыФормы.ОсновнаяПанель.Страницы.Тара тогда
	Если не ЭлементыФормы.Товары.ТекущаяСтрока = Неопределено тогда
		НомТекСтр=ЭлементыФормы.Товары.ТекущиеДанные.НомерСтроки;
	КонецЕсли;

	ВозвратнаяТара.Добавить();
	ЭлементыФормы.ВозвратнаяТара.ТекущаяСтрока=ЭтотОбъект.ВозвратнаяТара.Получить(МАКС(ВозвратнаяТара.Количество()-1,0)); 
КонецЕсли;	
КонецПроцедуры

Процедура КнопкаУдалитьНажатие(Элемент)
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя="Тара" Тогда
	   НазвТаблицы="ВозвратнаяТара";
	Иначе	
	   НазвТаблицы=ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	КонецЕсли; 

	
	Если ЭлементыФормы[НазвТаблицы].ТекущиеДанные = неопределено тогда
		возврат;
	КонецЕсли;
	НомСтр=ЭлементыФормы[НазвТаблицы].ТекущиеДанные.НомерСтроки;
	ЭтотОбъект[НазвТаблицы].Удалить(ЭлементыФормы[НазвТаблицы].ТекущиеДанные.НомерСтроки-1);
	ЭлементыФормы[НазвТаблицы].ТекущаяСтрока=ЭтотОбъект[НазвТаблицы].Получить(МАКС(?(НомСтр<ЭтотОбъект[НазвТаблицы].Количество()-1,МАКС(НомСтр-1,0),ЭтотОбъект[НазвТаблицы].Количество()-1),0)); 
КонецПроцедуры

Процедура КнопкаВверхНажатие(Элемент)
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя="Тара" Тогда
	   НазвТаблицы="ВозвратнаяТара";
	Иначе	
	   НазвТаблицы=ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	КонецЕсли; 
	НомТекСтр=ЭлементыФормы[НазвТаблицы].ТекущиеДанные.НомерСтроки;
	Если ЭтотОбъект[НазвТаблицы].Количество()=0 или ЭлементыФормы[НазвТаблицы].ТекущиеДанные = неопределено тогда
		возврат;
	Иначе
		ЭлементыФормы[НазвТаблицы].ТекущаяСтрока=ЭтотОбъект[НазвТаблицы].Получить(0);
	КонецЕсли;
	ЭлементыФормы[НазвТаблицы].ТекущаяСтрока=ЭтотОбъект[НазвТаблицы].Получить(МАКС(НомТекСтр-2,0)); 
КонецПроцедуры


Процедура КнопкаВнизНажатие(Элемент)
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя="Тара" Тогда
	   НазвТаблицы="ВозвратнаяТара";
	Иначе	
	   НазвТаблицы=ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	КонецЕсли;
	
	
	Если ЭлементыФормы[НазвТаблицы].ТекущиеДанные = неопределено тогда 
		возврат;
	КонецЕсли;
	НомТекСтр=ЭлементыФормы[НазвТаблицы].ТекущиеДанные.НомерСтроки;
	Если ЭтотОбъект[НазвТаблицы].Количество()=0 или НомТекСтр=ЭтотОбъект[НазвТаблицы].Количество()  тогда
		возврат;
	КонецЕсли;
	ЭлементыФормы[НазвТаблицы].ТекущаяСтрока=ЭтотОбъект[НазвТаблицы].Получить(МИН(НомТекСтр,ЭтотОбъект[НазвТаблицы].Количество()));	
КонецПроцедуры

Процедура ВозвратнаяТараНоменклатураНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СписокЯщиков = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Наименование,
	|	Номенклатура.Родитель,
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Родитель.Код  =""000000045""";
	
	//вся тара 
	//Запрос.УстановитьПараметр("Родитель",Справочники.Номенклатура.НайтиПоКоду("00000000029"));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
			СписокЯщиков.Добавить(Выборка.ссылка);	
	КонецЦикла;
//КонецЕсли;	
Элемент.СписокВыбора= СписокЯщиков;

КонецПроцедуры

Процедура Ящ1Нажатие(Элемент)
	ТекТовар=Справочники.Номенклатура.НайтиПоКоду("000000048");
	ДобавитьЯщик(ТекТовар);
КонецПроцедуры
 
Процедура ДобавитьЯщик(ТекТовар)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ТекТовар);
	НайденныеСтроки = ВозвратнаяТара.НайтиСтроки(ПараметрыОтбора);
	ВсегоЯщиков=0;
	ВсегоВесЯщиков=0;
	Если НайденныеСтроки.Количество()>0 тогда
		ЭлементыФормы.ВозвратнаяТара.ТекущаяСтрока=НайденныеСтроки[0];
		МояСтрока=ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
		МояСтрока.Количество=МояСтрока.Количество+?(ЭлементыФормы.ФлажокМинусТары.Значение=Ложь,1,-1);
		МояСтрока.Сумма=МояСтрока.Цена *МояСтрока.Количество;
		МояСтрока.Вес=МояСтрока.Количество*ТекТовар.ЕдиницаХраненияОстатков.Вес;
	ИначеЕсли НайденныеСтроки.Количество()=0 И ЭлементыФормы.ФлажокМинусТары.Значение=Ложь тогда
		НовыйЯщик=ЭтотОбъект.ВозвратнаяТара.Добавить() ;
		НовыйЯщик.Количество=1;
		НовыйЯщик.Номенклатура=ТекТовар;
		НовыйЯщик.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(НовыйЯщик.Номенклатура, ,
		Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"), ДокументОбъект.Дата, НовыйЯщик.Номенклатура.ЕдиницаХраненияОстатков,
		Справочники.Валюты.НайтиПоКоду("980"),
		1,
		1, ,
		,
		);
		НовыйЯщик.Сумма=НовыйЯщик.Цена *НовыйЯщик.Количество;
		НовыйЯщик.Вес=ТекТовар.ЕдиницаХраненияОстатков.Вес;
		НовыйЯщик.СпособСписанияОстаткаТоваров=Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	КонецЕсли;
КонецПроцедуры

Процедура Ящ2Нажатие(Элемент)
		ТекТовар=Справочники.Номенклатура.НайтиПоКоду("000000233");
	ДобавитьЯщик(ТекТовар);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	ЭтаФорма.Закрыть();
КонецПроцедуры

Функция ПечатьКомплекта()

ПечатьКомплектаНакладных(ЭтотОбъект);	

КонецФункции // ()

Процедура КнопкаДатаПлюсНажатие(Элемент)
	ЭтотОбъект.Дата=ЭтотОбъект.Дата+24*3600;
КонецПроцедуры

Процедура КнопкаДатаМинусНажатие(Элемент)
	ЭтотОбъект.Дата=ЭтотОбъект.Дата-24*3600;
КонецПроцедуры

Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	Попытка 
		КодЧисло=Число(СокрЛП(Текст));
	Исключение
		КодЧисло=0;
	КонецПопытки;
	Если КодЧисло<>0 Тогда
		  СтандартнаяОбработка=ложь;
	      НовКод=ДополнительныеФункции.НайтиКонтрагентаПоКодПик(КодЧисло);
		Если не НовКод=неопределено тогда 
			Элемент.Значение=НовКод.Контрагент;
			Значение=НовКод.Контрагент;
			ЭтотОбъект.Контрагент=НовКод.Контрагент;
			ЭтотОбъект.АдресДоставки	= НовКод.Представление;
			ЭтотОбъект.ВидАдреса		= НовКод.Вид;
			ЭтотОбъект.БазовыйМаршрут   = НовКод.Маршрут;
		иначе
			СтандартнаяОбработка=Истина;
			ЭтотОбъект.АдресДоставки	= "";
			ЭтотОбъект.ВидАдреса		= Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			ЭтотОбъект.БазовыйМаршрут   = Справочники.Маршруты.ПустаяСсылка();
		КонецЕсли;
	  Иначе
		  СтандартнаяОбработка=Истина;
  		  ЭтотОбъект.АдресДоставки	= "";
		  ЭтотОбъект.ВидАдреса		= Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
		  ЭтотОбъект.БазовыйМаршрут   = Справочники.Маршруты.ПустаяСсылка();
	КонецЕсли; 
КонецПроцедуры

Процедура КнопкаВводКАПоКодуПикНажатие(Элемент)
	ФормаКодКА = ПолучитьОбщуюФорму("ФормаВводаПоКоду");
	КодКА=ФормаКодКА.ОткрытьМодально();
	НовКод=ДополнительныеФункции.НайтиКонтрагентаПоКодПик(КодКА);
	Если НовКод=Неопределено тогда
		ЭлементыФормы.Контрагент.Значение=Справочники.Контрагенты.ПустаяСсылка();
		ЭтотОбъект.Контрагент=Справочники.Контрагенты.ПустаяСсылка();
		ЭтотОбъект.АдресДоставки	= "";
		ЭтотОбъект.ВидАдреса		= Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	Иначе	
		ЭлементыФормы.Контрагент.Значение=НовКод.Контрагент;
		ЭтотОбъект.Контрагент=НовКод.Контрагент;
		ЭтотОбъект.АдресДоставки	= НовКод.Представление;
		ЭтотОбъект.ВидАдреса		= НовКод.Вид;
	КонецЕсли;
КонецПроцедуры

Процедура ПечатьИзДокумента()
	Если не ЭтотОбъект.Проведен тогда
		ЭтотОбъект.Распечатано=Истина;
	КонецЕсли;
	ПечатьКомплектаНакладных(ЭтотОбъект);
КонецПроцедуры

Процедура ОсновныеДействияФормыОк(Кнопка)
	ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	ЭтаФорма.Закрыть();
КонецПроцедуры


//ЭтаФорма.УстановитьДействие("ПриОткрытии", Новый Действие("Р_ПриОткрытии"));

//ЭлементыФормы.Товары.УстановитьДействие("ПередОкончаниемРедактирования", Новый Действие("Р_ТоварыПередОкончаниемРедактирования"));

//ЭлементыФормы.Товары.УстановитьДействие("ПриВыводеСтроки", Новый Действие("Р_ТоварыПриВыводеСтроки"));

//ЭлементыФормы.Товары.УстановитьДействие("ПослеУдаления", Новый Действие("Р_ТоварыПослеУдаления"));

//ЭлементыФормы.Товары.Колонки.Номенклатура.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("Р_ТоварыНоменклатураПриИзменении"));

//ЭлементыФормы.Товары.Колонки.Количество.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("Р_ТоварыКоличествоПриИзменении"));

//КОНЕЦ ВСТАВКИ

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары                = ЭлементыФормы.Товары.Колонки;
мКолонкиТаблицаАвтоСкидок     = ЭлементыФормы.АвтоматическиеСкидки.Колонки;
мКолонкиВозвратнаяТара        = ЭлементыФормы.ВозвратнаяТара.Колонки;

мРазрешитьНулевыеЦеныВОпте    = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВОпте();
мРазрешитьНулевыеЦеныВРознице = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();
мИспользоватьТару             = ЛОжь;//глЗначениеПеременной("ИспользоватьВозвратнуюТару");
мПерерасчетПроизведен = ЛОЖЬ;

мТерминалы = ПолучитьСерверТО().ПолучитьСписокУстройств(
                 Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);				  
ПечататьДокументы=Ложь;