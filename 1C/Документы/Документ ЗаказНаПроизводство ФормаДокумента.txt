Перем мОбновлятьВладельца Экспорт;
Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мКолонкиПродукция;
Перем мФормаВводПараметровВыпуска, мТекущаяСтрокаПродукцияПараметры;
Перем мЧас;
Перем мМинута;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура изменяет доступность элемента формы .ВремяНапоминания
//
Процедура ДоступностьНапоминаний()

	ЭлементыФормы.ВремяНапоминания.Доступность = НапомнитьОСобытии;
	
КонецПроцедуры // ДоступностьНапоминаний()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбработкаТабличныхЧастей.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьСерия = Ложь;

	Если ТабличнаяЧасть = Продукция Тогда
		Команда         = "ПодборВТабличнуюЧастьПродукция";
		ИмяТабличнойЧасти = "Продукция";
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , Ложь);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;
	Перем Спецификация, текПродукция, ХарактеристикаПродукции, КоличествоПродукции;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Спецификация"    , Спецификация);
	ЗначениеВыбора.Свойство("Продукция"       , текПродукция);
	ЗначениеВыбора.Свойство("ХарактеристикаПродукции"  , ХарактеристикаПродукции);
    ЗначениеВыбора.Свойство("КоличествоПродукции"  , КоличествоПродукции);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;

		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		
		Если ТабличнаяЧасть = Продукция  Тогда
			СтрокаТабличнойЧасти.Спецификация 		= УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата);
			СтрокаТабличнойЧасти.Группа				=  СтрокаТабличнойЧасти.Номенклатура.Родитель;
		КонецЕсли;
		//УстановитьВидВоспроизводстваПоУмолчанию(СтрокаТабличнойЧасти, ТабличнаяЧасть);
			
	КонецЕсли;

	Если ТабличнаяЧасть = Продукция Тогда
		ИмяТабличнойЧасти = "Продукция";
	КонецЕсли;
	
	ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяКолонка = ЭлементыФормы[ИмяТабличнойЧасти].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Процедура - обработчик события "НачалоВыбора" поля Исполнитель.
//
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Исполнитель = ВыбранноеЗначение.Физлицо;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ИсполнительОбработкаВыбора()
 
// Процедура - обработчик события "ПриИзменении" поля ввода Исполнитель 
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура ИсполнительНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// переопеределим выбор физлица на выбор из списка регистра сведений
	//ПодразделениеДляОтбора = ?(НЕ ЗначениеЗаполнено(Подразделение), Справочники.Подразделения.ПустаяСсылка(), Подразделение);
	//ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ИсполнительНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода Исполнитель
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнительАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	//ТекстАвтоПодбора = ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата("Работники", Текст);
	//СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ИсполнительАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода Исполнитель
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	//Значение = ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение);
	//СтандартнаяОбработка = (Значение = Неопределено);
	
КонецПроцедуры // ИсполнительОкончаниеВводаТекста()


//Процедура УстановитьВидВоспроизводстваПоУмолчанию(СтрокаТабличнойЧасти, ТабличнаяЧасть)
//	СтрокаТабличнойЧасти.ВидВоспроизводства = СтрокаТабличнойЧасти.Номенклатура.ВидВоспроизводства;	
//	Если (ТабличнаяЧасть = Полуфабрикаты)
//	  И ((НЕ СтрокаТабличнойЧасти.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство) И (НЕ СтрокаТабличнойЧасти.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка)) ТОгда
//		СтрокаТабличнойЧасти.ВидВоспроизводства = Неопределено;
//	ИначеЕсли ТабличнаяЧасть = Продукция Тогда
//		СтрокаТабличнойЧасти.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство;
//	КонецЕсли;	
//КонецПроцедуры

// Процедура очищает колонку "Размещение" табличной части.
//
Процедура ОчиститьРазмещениеВТабличнойЧасти()

	//Материалы.Свернуть(
	//	// Поля (исключаем Размещение)
	//	"ВидВоспроизводства,
	//	|ЕдиницаИзмерения,
	//	|ЕдиницаИзмеренияМест,
	//	|Заказ,
	//	|Коэффициент,
	//	|Номенклатура,
	//	|НомерПередела,
	//	|Подразделение,
	//	|Продукция,
	//	|Спецификация,
	//	|ХарактеристикаНоменклатуры,
	//	|ХарактеристикаПродукции",
	//	// Количество
	//	"Количество,
	//	|КоличествоМест");

КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	РаботаСДиалогами.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки      = ЭлементыФормы.Продукция.Колонки;
	// Управление доступностью элементов формы в зависимости от вида операции
	КнопкиКоманднойПанели = ЭлементыФормы.ДействияФормы.Кнопки;
	УстановитьВидимостьРМК();
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	
	//*** ПередОткрытием()
	//Если не ЭтоНовый() И  не РольДоступна("ПолныеПрава") И
	//		Дата<=КонецДня(ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить()[Справочники.Организации.ПустаяСсылка()]) 
	//Если не РольДоступна("ПолныеПрава") И не ЭтоНовый() И Дата<=ДополнительныеФункции.ПолучитьДатуЗапретаИзененияДанных() Тогда
	//			
	//	ЭтаФорма.ТолькоПросмотр = Истина;
	//КонецЕсли;
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	ДоступностьНапоминаний();

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,,ПараметрОбъектКопирования,ПараметрОснование);

		//Если НЕ ЗначениеЗаполнено(ДатаИсполнения) Тогда
		//	ДатаИсполнения = РабочаяДата;
		//КонецЕсли;
		ЭтотОбъект.СостояниеЗаказа=Перечисления.СостоянияЗаказаНаПроизводство.Подготовка;
		ДатаBремяИнвентаризации=НачалоДня(Дата)+7*3600;
		ДатаИсполнения=КонецДня(Дата)+1;
		УстановитьДатыАнализа(Дата);
	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Продукция.Колонки, 	СтруктураКолонок);


	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиПродукция);
	
	

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	РаботаСДиалогами.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	РаботаСДиалогами.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	СтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницыПанели.Продукция.Заголовок 		= "Продукция и услуги (" + ДокументОбъект.Продукция .Количество() + " поз.)";
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда, Спецификация;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьПродукция" Тогда
			ОбработкаПодбора(Продукция, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	Если мОбновлятьВладельца Тогда
		ОповеститьОЗаписиНовогоОбъекта(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НапомнитьОСобытии Тогда
	
		Если Ответственный.Пустая() Тогда

			Предупреждение("Выберите ответственное лицо, для напоминания.");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;

		Если НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Ответственный,"ИспользоватьНапоминания") Тогда

			Предупреждение("Для ответственного лица, которое вы выбрали, недоступна система напоминаний.
			               |Для пользователя " + СокрЛП(Ответственный) + " необходимо установить флажок использования напоминаний.");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если ЭтаФорма.Модифицированность И ЭтаФорма.ВладелецФормы <> Неопределено И НЕ ЭтоНовый() Тогда
		мОбновлятьВладельца = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Продукция", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Продукция".
//
Процедура КоманднаяПанельПродукцияДействиеПодбор(Кнопка)

	ДействиеПодбор(Продукция);

КонецПроцедуры // КоманднаяПанельПродукцияДействиеПодбор()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	РаботаСДиалогами.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	УстановитьДатыАнализа(Дата);
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		РаботаСДиалогами.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПРОДУКЦИЯ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Продукция".
//
Процедура ПродукцияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиПродукция, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиПродукция, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
    Если ДанныеСтроки.Срочно=Истина тогда
        ОформлениеСтроки.ЦветФона = WEBЦвета.СветлоРозовый;
    Иначе
        ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
    КонецЕсли;
КонецПроцедуры // ПродукцияПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "Продукция".
//
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти.КлючСвязи = 0;
		//СтрокаТабличнойЧасти.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство;
	КонецЕсли;
	
КонецПроцедуры // ПродукцияПриНачалеРедактирования()

// Процедура - обработчик события "ПередУдалением" табличной части Продукция.
//
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	текДанные = Элемент.ТекущиеДанные;
	Если текДанные = мТекущаяСтрокаПродукцияПараметры И мФормаВводПараметровВыпуска.Открыта() Тогда
		мФормаВводПараметровВыпуска.Закрыть();
	КонецЕсли;
КонецПроцедуры // ПродукцияПередУдалением()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Продукция".
//
Процедура ПродукцияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеОтношениямиСПоставщикамиИПокупателями.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Продукция");
	
КонецПроцедуры // ПродукцияПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Продукция".
//
Процедура ПродукцияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеОтношениямиСПоставщикамиИПокупателями.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Продукция", ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПродукцияПеретаскивание()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Продукция".
//
Процедура ПродукцияНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
	
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата);
	СтрокаТабличнойЧасти.Группа				=  СтрокаТабличнойЧасти.Номенклатура.Родитель;
	//СтрокаТабличнойЧасти.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство;
    СтрокаТабличнойЧасти.Группа=СтрокаТабличнойЧасти.Номенклатура.Родитель;

КонецПроцедуры // ПродукцияНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Продукция".
//
Процедура ПродукцияХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата);
	СтрокаТабличнойЧасти.Группа				=  СтрокаТабличнойЧасти.Номенклатура.Родитель;

КонецПроцедуры // ПродукцияХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Продукция".
//
Процедура ПродукцияЕдиницаПриИзменении(Элемент)

	// Сохраняем текущее значение коэффициента
	СтароеЗначениеКоэффициента = ЭлементыФормы.Продукция.ТекущиеДанные.Коэффициент;

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ПродукцияЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Продукция".
//
Процедура ПродукцияЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ПродукцияЕдиницаМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Продукция".
//
Процедура ПродукцияКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // ПродукцияКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Продукция".
//
Процедура ПродукцияКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ПродукцияКоличествоМестПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации
// в табличной части "Продукция".
//
Процедура ПродукцияСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ЭлементыФормы.Продукция.ТекущиеДанные.Номенклатура) Тогда
		РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.Продукция.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры // ПродукцияСпецификацияНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказа
// в табличной части "Продукция".
//
Процедура ПродукцияЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктОтбора = Новый Структура;
	СтруктОтбора.Вставить("Организация", Организация);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "Продукция");
	
КонецПроцедуры // ПродукцияЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ МАТЕРИАЛЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ
// УПРАВЛЕНИЕ ОТНОШЕНИЯМИ С КЛИЕНТАМИ

// Процедура - обработчик события "НачалоВыбора" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мЧас = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры // ВремяНапоминанияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас = 0;
	мМинута = 0;
	
КонецПроцедуры // ВремяНапоминанияОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" элемента формы (Флажка) НапомнитьОСобытии 
//
Процедура НапомнитьОСобытииПриИзменении(Элемент)

	Если НапомнитьОСобытии Тогда
		Если ВремяНапоминания = Дата("00010101000000") Тогда
			ВремяНапоминания = ТекущаяДата();
		КонецЕсли; 
	Иначе
		ВремяНапоминания = Дата("00010101000000");
	КонецЕсли; 
	
	ДоступностьНапоминаний();
	
КонецПроцедуры // НапомнитьОСобытииПриИзменении()

// Процедура - обработчик события "Нажатие" элемента формы НадписьСобытия 
//
Процедура НадписьСобытияНажатие(Элемент)

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСобытий = Документы.Событие.ПолучитьФормуСписка(, , Ссылка);
	ФормаСобытий.ДокументСписок.Отбор.Основание.Значение = Ссылка;
	ФормаСобытий.ДокументСписок.Отбор.Основание.Использование = Истина;
	ФормаСобытий.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Основание.Доступность = Ложь;
	ФормаСобытий.Открыть();
	
КонецПроцедуры // КнопкаСобытийНажатие()

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	УправлениеОтношениямиСПоставщикамиИПокупателями.ВыбратьВремяИзСписка(Элемент, ЭтаФорма, Ответственный, СтандартнаяОбработка);
	
КонецПроцедуры // ВремяНапоминанияНачалоВыбораИзСписка()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры


Процедура ПродукцияСпецификацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекДанные = ЭлементыФормы.Продукция.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		Если ВыбранноеЗначение.ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная
			И ВыбранноеЗначение.ВыходныеИзделия.Количество() > 0 Тогда
			ТекДанные.Номенклатура = ВыбранноеЗначение.ВыходныеИзделия[0].Номенклатура;
			ТекДанные.ХарактеристикаНоменклатуры = ВыбранноеЗначение.ВыходныеИзделия[0].ХарактеристикаНоменклатуры;
			ТекДанные.ЕдиницаИзмерения = ТекДанные.Номенклатура.ЕдиницаХраненияОстатков;
			//ТекДанные.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство;
			ТекДанные.Коэффициент = 1;
        КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СостояниеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Список = Новый СписокЗначений;
    Если РольДоступна("РуководителиЭкспедици") тогда    
        Список.Добавить(Перечисления.СостоянияЗаказаНаПроизводство.Заказ);
        Список.Добавить(Перечисления.СостоянияЗаказаНаПроизводство.Подготовка);
    ИначеЕсли     РольДоступна("ПолныеПрава") тогда
        Список.Добавить(Перечисления.СостоянияЗаказаНаПроизводство.Заказ);
        Список.Добавить(Перечисления.СостоянияЗаказаНаПроизводство.ВРаботе);
        Список.Добавить(Перечисления.СостоянияЗаказаНаПроизводство.Подготовка);        
        
    Иначе
        Список.Добавить(Перечисления.СостоянияЗаказаНаПроизводство.ВРаботе);
        Список.Добавить(Перечисления.СостоянияЗаказаНаПроизводство.Заказ);
    КонецЕсли;
	Элемент.СписокВыбора= Список;        
КонецПроцедуры

Процедура СостояниеПриИзменении(Элемент)
	//Если Элемент.Значение=Перечисления.СостоянияЗаказаНаПроизводство.Подготовка  И ЭтотОбъект.ПометкаУдаления=Ложь тогда
	//	ЭтотОбъект.Проведен=Ложь;
	//ИначеЕсли ( Элемент.Значение=Перечисления.СостоянияЗаказаНаПроизводство.Заказ ИЛИ 
	//	 Элемент.Значение=Перечисления.СостоянияЗаказаНаПроизводство.ВРаботе) И ЭтотОбъект.ПометкаУдаления=Ложь  тогда
	//	ЭтотОбъект.Проведен=Истина;
	//КонецЕсли;
    Если Элемент.Значение=Перечисления.СостоянияЗаказаНаПроизводство.ВРаботе тогда
        ЭтотОбъект.ДатаПринятия=ТекущаяДата();
        ЭтотОбъект.Принят=Истина;
        ЗаписьЖурналаРегистрации("Перевод статуса заказа на производство -= В Работу =-",
                                    УровеньЖурналаРегистрации.Информация, 
                                       "Документ. Заказ на производство", 
                                                       ЭтотОбъект.Ссылка, 
   "Пользователь "+глЗначениеПеременной("глТекущийПользователь")+" перевел статус заказа в сосотяние -=В Работу=-"+ ЭтотОбъект.Ссылка);
	КонецЕсли;    
    ЭтотОбъект.Комментарий=СокрЛП(ЭтотОбъект.Комментарий)+" "+"Пользователь "+глЗначениеПеременной("глТекущийПользователь")+" сосотяние "+СокрЛП(ЭтотОбъект.СостояниеЗаказа)+" "+ ТекущаяДата() +". ";
КонецПроцедуры

Процедура КоманднаяПанельПродукцияШаблонВвода(Кнопка)
	Если ЭтоНовый() тогда
		Предупреждение("Документ должен быть записан! "+Символы.ПС+" Продолжение не возможно.");
		Возврат
	КонецЕсли;
	МойДокумент= ЭтотОбъект.Ссылка;
	
	Если ЭтотОбъект.Проведен=Истина Тогда 
		Предупреждение("Проведен документ! Продолжение обработки не возможно!",5);
		Возврат;
	КонецЕсли;		
	ЭтотОбъект.Записать();
	
	ШаблонВвода = Обработки.ШаблонВводаЗаказаНаПроизводство.Создать();
	ШаблонВвода.МойДокумент			  = МойДокумент;
	ШаблонВвода.ДатаИсполнения		  = ЭтотОбъект.ДатаИсполнения;
	ШаблонВвода.Дата				  = ЭтотОбъект.Дата;
	ШаблонВвода.Склад				  = Справочники.Склады.НайтиПоКоду("000000001");
	ШаблонВвода.ДатаНачАнализаОтгрузкиПокупателям= ЭтотОбъект.ДатаНачАнализаОтгрузкиПокупателям;
	ШаблонВвода.ДатаКонАнализаОтгрузкиПокупателям= ЭтотОбъект.ДатаКонАнализаОтгрузкиПокупателям;
	ШаблонВвода.ДатаОсадки	 	= ДатаОсадки;
	ШаблонВвода.ДатаПродажОсадкиНач		=	ДатаПродажОсадкиНач;
	ШаблонВвода.ДатаПродажОсадкиКон		=	ДатаПродажОсадкиКон;
	ШаблонВвода.ДатаBремяИнвентаризации					=	ДатаBремяИнвентаризации;
	ШаблонВвода.ДатаНачАнализаЗаказов	=ДатаНачАнализаЗаказов;
	ШаблонВвода.ДатаКонАнализаЗаказов	=ДатаКонАнализаЗаказов;
	ШаблонВвода.МожноРедактировать		= Истина;
	ШВ=ШаблонВвода.ПолучитьФорму("Форма");
	МояТЗ=ШВ.ОткрытьМодально();
	
	Если МояТЗ=неопределено тогда
		возврат;
	КонецЕсли;
	
	Если ТипЗнч(МояТЗ.ОбщаяТЗ) = Тип("ТаблицаЗначений") Тогда
		Продукция.Очистить();
		Шаг=0;
		Пока Шаг<МояТЗ.ОбщаяТЗ.Количество() Цикл
			МояСтр=Продукция.Добавить();
			МояСтр.Номенклатура	=МояТЗ.ОбщаяТЗ[Шаг].Номенклатура;
			МояСтр.Группа		=МояТЗ.ОбщаяТЗ[Шаг].Номенклатура.Родитель;
			МояСтр.Количество	=МояТЗ.ОбщаяТЗ[Шаг].Количество;
			МояСтр.КоличествоПроизводства=МояТЗ.ОбщаяТЗ[Шаг].Количество;
			//МояСтр.Осадка		=МояТЗ.ОбщаяТЗ[Шаг].Осадка_план;
			МояСтр.Осадка		=МояТЗ.ОбщаяТЗ[Шаг].Осадка;
			МояСтр.Комментарий	=МояТЗ.ОбщаяТЗ[Шаг].Комментарий;
			МояСтр.ЕдиницаИзмерения=МояТЗ.ОбщаяТЗ[Шаг].Номенклатура.ЕдиницаХраненияОстатков;
			МояСтр.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			МояСтр.Коэффициент	=1;
			Шаг=Шаг+1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьВидимостьРМК()
	
    ЭлементыФормы.Продукция.Колонки.Единица.Видимость=Ложь;
	ЭлементыФормы.Продукция.Колонки.КоличествоМест.Видимость=Ложь;
	ЭлементыФормы.Продукция.Колонки.КоэффициентМест.Видимость=Ложь;
	ЭлементыФормы.Продукция.Колонки.Коэффициент.Видимость=Ложь;
	ЭлементыФормы.Продукция.Колонки.ХарактеристикаНоменклатуры.Видимость=Ложь;
	ЭлементыФормы.Продукция.Колонки.Спецификация.Видимость=Ложь;
	ЭлементыФормы.Продукция.Колонки.Заказ.Видимость=Ложь;

	Если РольДоступна("РуководителиЭкспедици") тогда
		ЭлементыФормы.Продукция.Колонки.КоличествоПроизводства.ТолькоПросмотр=Истина;
	КонецЕсли;	
	Если РольДоступна("Спецификации") тогда
		ЭлементыФормы.Продукция.Колонки.Срочно.ТолькоПросмотр		=Истина;
		ЭлементыФормы.Продукция.Колонки.Номенклатура.ТолькоПросмотр	=Истина;
		ЭлементыФормы.Продукция.Колонки.Количество.ТолькоПросмотр	=Истина;
		ЭлементыФормы.Продукция.Колонки.Срочно.ТолькоПросмотр		=Истина;
		ЭлементыФормы.Продукция.Колонки.Комментарий.ТолькоПросмотр	=Истина;
	КонецЕсли;	
КонецПроцедуры

Процедура УстановитьДатыАнализа(Дата)
	
	//*** для групп клиентов
	
	СмещениеДляОсадки= новый  Соответствие; // для  всех остальных 1
	СмещениеДляОсадки.Вставить(Перечисления.ДниНедели.Четверг,3);// для четверга прогноз 3
	СмещениеДляОсадки.Вставить(Перечисления.ДниНедели.Суббота,2);// для субботы прогноз 1
	
	ПериодыДляЗаданияНаПроизваодство = новый  Соответствие; // для  всех остальных 1
	ПериодыДляЗаданияНаПроизваодство.Вставить(Перечисления.ДниНедели.Четверг,2);// для четверга прогноз 2
	ПериодыДляЗаданияНаПроизваодство.Вставить(Перечисления.ДниНедели.Суббота,2);// для субботы прогноз 2
	
	ПериодыДляАнализаЗаказовПокупателей = новый  Соответствие; // для  всех остальных 1
	ПериодыДляАнализаЗаказовПокупателей.Вставить(Перечисления.ДниНедели.Четверг,3);// для четверга 3
	ПериодыДляАнализаЗаказовПокупателей.Вставить(Перечисления.ДниНедели.Суббота,2);// для субботы прогноз 2
	
	
   	СмещениеОсадки=СмещениеДляОсадки.Получить(Перечисления.ДниНедели[ДеньНедели(Дата)-1]);
	Если СмещениеОсадки = неопределено тогда
		 СмещениеОсадки=1;
	КонецЕсли;	
	 
	СмещениеЗаданияНаПроизводство=ПериодыДляЗаданияНаПроизваодство.Получить(Перечисления.ДниНедели[ДеньНедели(Дата)-1]);
	Если СмещениеЗаданияНаПроизводство=неопределено тогда
		 СмещениеЗаданияНаПроизводство=1;
	КонецЕсли;	
	 
	ПериодАнализаЗаказовПокупателей =ПериодыДляАнализаЗаказовПокупателей.Получить(Перечисления.ДниНедели[ДеньНедели(Дата)-1]);
	Если ПериодАнализаЗаказовПокупателей =неопределено тогда
		 ПериодАнализаЗаказовПокупателей=1;
	КонецЕсли;	
	
	ДатаИсполнения=НачалоДня(Дата)+СмещениеЗаданияНаПроизводство*24*3600;	 
	
	ДатаНачАнализаОтгрузкиПокупателям=КонецДня(Дата)+1-7*24*3600;
	ДатаКонАнализаОтгрузкиПокупателям=ДатаНачАнализаОтгрузкиПокупателям+ПериодАнализаЗаказовПокупателей*24*3600-1;
	
	ДатаНачАнализаЗаказов=КонецДня(Дата)+1;
	ДатаКонАнализаЗаказов=ДатаНачАнализаЗаказов+ПериодАнализаЗаказовПокупателей*24*3600-1;
	
	ДатаОсадки	=НачалоДня(Дата)+СмещениеОсадки*24*3600;
	ДатаПродажОсадкиНач=НачалоДня(ДатаОсадки-7*24*3600);
	ДатаПродажОсадкиКон=КонецДня(ДатаПродажОсадкиНач+ПериодАнализаЗаказовПокупателей*24*3600-1);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мЧас    = 0;
мМинута = 0;

мОбновлятьВладельца    = Ложь;
мКолонкиПродукция 		= ЭлементыФормы.Продукция.Колонки;

