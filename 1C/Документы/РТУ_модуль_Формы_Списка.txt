//  Процедура печатает выбранный документ 
// Печатается та форма, которая была отпечатана при нажатии в документе кнопки
// печати по умолчанию
//
Процедура ДействияФормыДействиеПечать(Кнопка)

	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокументИзФормыСписка(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);

КонецПроцедуры // ДействиеПечать()


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;

	РаботаСДиалогами.НапечататьДвиженияДокумента(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура открывате журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	БухгалтерскийУчет.ОткрытьЖурналПроводок(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);

КонецПроцедуры

// Обработчик события "Нажатие" кнопки "ОформитьДокументы" в верхней командной панели.
//
Процедура ДействияФормыОформитьДокументы(Кнопка)

	ТекущаяСтрока = ЭлементыФормы.ДокументСписок.ТекущиеДанные;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;

	ТекущийОбъект = ТекущаяСтрока.Ссылка.ПолучитьОбъект();
	ФормаФормированияПакетаДокументов = ТекущийОбъект.ПолучитьФорму("ФормаФормированияПакетаДокументов", ЭтаФорма);
	ФормаФормированияПакетаДокументов.Реализация = ТекущийОбъект;
	ФормаФормированияПакетаДокументов.Открыть();

КонецПроцедуры // ДействияФормыОформитьДокументы()

// Процедура вызывается при нажатии кнопки "ВыгрузитьВФорматеCommerceMLФайлПанель"
// подменю "ВыгрузитьВФорматеCommerceMLПанель" командной панели формы
//
Процедура ДействияФормыВыгрузитьВФорматеCommerceMLФайлПанель(Кнопка)
	
	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеДокументов.ВыгрузитьДокументВФайлCommerceML(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);
    	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ВыгрузитьВФорматеCommerceMLЭлПочтаПанель"
// подменю "ВыгрузитьВФорматеCommerceMLПанель" командной панели формы
//
Процедура ДействияФормыВыгрузитьВФорматеCommerceMLЭлПочтаПанель(Кнопка)
	
	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеДокументов.ОтправитьДокументПоПочтеCommerceML(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);

КонецПроцедуры
//***
Процедура ЗаказСоздать(Кнопка)
	ТС = ЭлементыФормы.ДокументСписок.ТекущаяСтрока;
	Если ТС=неопределено или ТС.Ссылка.Проведен или ТС.Ссылка.ПометкаУдаления или ТС.Ссылка.ИтогоКоличествоТовара>0 тогда
		возврат;
	КонецЕсли;
	ТекДок=ТС.Ссылка.ПолучитьОбъект();
	Документы.РеализацияТоваровУслуг.СоздатьЗаказ(ТекДок);
КонецПроцедуры

Процедура ДействияФормыОсобоеПроведение(Кнопка)
	ПодготовкаОдногоПроведения();
КонецПроцедуры

Процедура ПодготовкаОдногоПроведения()
	Если ЭлементыФормы.ДокументСписок.ТекущаяСтрока=неопределено Тогда
	   возврат;
	КонецЕсли; 
	
	ТекущаяСтрока = ЭлементыФормы.ДокументСписок.ТекущиеДанные;
	РН = ТекущаяСтрока.Ссылка.ПолучитьОбъект();
	Удаленный=0;
	Следующий=0;
	Если РН.СуммаДокумента>0 тогда
		СтруктураОтбора = Новый Структура("Количество", 0);
		ПодходящиеСтроки = РН.Товары.НайтиСтроки(СтруктураОтбора);
		Для Каждого ОчереднаяСтрока Из ПодходящиеСтроки Цикл
			РН.Товары.Удалить(ОчереднаяСтрока);
			Удаленный=Удаленный+1;
		КонецЦикла;	
		РН.Закрыто=Истина;
		РН.ЭтапОтгрузки=Перечисления.ЭтапыОтгрузки.Проведено;
		Если РН.Заблокирован() тогда
			РН.Разблокировать();
			РН.Записать(РежимЗаписиДокумента.Запись);	
		Иначе
			РН.Записать(РежимЗаписиДокумента.Проведение);	
		КонецЕсли;
	  КонецЕсли;
Предупреждение(" Удалено "+Удаленный+" строк.", 10);
КонецПроцедуры

Процедура ДействияФормыПечатьКомплекта(Кнопка)
	
	Если ЭтаФорма.ЭлементыФормы.ДокументСписок.ТекущаяСтрока = Неопределено тогда
		Возврат
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.ДокументСписок.ТекущиеДанные;
	МойДокумент = ТекущаяСтрока.Ссылка.ПолучитьОбъект();                 
	МойДокумент.ПечатьКомплектаНакладных(МойДокумент);
	//ВсегоКПечати=МойДокумент.Контрагент.КоличествоЭкземпляровРасходныхНакладных;
	//			 
	//Если ВсегоКПечати=0 тогда
	//	КоличествоЭкземпляровРасходных=1;
	//ИНАЧЕ 
	//	КоличествоЭкземпляровРасходных		=	МойДокумент.Контрагент.КоличествоЭкземпляровРасходныхНакладных;
	//КонецЕсли;
	//
	//Если КоличествоЭкземпляровРасходных<>0 тогда
	//	ДокументПечати =МойДокумент.ПечатьДокумента();
	//	УниверсальныеМеханизмы.НапечататьДокумент(ДокументПечати, КоличествоЭкземпляровРасходных, Истина);
	//КонецЕсли;
	//Для каждого стр из МойДокумент.Контрагент.КлиентыПечатиРасходныхНакладных Цикл
	//	ДокументПечати =МойДокумент.ПечатьНакладной(стр.Продавец,стр.Покупатель,стр.ТипЦены);
	//	УниверсальныеМеханизмы.НапечататьДокумент(ДокументПечати, стр.Количество, Истина);
	//КонецЦикла; 
	
КонецПроцедуры

//***

//ВСТАВКА РЕЗОНАНС
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

Процедура Р_ПриОткрытии()

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);
	
КонецПроцедуры

Процедура Р_ПриЗакрытии()
	
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);
	
КонецПроцедуры

Процедура Р_ВнешнееСобытие(Источник, Событие, Данные)
	
	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Событие, Данные, ЭтаФорма);

КонецПроцедуры

Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ПО РеализацияТоваровУслуг.Сделка = ЗаказПокупателя.Ссылка
	|	 И РеализацияТоваровУслуг.Контрагент = ЗаказПокупателя.Контрагент
	|	 И РеализацияТоваровУслуг.Р_РежимТалоны
	|ГДЕ
	|	ЗаказПокупателя.Р_НомерЗаказаПОС = &НомерЗаказаПОС";
	Запрос.УстановитьПараметр("НомерЗаказаПОС", СШК);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЭлементыФормы.ДокументСписок.ТекущаяСтрока = Выборка.Ссылка;
	Иначе
		Предупреждение("Не найден док. реализация талонов по заказу с № на POS " + СШК, 5);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ЭлементыФормы.ДействияФормы.Кнопки.ДатаОтгрузки.Доступность=РольДоступна("ОтделСбыта");
	ЭлементыФормы.ДействияФормы.Кнопки.ОсобоеПроведение.Доступность=РольДоступна("ОтделСбыта");
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.КапироватьВЗаказ.Доступность=РольДоступна("ОтделСбыта");
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ОсобоеПроведение.Доступность=РольДоступна("ОтделСбыта");
	Если РольДоступна("ОтделСбыта") тогда
		ЧастьДаты = ЧастиДаты.Дата;
		ТекДата=КонецДня(ТекущаяДата())+1;
		Если ВвестиДату(ТекДата, "Введите дату отгрузки", ЧастьДаты) тогда
			ПараметрыСеанса.ДатаДокументаОтгрузки=ТекДата;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Процедура ДействияФормыДатаОтгрузки(Кнопка)
	Если РольДоступна("ОтделСбыта") тогда
		ЧастьДаты = ЧастиДаты.Дата;
		ТекДата=КонецДня(ТекущаяДата())+1;
		Если ВвестиДату(ТекДата, "Введите дату отгрузки", ЧастьДаты) тогда
			ПараметрыСеанса.ДатаДокументаОтгрузки=ТекДата;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Процедура ДокументСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	//***170212
    Для Каждого строка из  ОформленияСтрок Цикл
        Если строка.ДанныеСтроки.ЕстьУпаковка Тогда
            строка.ЦветФона = WebЦвета.СветлоСерый;
        Иначе
            строка.ЦветФона = WebЦвета.Белый;
		КонецЕсли;
    КонецЦикла;
	
КонецПроцедуры

Если РольДоступна("Р_Обмен_ПОС") Тогда
	ЭтаФорма.УстановитьДействие("ПриОткрытии", Новый Действие("Р_ПриОткрытии"));
	ЭтаФорма.УстановитьДействие("ПриЗакрытии", Новый Действие("Р_ПриЗакрытии"));
	ЭтаФорма.УстановитьДействие("ВнешнееСобытие", Новый Действие("Р_ВнешнееСобытие"));
КонецЕсли

//КОНЕЦ ВСТАВКИ
