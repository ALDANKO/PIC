Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;
Перем мЕстьКолонкаСерии Экспорт;
Перем мСтруктураПараметровВзаиморасчетов Экспорт;
Перем мУказаниеСкладов;
Перем мУдалятьДвижения;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;
Перем мУчетнаяПолитика;
Перем мРассчитыватьАвтоматическиеСкидки;
Перем ВестиУчетПоДопРазрезамРегл;
Перем ВестиСкладскойУчетБУ;

Перем КурсЗачетаАвансаРегл;
Перем СоответствиеКурсовЗачетаАвансаЗаказам;

Перем мСтруктураПараметровДляПолученияДоговора Экспорт;
Перем мУказаниеСкладовВТЧ Экспорт;

//ВСТАВКА РЕЗОНАНС
Перем мВидОсновногоКоличественногоУчетаГСМ Экспорт;
Перем мРежимВедомостиТалоныКарточки;
Перем мРежимОбменаТалонов;
//КОНЕЦ ВСТАВКИ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
//НакладнаяШтрихкод
Функция ПечатьДокумента(ШтрихКод=Ложь) Экспорт

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
    |	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
//	|	Ответственный.ФизЛицо.Наименование КАК Отпустил,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|   ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	Получил,
	|	ПолучилПоДругомуДокументу,
	|	ДокументПодтверждающийПолномочия, 
	|	АдресДоставки,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   2,
	|   РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаЦены,
	|	NULL,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки,
	|	ПроцентАвтоматическихСкидок,
	|	NULL,
	|	NULL
	|	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки						КАК НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))  КАК Товар,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаЦены,	
	|	Цена,
	|	Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	Если ШтрихКод тогда
		Макет = ПолучитьМакет("НакладнаяШтрихкод");
	Иначе
		Макет = ПолучитьМакет("Накладная");
	КонецЕсли;
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку нкладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	Если ШтрихКод тогда
		//***ШК
		ОбластьМакета.Рисунки.D1.ГраницаСверху    =   Ложь;
		ОбластьМакета.Рисунки.D1.ГраницаСнизу     =   Ложь;
		ОбластьМакета.Рисунки.D1.ГраницаСправа    =   Ложь;
		ОбластьМакета.Рисунки.D1.ГраницаСлева     =   Ложь;
		ОбластьМакета.Рисунки.D1.Объект.ТипКода   =   1;
		ОбластьМакета.Рисунки.D1.Объект.ОтображатьТекст=Ложь;
		СтрШК=Формат(Число(ЭтотОбъект.Номер),"ЧЦ=6; ЧДЦ=0; ЧВН=; ЧГ=0")+""+Формат(ЭтотОбъект.Дата,"ДФ=yyMMdd");
		ШтрихКод=ДополнительныеФункции.ПолучитьКонтрольноеЧислоШК13(СтрШК);
		ОбластьМакета.Рисунки.D1.Объект.Сообщение =  ШтрихКод;
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	СписокДополнительныхПараметров = СписокДополнительныхПараметров + "АдресДоставки,";
	
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = ЗапросТовары.Итог("Скидка") + ЗапросТовары.Итог("АвтоматическаяСкидка") <> 0;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Если Товары.Итог("КоличествоМест") > 0 Тогда
		ОбластьШапки  = ОбластьШапки  + "Мест";
		ОбластьСтроки = ОбластьСтроки + "Мест";
	Конецесли;
	
	Если ЕстьСкидки Тогда
		ОбластьШапки  = ОбластьШапки  + "Скидка";
		ОбластьСтроки = ОбластьСтроки + "Скидка";
	КонецЕсли; 
	
	// Вывести табличную часть (товары и услуги)
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;
	
	
	Суффикс = "";
	//Если Шапка.УчитыватьНДС Тогда
	//	Если Шапка.СуммаВключаетНДС Тогда
	//		Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
	//	Иначе	
	//		Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
	//	КонецЕсли;
	//	Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	//КонецЕсли;
	ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		// Скидка может быть NULL
		ПроцентСкидки = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка),0,ВыборкаСтрокТовары.Скидка) 
		              + ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка),0,ВыборкаСтрокТовары.АвтоматическаяСкидка);

		Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ПроцентСкидки);

		Если ЕстьСкидки Тогда
			ОбластьМакета.Параметры.Скидка         = Скидка;
			ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок 	+ Скидка;
		ВсегоБезСкидок = Сумма + ВсегоСкидок;

	КонецЦикла;

	ОбластьИтого = "Итого";
	Если ЕстьСкидки Тогда
		ОбластьИтого  = ОбластьИтого + "Скидка";
	КонецЕсли; 
	
	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть(ОбластьИтого);
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	Если ЕстьСкидки Тогда
		ОбластьМакета.Параметры.ВсегоБезСкидок	= ОбщегоНазначения.ФорматСумм(ВсегоБезСкидок);
		ОбластьМакета.Параметры.ВсегоСкидок		= ОбщегоНазначения.ФорматСумм(ВсегоСкидок);
	КонецЕсли; 

	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	//Если Шапка.УчитыватьНДС Тогда
	//	// НДС
	//	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	//	ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС,,"''");
	//	ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
	//	ТабДокумент.Вывести(ОбластьМакета);

	//	// всего с НДС (если сумма не включает НДС)
	//	Если НЕ Шапка.СуммаВключаетНДС Тогда
	//		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	//		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
	//		ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
	//		ТабДокумент.Вывести(ОбластьМакета);
	//	КонецЕсли;
	//КонецЕсли;
	
	// Вывести таблицу с возвратной тарой
	ОбластьШапки  = СтрЗаменить(ОбластьШапки,"Мест","");
	ОбластьСтроки = СтрЗаменить(ОбластьСтроки,"Мест","");
	ОбластьШапки  = СтрЗаменить(ОбластьШапки,"Скидка","")+"Тара";
	ОбластьСтроки = СтрЗаменить(ОбластьСтроки,"Скидка","")+"Тара";
	
	Если ЗапросТара.Количество() > 0 Тогда
		
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		СуммаТара    = 0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
		
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьМакета.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТара.Номенклатура);

			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТара.КодАртикул;
			КонецЕсли;

			ТабДокумент.Вывести(ОбластьМакета);

			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
		
		КонецЦикла; 
		
		// Вывести Итого
		ОбластьИтого = "ИтогоТара";
		ОбластьМакета                 = Макет.ПолучитьОбласть(ОбластьИтого);
		ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаТара);
		ТабДокумент.Вывести(ОбластьМакета);		
		
		// сделаем отступ
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
											 
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Вывести подписи
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ПолучилПоДругомуДокументу Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДругомуДокументу");
	Иначе			
		ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДоверенности");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
//НакладнаяШтрихкод
Функция ПечатьДокументаСоСкидкой(ШтрихКод=Ложь) Экспорт
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
    |	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
//	|	Ответственный.ФизЛицо.Наименование КАК Отпустил,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|   ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	Получил,
	|	ПолучилПоДругомуДокументу,
	|	ДокументПодтверждающийПолномочия, 
	|	АдресДоставки,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   2,
	|   РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаЦены,
	|	NULL,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки,
	|	ПроцентАвтоматическихСкидок,
	|	NULL,
	|	NULL
	|	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки						КАК НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))  КАК Товар,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаЦены,	
	|	Цена,
	|	Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	Если ШтрихКод тогда
		Макет = ПолучитьМакет("НакладнаяШтрихкод");
	Иначе
		Макет = ПолучитьМакет("Накладная");
	КонецЕсли;
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку нкладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	Если ШтрихКод тогда
		//***ШК
		ОбластьМакета.Рисунки.D1.ГраницаСверху    =   Ложь;
		ОбластьМакета.Рисунки.D1.ГраницаСнизу     =   Ложь;
		ОбластьМакета.Рисунки.D1.ГраницаСправа    =   Ложь;
		ОбластьМакета.Рисунки.D1.ГраницаСлева     =   Ложь;
		ОбластьМакета.Рисунки.D1.Объект.ТипКода   =   1;
		ОбластьМакета.Рисунки.D1.Объект.ОтображатьТекст=Ложь;
		СтрШК=Формат(Число(ЭтотОбъект.Номер),"ЧЦ=6; ЧДЦ=0; ЧВН=; ЧГ=0")+""+Формат(ЭтотОбъект.Дата,"ДФ=yyMMdd");
		ШтрихКод=ДополнительныеФункции.ПолучитьКонтрольноеЧислоШК13(СтрШК);
		ОбластьМакета.Рисунки.D1.Объект.Сообщение =  ШтрихКод;
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	СписокДополнительныхПараметров = СписокДополнительныхПараметров + "АдресДоставки,";
	
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = ЗапросТовары.Итог("Скидка") + ЗапросТовары.Итог("АвтоматическаяСкидка") <> 0;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Если Товары.Итог("КоличествоМест") > 0 Тогда
		ОбластьШапки  = ОбластьШапки  + "Мест";
		ОбластьСтроки = ОбластьСтроки + "Мест";
	Конецесли;
	
	Если ЕстьСкидки Тогда
		ОбластьШапки  = ОбластьШапки  + "Скидка";
		ОбластьСтроки = ОбластьСтроки + "Скидка";
	КонецЕсли; 
	
	// Вывести табличную часть (товары и услуги)
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;
	
	
	Суффикс = "";
	//Если Шапка.УчитыватьНДС Тогда
	//	Если Шапка.СуммаВключаетНДС Тогда
	//		Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
	//	Иначе	
	//		Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
	//	КонецЕсли;
	//	Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	//КонецЕсли;
	ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	Сумма    = 0;
	СуммаПИК = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		// Скидка может быть NULL
		ПроцентСкидки = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка),0,ВыборкаСтрокТовары.Скидка) 
		              + ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка),0,ВыборкаСтрокТовары.АвтоматическаяСкидка);

		Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ПроцентСкидки);

		Если  ЕстьСкидки Тогда
			ОбластьМакета.Параметры.Скидка         = Скидка;
			ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
		КонецЕсли;
		ЦенаЕП=Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаСтрокТовары.Номенклатура,ВыборкаСтрокТовары.Характеристика,Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"),ЭтотОбъект.Дата);
		ОбластьМакета.Параметры.Цена = Формат(ЦенаЕП,"ЧДЦ=2");
		ОбластьМакета.Параметры.Сумма=Формат(ЦенаЕП*ВыборкаСтрокТовары.Количество,"ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьМакета);
		СуммаПИК = СуммаПИК+ ВыборкаСтрокТовары.Сумма ;
		Сумма    = Сумма    + ЦенаЕП*ВыборкаСтрокТовары.Количество;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок 	+ Скидка;
		ВсегоБезСкидок = Сумма + ВсегоСкидок;

	КонецЦикла;

	ОбластьИтого = "Итого";
	Если ЕстьСкидки Тогда
		ОбластьИтого  = ОбластьИтого + "Скидка";
	КонецЕсли; 
	
	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть(ОбластьИтого);
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	Если ЕстьСкидки Тогда
		ОбластьМакета.Параметры.ВсегоБезСкидок	= ОбщегоНазначения.ФорматСумм(ВсегоБезСкидок);
		ОбластьМакета.Параметры.ВсегоСкидок		= ОбщегоНазначения.ФорматСумм(ВсегоСкидок);
	КонецЕсли; 

	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ВсегоКОплате");
	ОбластьМакета.Параметры.ВсегоКОплате=Формат(СуммаПИК,"ЧДЦ=2");
	ТабДокумент.Вывести(ОбластьМакета);
	

	// Вывести ИтогоНДС
	//Если Шапка.УчитыватьНДС Тогда
	//	// НДС
	//	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	//	ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС,,"''");
	//	ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
	//	ТабДокумент.Вывести(ОбластьМакета);

	//	// всего с НДС (если сумма не включает НДС)
	//	Если НЕ Шапка.СуммаВключаетНДС Тогда
	//		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	//		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
	//		ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
	//		ТабДокумент.Вывести(ОбластьМакета);
	//	КонецЕсли;
	//КонецЕсли;
	
	// Вывести таблицу с возвратной тарой
	ОбластьШапки  = СтрЗаменить(ОбластьШапки,"Мест","");
	ОбластьСтроки = СтрЗаменить(ОбластьСтроки,"Мест","");
	ОбластьШапки  = СтрЗаменить(ОбластьШапки,"Скидка","")+"Тара";
	ОбластьСтроки = СтрЗаменить(ОбластьСтроки,"Скидка","")+"Тара";
	
	Если ЗапросТара.Количество() > 0 Тогда
		
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		СуммаТара    = 0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
		
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьМакета.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТара.Номенклатура);

			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТара.КодАртикул;
			КонецЕсли;

			ТабДокумент.Вывести(ОбластьМакета);

			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
		
		КонецЦикла; 
		
		// Вывести Итого
		ОбластьИтого = "ИтогоТара";
		ОбластьМакета                 = Макет.ПолучитьОбласть(ОбластьИтого);
		ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаТара);
		ТабДокумент.Вывести(ОбластьМакета);		
		
		// сделаем отступ
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	//СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	СуммаКПрописи = СуммаПИК;
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
											 
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Вывести подписи
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ПолучилПоДругомуДокументу Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДругомуДокументу");
	Иначе			
		ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДоверенности");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

Функция НакладнаяШтрихкод() Экспорт

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
    |	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
//	|	Ответственный.ФизЛицо.Наименование КАК Отпустил,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|   ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	Получил,
	|	ПолучилПоДругомуДокументу,
	|	ДокументПодтверждающийПолномочия, 
	|	АдресДоставки,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   2,
	|   РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаЦены,
	|	NULL,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки,
	|	ПроцентАвтоматическихСкидок,
	|	NULL,
	|	NULL
	|	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки						КАК НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))  КАК Товар,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаЦены,	
	|	Цена,
	|	Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";

	Макет = ПолучитьМакет("НакладнаяШтрихкод");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку нкладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	
	//***ШК
	ОбластьМакета.Рисунки.D1.ГраницаСверху    =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСнизу     =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСправа    =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСлева     =   Ложь;
	ОбластьМакета.Рисунки.D1.Объект.ТипКода    =   1;
	СтрШК=Формат(Число(ЭтотОбъект.Номер),"ЧЦ=6; ЧДЦ=0; ЧВН=; ЧГ=0")+""+Формат(ЭтотОбъект.Дата,"ДФ=yyMMdd");
	ШтрихКод=ДополнительныеФункции.ПолучитьКонтрольноеЧислоШК13(СтрШК);
	ОбластьМакета.Рисунки.D1.Объект.Сообщение =  ШтрихКод;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	СписокДополнительныхПараметров = СписокДополнительныхПараметров + "АдресДоставки,";
	
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = ЗапросТовары.Итог("Скидка") + ЗапросТовары.Итог("АвтоматическаяСкидка") <> 0;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Если Товары.Итог("КоличествоМест") > 0 Тогда
		ОбластьШапки  = ОбластьШапки  + "Мест";
		ОбластьСтроки = ОбластьСтроки + "Мест";
	Конецесли;
	
	Если ЕстьСкидки Тогда
		ОбластьШапки  = ОбластьШапки  + "Скидка";
		ОбластьСтроки = ОбластьСтроки + "Скидка";
	КонецЕсли; 
	
	// Вывести табличную часть (товары и услуги)
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;
	
	
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		// Скидка может быть NULL
		ПроцентСкидки = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка),0,ВыборкаСтрокТовары.Скидка) 
		              + ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка),0,ВыборкаСтрокТовары.АвтоматическаяСкидка);

		Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ПроцентСкидки);

		Если ЕстьСкидки Тогда
			ОбластьМакета.Параметры.Скидка         = Скидка;
			ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок 	+ Скидка;
		ВсегоБезСкидок = Сумма + ВсегоСкидок;

	КонецЦикла;

	ОбластьИтого = "Итого";
	Если ЕстьСкидки Тогда
		ОбластьИтого  = ОбластьИтого + "Скидка";
	КонецЕсли; 
	
	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть(ОбластьИтого);
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	Если ЕстьСкидки Тогда
		ОбластьМакета.Параметры.ВсегоБезСкидок	= ОбщегоНазначения.ФорматСумм(ВсегоБезСкидок);
		ОбластьМакета.Параметры.ВсегоСкидок		= ОбщегоНазначения.ФорматСумм(ВсегоСкидок);
	КонецЕсли; 

	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		// НДС
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС,,"''");
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Вывести(ОбластьМакета);

		// всего с НДС (если сумма не включает НДС)
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	КонецЕсли;
	
	// Вывести таблицу с возвратной тарой
	ОбластьШапки  = СтрЗаменить(ОбластьШапки,"Мест","");
	ОбластьСтроки = СтрЗаменить(ОбластьСтроки,"Мест","");
	ОбластьШапки  = СтрЗаменить(ОбластьШапки,"Скидка","")+"Тара";
	ОбластьСтроки = СтрЗаменить(ОбластьСтроки,"Скидка","")+"Тара";
	
	Если ЗапросТара.Количество() > 0 Тогда
		
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		СуммаТара    = 0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
		
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьМакета.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТара.Номенклатура);

			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТара.КодАртикул;
			КонецЕсли;

			ТабДокумент.Вывести(ОбластьМакета);

			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
		
		КонецЦикла; 
		
		// Вывести Итого
		ОбластьИтого = "ИтогоТара";
		ОбластьМакета                 = Макет.ПолучитьОбласть(ОбластьИтого);
		ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаТара);
		ТабДокумент.Вывести(ОбластьМакета);		
		
		// сделаем отступ
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
											 
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Вывести подписи
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ПолучилПоДругомуДокументу Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДругомуДокументу");
	Иначе			
		ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДоверенности");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьНакладной(Продавец,Покупатель,ТипЦены) Экспорт

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
    |	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
//	|	Ответственный.ФизЛицо.Наименование КАК Отпустил,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|   ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	Получил,
	|	ПолучилПоДругомуДокументу,
	|	ДокументПодтверждающийПолномочия, 
	|	АдресДоставки,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   2,
	|   РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаЦены,
	|	NULL,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки,
	|	ПроцентАвтоматическихСкидок,
	|	NULL,
	|	NULL
	|	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки						КАК НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))  КАК Товар,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаЦены,	
	|	Цена,
	|	Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку нкладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(?(ЗначениеЗаполнено(Продавец),Продавец,Шапка.Поставщик), Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(?(ЗначениеЗаполнено(Покупатель),Покупатель,Шапка.Покупатель), Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	Если не ЗначениеЗаполнено(Продавец) или Продавец=Справочники.Контрагенты.ПустаяСсылка() тогда
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПоставщика = Продавец.НаименованиеПолное;
		ОбластьМакета.Параметры.РеквизитыПоставщика = "";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	Если не ЗначениеЗаполнено(Покупатель) тогда
		ОбластьМакета.Параметры.Заполнить(Шапка);	
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПокупателя =Покупатель.НаименованиеПолное;
		ОбластьМакета.Параметры.РеквизитыПокупателя		= "";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	СписокДополнительныхПараметров = СписокДополнительныхПараметров + "АдресДоставки,";
	
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = ЗапросТовары.Итог("Скидка") + ЗапросТовары.Итог("АвтоматическаяСкидка") <> 0;
    ЕстьСкидки=Ложь;
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Если Товары.Итог("КоличествоМест") > 0 Тогда
		ОбластьШапки  = ОбластьШапки  + "Мест";
		ОбластьСтроки = ОбластьСтроки + "Мест";
	Конецесли;
	
	Если ЕстьСкидки Тогда
		ОбластьШапки  = ОбластьШапки  + "Скидка";
		ОбластьСтроки = ОбластьСтроки + "Скидка";
	КонецЕсли; 
	
	// Вывести табличную часть (товары и услуги)
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;
	
	
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		СтрХарактеристика="";
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Характеристика) Тогда
		     СтрХарактеристика="  ("+СокрЛП(СтрХарактеристика)+")";
		КонецЕсли; 
		
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар)+ СтрХарактеристика;

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		// Скидка может быть NULL
		ПроцентСкидки = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка),0,ВыборкаСтрокТовары.Скидка) 
		              + ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка),0,ВыборкаСтрокТовары.АвтоматическаяСкидка);

		Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ПроцентСкидки);

		Если ЕстьСкидки Тогда
			ОбластьМакета.Параметры.Скидка         = Скидка;
			ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
		КонецЕсли;
		ЦенаПечати=Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаСтрокТовары.Номенклатура,
		ВыборкаСтрокТовары.Характеристика,ТипЦены, ЭтотОбъект.Дата);
		    ОбластьМакета.Параметры.Цена=ЦенаПечати;
			ОбластьМакета.Параметры.Сумма=ЦенаПечати*ВыборкаСтрокТовары.Количество;
		
		
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ЦенаПечати*ВыборкаСтрокТовары.Количество;
		СуммаНДС = СуммаНДС + 0;
		ВсегоСкидок    = ВсегоСкидок 	+ Скидка;
		ВсегоБезСкидок = Сумма + ВсегоСкидок;

	КонецЦикла;

	ОбластьИтого = "Итого";
	Если ЕстьСкидки Тогда
		ОбластьИтого  = ОбластьИтого + "Скидка";
	КонецЕсли; 
	
	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть(ОбластьИтого);
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	Если ЕстьСкидки Тогда
		ОбластьМакета.Параметры.ВсегоБезСкидок	= ОбщегоНазначения.ФорматСумм(ВсегоБезСкидок);
		ОбластьМакета.Параметры.ВсегоСкидок		= ОбщегоНазначения.ФорматСумм(ВсегоСкидок);
	КонецЕсли; 

	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		// НДС
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС,,"''");
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Вывести(ОбластьМакета);

		// всего с НДС (если сумма не включает НДС)
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	КонецЕсли;
	
	// Вывести таблицу с возвратной тарой
	ОбластьШапки  = СтрЗаменить(ОбластьШапки,"Мест","");
	ОбластьСтроки = СтрЗаменить(ОбластьСтроки,"Мест","");
	ОбластьШапки  = СтрЗаменить(ОбластьШапки,"Скидка","")+"Тара";
	ОбластьСтроки = СтрЗаменить(ОбластьСтроки,"Скидка","")+"Тара";
	
	Если ЗапросТара.Количество() > 0 Тогда
		
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		СуммаТара    = 0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
		
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьМакета.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТара.Номенклатура);

			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТара.КодАртикул;
			КонецЕсли;

			ТабДокумент.Вывести(ОбластьМакета);

			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
		
		КонецЦикла; 
		
		// Вывести Итого
		ОбластьИтого = "ИтогоТара";
		ОбластьМакета                 = Макет.ПолучитьОбласть(ОбластьИтого);
		ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаТара);
		ТабДокумент.Вывести(ОбластьМакета);		
		
		// сделаем отступ
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
											 
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Вывести подписи
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ПолучилПоДругомуДокументу Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДругомуДокументу");
	Иначе			
		ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДоверенности");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()



// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Функция // Функция формирует табличный документ с печатной формой акта об
// обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг()

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Получил КАК ПредставительПокупателя,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	Контрагент КАК Покупатель,
	|	Контрагент.ЮрФизЛицо КАК ПокупательЮрФизЛицо,
	|	Организация КАК Поставщик,
	|	Организация,
	|	Сделка,	
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("");

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	НомерСтроки КАК НомерСтрокиТЧ,	
	|	Номенклатура КАК Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаЦены,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки + ПроцентАвтоматическихСкидок КАК Скидка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку Акта
	
	СведенияОПоставщике 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	РуководителиОрганизации = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);
	РуководителиКонтрагента = ОбщегоНазначения.ОтветственныеЛицаКонтрагента(Шапка.Покупатель, Шапка.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДолжностьРуководителяПоставщика = РуководителиОрганизации.РуководительДолжность;
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПоставщика 			= РуководителиОрганизации.РуководительПредставление;
	ОбластьМакета.Параметры.ДолжностьРуководителяПокупателя = ?(ПустаяСтрока(РуководителиКонтрагента.РуководительДолжность) И Шапка.ПокупательЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "Директор", РуководителиКонтрагента.РуководительДолжность);
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПокупателя 			= РуководителиКонтрагента.РуководительПредставление;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Формируем заголовок
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='АКТ оказания услуг';uk='АКТ надання послуг'",КодЯзыкаПечать) + Символы.ПС,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);

	// Начинаем формировать собственно текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаНачало");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.ПредставительПоставщика = ДолжностьФИОПредставителя;
	ОбластьМакета.Параметры.ПредставительПокупателя = Шапка.ПредставительПокупателя;

	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// выводим сведения о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров, КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	// Заканчиваем формировать текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаКонец");
	ТабДокумент.Вывести(ОбластьМакета);
	ЕстьСкидки = ТаблицаУслуги.Итог("Скидка") <> 0;

	// Вывести табличную часть
	Если ЕстьСкидки  Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
		ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;

	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;

	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.Товар);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;

		Скидка = Ценообразование.ПолучитьСуммуСкидки(СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Скидка);
		
		Если ЕстьСкидки Тогда
			ОбластьСтроки.Параметры.Скидка         = Скидка;
			ОбластьСтроки.Параметры.СуммаБезСкидки = ОбщегоНазначения.ФорматСумм(СтрокаТабличнойЧасти.Сумма + Скидка);
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьСтроки);
		
		Сумма    = Сумма    + СтрокаТабличнойЧасти.Сумма;
		СуммаНДС = СуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок 	+ Скидка;
		ВсегоБезСкидок = Сумма + ВсегоСкидок;

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	Если ЕстьСкидки Тогда
		ОбластьМакета.Параметры.ВсегоБезСкидок	= ОбщегоНазначения.ФорматСумм(ВсегоБезСкидок);
		ОбластьМакета.Параметры.ВсегоСкидок		= ОбщегоНазначения.ФорматСумм(ВсегоСкидок);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	Если Шапка.УчитыватьНДС Тогда

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС,,"''");
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Вывести(ОбластьМакета);
		
		// всего с НДС (если сумма не включает НДС)
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;

	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");	
	СуммаКПрописиСНДС 	= Сумма + ?(Шапка.СуммаВключаетНДС, 	   0, СуммаНДС);
	СуммаКПрописиБезНДС = Сумма - ?(Шапка.СуммаВключаетНДС, СуммаНДС, 		 0);
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила без НДС ';uk='Загальна вартість робіт (послуг) без ПДВ склала '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', НДС ';uk=', ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', общая стоимость работ (услуг) с НДС ';uk=', загальна вартість робіт (послуг) з ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиСНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 ".";
 	Иначе
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила ';uk='Загальна вартість робіт (послуг) склала '",КодЯзыкаПечать)	+ ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) + ".";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;


	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.ПредставительПоставщика = ДолжностьФИОПредставителя;
	ОбластьМакета.Параметры.ПредставительПокупателя = Шапка.ПредставительПокупателя;
	
	Если  ТипЗнч(БанковскийСчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчета")
		И ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		Банк		= БанковскийСчетОрганизации.Банк;
		МФО	 		= Банк.Код;
		НомерСчета 	= БанковскийСчетОрганизации.НомерСчета;
	Иначе
		// покажем банковские реквизиты основного счета организации
		Банк		= СведенияОПоставщике.Банк;
		МФО	 		= СведенияОПоставщике.МФО;
		НомерСчета 	= СведенияОПоставщике.НомерСчета;
	КонецЕсли;
	
	//ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = 
				  ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,",,КодЯзыкаПечать)
				+ "," + Символы.ПС + НСтр("ru='Т/с ';uk='П/р '",КодЯзыкаПечать) + НомерСчета + ", Банк " + Банк + ", МФО " + МФО + "," + Символы.ПС	
		        + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
	
	//ОбластьМакета.Параметры.РеквизитыПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,ЮридическийАдрес,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

// Функция осуществляет запуск обработки формирующей печатную форму 1-ТН - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН()

	ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");

	ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
	ОбработкаПечати.ПунктРазгрузки = АдресДоставки;

	ОбработкаПечати.Открыть();

	Возврат Неопределено;

КонецФункции // ПечатьТТН()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Накладная" Тогда
		    ТабДокумент = ПечатьДокумента();
	ИначеЕсли ИмяМакета = "НакладнаяСоСкидкой" Тогда
		    ТабДокумент = ПечатьДокументаСоСкидкой();
	ИначеЕсли ИмяМакета = "Акт" Тогда
		    ТабДокумент = ПечатьАктаОбОказанииУслуг();
	ИначеЕсли ИмяМакета = "1Т" Или ИмяМакета = "_1Т" Тогда
 	    ТабДокумент = ПечатьТТН();
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	ИначеЕсли ИмяМакета = "Бланк" Тогда
		ТабДокумент = ПечатьБланк(НаПринтер);
	ИначеЕсли ИмяМакета = "РасходСРозничныхСкладовВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Ложь);
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать


#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура();
	
	СтруктураМакетов.Вставить("Накладная"    , "Расходная накладная");
	СтруктураМакетов.Вставить("НакладнаяСоСкидкой" , "Накладная со скидкой");
	СтруктураМакетов.Вставить("Акт"          , "Акт об оказании услуг");
	СтруктураМакетов.Вставить("_1Т"            , "1-ТН (Товарно-транспортная накладная)");
	СтруктураМакетов.Вставить("Бланк"          , "Бланк товарного наполнения");
	СтруктураМакетов.Вставить("СерийныеНомера" , "Список серийных номеров");

	СтруктураМакетов.Вставить("РасходСРозничныхСкладовВЦенахАТТ" , "Расход с розничных складов в ценах АТТ");

	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//  ДокументОснование - ссылка на документ основание,
//  ИмяТЧ             - строка, имя заполняемой табличной части, по умолчанию - "Товары",
//  МассивЗаказов     - массив, массив заказов, покоторым будем заполнять документ.
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваровУпр(ДокументОснование, ИмяТЧ = "Товары", МассивЗаказов = Неопределено) Экспорт
	
	СкладыВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
	
	Если НЕ СкладыВТЧ И НЕ ЗначениеЗаполнено(Склад) Тогда
		Если ДокументОснование.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			Склад = ДокументОснование.СкладОрдер.Склад;
		Иначе			
			Склад = ДокументОснование.СкладОрдер;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад"            , Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Качество"         , Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ДатаОстатков"     , ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	ЕстьЗаказы = МассивЗаказов <> Неопределено;
	ВедениеВзаиморасчетовПоДоговоруВЦелом = Ложь;
	Если ЕстьЗаказы Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			МассивЗаказов.Добавить(Неопределено);
			МассивЗаказов.Добавить(Документы.ЗаказПокупателя.ПустаяСсылка());
			ВедениеВзаиморасчетовПоДоговоруВЦелом = Истина;
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	КонецЕсли;

	Если ИмяТЧ = "Товары" Тогда
	     ПоляРегл = " Док.СчетУчетаБУ,
					 |Док.НалоговоеНазначение,";
	Иначе	
	     ПоляРегл = "";
	КонецЕсли;
	
	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТЧ + " 
	|ГДЕ Ссылка = &ДокументОснование";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	Док.Номенклатура.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	Док.СтавкаНДС,
	|"+ПоляРегл+"
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА
	|			СУММА(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) < МАКСИМУМ(Остатки.КоличествоОстаток)
	|		ТОГДА
	|			СУММА(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент)
	|		ИНАЧЕ
	|			МАКСИМУМ(Остатки.КоличествоОстаток)
	|	КОНЕЦ КАК МинКоличествоВДокументеОстаток,
	|	%ПОЛЕ_Док_ЗаказПокупателя% КАК ЗаказПокупателя,
	|	%СпособыСписанияОстаткаТоваров% КАК СпособыСписанияОстаткаТоваров,
	|	Док.ХарактеристикаНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|	Док.Склад, ", "") + "
	|	Док.СерияНоменклатуры
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТЧ + " КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		Остатки.Номенклатура КАК Номенклатура,
	|		Остатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Остатки.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|		Остатки.Склад КАК Склад,", "") + "
	|		СУММА(Остатки.КоличествоОстаток) КАК КоличествоОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ОстаткиНаСкладах.Номенклатура КАК Номенклатура,
	|			ОстаткиНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ОстаткиНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|			ОстаткиНаСкладах.Склад КАК Склад,", "") + "
	|			ОстаткиНаСкладах.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков,
	|			   Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") "
	+ ?(СкладыВТЧ, "", "
	|			   И Склад    = &Склад") + "
	|			   И Качество = &Качество
	|			) КАК ОстаткиНаСкладах
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			ОстаткиВРознице.Номенклатура КАК Номенклатура,
	|			ОстаткиВРознице.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ОстаткиВРознице.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|			ОстаткиВРознице.Склад КАК Склад,", "") + "
	|			ОстаткиВРознице.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков,
	|			   Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") "
	+ ?(СкладыВТЧ, "", "
	|			   И Склад    = &Склад") + "
	|			   И Качество = &Качество
	|			) КАК ОстаткиВРознице
	|		) КАК Остатки
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ХарактеристикаНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|		Склад,", "") + "
	|		СерияНоменклатуры
	|	) КАК Остатки
	|ПО
	|	Док.Номенклатура                 = Остатки.Номенклатура
	|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|	И Док.СерияНоменклатуры          = Остатки.СерияНоменклатуры"
	+ ?(СкладыВТЧ, "
	|	И Док.Склад          = Остатки.Склад", "") + "
	|
	|ГДЕ Док.Ссылка = &ДокументОснование 
	|	// УСЛОВИЕ_ПО_ЗАКАЗАМ
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.СтавкаНДС,
	|"+ПоляРегл+"
	|	Док.ХарактеристикаНоменклатуры,
	|	// ГРУППИРОВКА_ПО_ЗАКАЗАМ
	|	Док.СерияНоменклатуры" 
	+ ?(СкладыВТЧ, ", 
	|	Док.Склад", "") + "
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки
	|";
	
	Если ЕстьЗаказы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      ?(ВедениеВзаиморасчетовПоДоговоруВЦелом, " И (Док.Заказ В(&МассивЗаказов) ИЛИ Док.Заказ ССЫЛКА Документ.ВнутреннийЗаказ) ", " И Док.Заказ В(&МассивЗаказов) "));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ГРУППИРОВКА_ПО_ЗАКАЗАМ",  "
		|	ВЫБОР	КОГДА Док.Заказ ССЫЛКА Документ.ВнутреннийЗаказ ИЛИ Док.Заказ = Неопределено
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ИНАЧЕ Док.Заказ
		|	КОНЕЦ,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПОЛЕ_Док_ЗаказПокупателя%", "
		|	ВЫБОР	КОГДА Док.Заказ ССЫЛКА Документ.ВнутреннийЗаказ ИЛИ Док.Заказ = Неопределено
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ИНАЧЕ Док.Заказ
		|	КОНЕЦ ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СпособыСписанияОстаткаТоваров%", "
		|	ВЫБОР КОГДА МАКСИМУМ(Док.Заказ) ССЫЛКА Документ.ЗаказПокупателя И МАКСИМУМ(Док.Заказ) <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыСписанияОстаткаТоваров.ИзРезерва)
		|			ИНАЧЕ Неопределено
		|	КОНЕЦ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ГРУППИРОВКА_ПО_ЗАКАЗАМ",  "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПОЛЕ_Док_ЗаказПокупателя%", "Неопределено");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СпособыСписанияОстаткаТоваров%", "Неопределено");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СписКоличество = Выборка.МинКоличествоВДокументеОстаток;

		Если НЕ ЗначениеЗаполнено(СписКоличество) ИЛИ СписКоличество <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;
		СтрокаТабличнойЧасти.ЗаказПокупателя            = Выборка.ЗаказПокупателя;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;

		Если СкладыВТЧ Тогда
			СтрокаТабличнойЧасти.Склад = Выборка.Склад;
		Иначе
			СтрокаТабличнойЧасти.Склад = Склад;
		КонецЕсли;

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		СтрокаТабличнойЧасти.Количество = (СписКоличество * Выборка.КоэффициентЕдиницыХранения) / СтрокаТабличнойЧасти.Коэффициент;

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Если Выборка.СпособыСписанияОстаткаТоваров = Неопределено Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Иначе
			СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Выборка.СпособыСписанияОстаткаТоваров;
		КонецЕсли;
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти,"Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
		
		Если ИмяТЧ = "Товары" Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ          		= Выборка.СчетУчетаБУ;
			СтрокаТабличнойЧасти.НалоговоеНазначение        = Выборка.НалоговоеНазначение;
		КонецЕсли;
		
	КонецЦикла;

	// Расчет скидок
	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, ЭтоКомиссия, МетаданныеДокумента) Экспорт

	Если ЗаполнятьБУ = Истина Тогда

		СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСчетУчетаБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.ПереданныеСчетУчетаБУ = СчетаУчета.СчетПередачиБУ;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СхемаРеализации", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СхемаРеализации = СчетаУчета.СхемаРеализации;
		КонецЕсли;

	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

		СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСчетУчетаБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.ПереданныеСчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СхемаРеализации", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СхемаРеализации = Справочники.СхемыРеализации.ПустаяСсылка();
		КонецЕсли;


	КонецЕсли;

КонецПроцедуры //ЗаполнитьСчетаБУ

Процедура ЗаполнитьСчетаБУВСтрокеУслуг(СтрокаТЧ, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента) Экспорт

	МетаданныеДокумента = Метаданные();

	Если ЗаполнятьБУ = Истина Тогда
		
		СтрокаТЧ.СхемаРеализации = СчетаУчета.СхемаРеализации;
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		
		СтрокаТЧ.СхемаРеализации = Справочники.СхемыРеализации.ПустаяСсылка();
		
	КонецЕсли;


КонецПроцедуры // ЗаполнитьСчетаБУВСтрокеУслуг

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, ЭтоКомиссия, МетаданныеДокумента)
	
	Если ЗаполнятьНУ  = Истина Тогда

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НалоговоеНазначение", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НалоговоеНазначениеДоходовИЗатрат", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
		КонецЕсли;
 
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НалоговоеНазначение", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НалоговоеНазначениеДоходовИЗатрат", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаНУ()

Процедура ЗаполнитьСчетаНУВСтрокеУслуг(СтрокаТЧ, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента)

	Если ЗаполнятьНУ  = Истина Тогда

		СтрокаТЧ.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
		СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		
		СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат  = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаНУВСтрокеУслуг()

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, ?(мУказаниеСкладовВТЧ, СтрокаТЧ.Склад, Склад));
	ЭтоКомиссия    = (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
			   		И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	МетаданныеДока = Метаданные();

	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, ЭтоКомиссия, МетаданныеДока);
	ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, ЭтоКомиссия, МетаданныеДока);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
	МетаданныеДока = Метаданные();

	ЗаполнитьСчетаБУВСтрокеУслуг(СтрокаТЧ, СчетаУчета, ЗаполнятьБУ, МетаданныеДока);
	ЗаполнитьСчетаНУВСтрокеУслуг(СтрокаТЧ, СчетаУчета, ЗаполнятьНУ, МетаданныеДока);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

Процедура ЗаполнитьСчетаУчетаВТабЧастиУслуги(ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для каждого СтрокаТЧ Из Услуги Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, ЗаполнятьБУ, ЗаполнятьНУ)
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧастиУслуги()

// Процедура выполняет заполнение возвратной тары по поступлению Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(ДокументОснование, МассивЗаказов = Неопределено) Экспорт

	ТекстЗапросаСписокТары = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара 
	|ГДЕ Ссылка = &ДокументСсылка";

	ПоляРегл = " Док.СчетУчетаБУ,
				 |Док.НалоговоеНазначение,";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Склад        КАК Склад,
	|"+ПоляРегл+"
	|	%ПОЛЕ_Док_ЗаказПокупателя% КАК ЗаказПокупателя,
	|	%СпособыСписанияОстаткаТоваров% КАК СпособыСписанияОстаткаТоваров,
	|	ВЫБОР
	|		КОГДА ЛимитыТары.ЛимитПокупателю ЕСТЬ NULL  // Остатки тары у покупателя в регистре отрицательные
	|			ИЛИ (Док.Количество - ОстаткиТары.КоличествоОстаток) < (ЛимитыТары.ЛимитПокупателю) ТОГДА
	|			Док.Количество
	|		КОГДА ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток > 0 ТОГДА
	|			ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК КоличествоТары, // минимум из указанного в документе, и которое можно отгрузить (лимит - уже отгружено)
	|	Остатки.КоличествоОстаток КАК ОстатокТары
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЛимитыВозвратнойТары.СрезПоследних(, 
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары +")  
	|	) КАК ЛимитыТары
	|ПО 
	|	ЛимитыТары.Номенклатура = Док.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПереданные.Остатки(,
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|	              И СтатусПередачи = &СтатусПередачи 
	|	) КАК ОстаткиТары
	|ПО 
	|	ОстаткиТары.Номенклатура = Док.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(,
	|		Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|		// УСЛОВИЕ_СкладИзШапки
	|	    ) КАК Остатки
	|ПО
	|	Док.Номенклатура = Остатки.Номенклатура
	|	И Док.Склад = Остатки.Склад
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|	// УСЛОВИЕ_ПО_ЗАКАЗАМ
	| УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";
	
	ЕстьЗаказы = МассивЗаказов <> Неопределено;
	ВедениеВзаиморасчетовПоДоговоруВЦелом = Ложь;
	Если ЕстьЗаказы Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ВедениеВзаиморасчетовПоДоговоруВЦелом = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивЗаказов <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_ПО_ЗАКАЗАМ", ?(ВедениеВзаиморасчетовПоДоговоруВЦелом, " И (Док.Заказ В(&МассивЗаказов) ИЛИ Док.Заказ ССЫЛКА Документ.ВнутреннийЗаказ) ", " И Док.Заказ В(&МассивЗаказов) "));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЕ_Док_ЗаказПокупателя%", "
		|	ВЫБОР	КОГДА Док.Заказ ССЫЛКА Документ.ВнутреннийЗаказ ИЛИ Док.Заказ = Неопределено
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ИНАЧЕ Док.Заказ
		|	КОНЕЦ ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СпособыСписанияОстаткаТоваров%", "
		|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыСписанияОстаткаТоваров.ИзРезерва)
		|			ИНАЧЕ Неопределено
		|	КОНЕЦ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЕ_Док_ЗаказПокупателя%", "Неопределено");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СпособыСписанияОстаткаТоваров%", "Неопределено");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_СкладИзШапки", ?(мУказаниеСкладовВТЧ, "", "И Склад = &Склад"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента"   , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Неопределено);
	Запрос.УстановитьПараметр("ДокументСсылка"       , ДокументОснование);
	Запрос.УстановитьПараметр("Склад"                , Склад);
	Запрос.УстановитьПараметр("СтатусПередачи"       , Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("МассивЗаказов",         МассивЗаказов);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ОстатокТары = ?(Выборка.ОстатокТары = NULL, 0, Выборка.ОстатокТары);
		Количество  = Мин(Выборка.КоличествоТары, ОстатокТары);

		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура    = Выборка.Номенклатура;
		СтрокаВозвратнойТары.ЗаказПокупателя = Выборка.ЗаказПокупателя;
		СтрокаВозвратнойТары.Склад           = Выборка.Склад;
		СтрокаВозвратнойТары.Количество      = Количество;

		// Получим цену из регистра сведений ЦеныНоменклатуры
		Если НЕ ЗначениеЗаполнено(ТипЦен)
			или (НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов)) Тогда 
			СтрокаВозвратнойТары.Цена = 0;
		Иначе
			// из регистра
			Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаВозвратнойТары.Номенклатура, , ТипЦен, Дата,
			       СтрокаВозвратнойТары.Номенклатура.ЕдиницаХраненияОстатков, ДоговорКонтрагента.ВалютаВзаиморасчетов,
			       КурсВзаиморасчетов, КратностьВзаиморасчетов, , ДоговорКонтрагента);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки бурутся из номенклатуры
			Если НЕ ЗначениеЗаполнено(Цена) Тогда
				СтрокаВозвратнойТары.Цена = 0;
			Иначе
				СтрокаВозвратнойТары.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				                            ТипЦен.ЦенаВключаетНДС,
				                            УчитыватьНДС, Истина,
				                            УчетНДС.ПолучитьСтавкуНДС(СтрокаВозвратнойТары.Номенклатура.СтавкаНДС));
				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары , ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.СпособыСписанияОстаткаТоваров = Неопределено Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
		Иначе
			СтрокаВозвратнойТары.СпособСписанияОстаткаТоваров = Выборка.СпособыСписанияОстаткаТоваров;
		КонецЕсли;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаВозвратнойТары,"ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
		// установим данные из документа
		СтрокаВозвратнойТары.СчетУчетаБУ          		= Выборка.СчетУчетаБУ;
		СтрокаВозвратнойТары.НалоговоеНазначение        = Выборка.НалоговоеНазначение;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоПоступлениюТоваров()

// Заполняет склды в табличной части документа значением из шапки вызывается перед 
// записью и перед заполнением по кнопке "Заполнить и провести"
//
Процедура ЗаполнитьСкладыВТЧ()

	СкладИзШапки     =  Не мУказаниеСкладовВТЧ;
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	
	Для каждого СтрокаТЧ из Товары Цикл

		Если СкладИзШапки Тогда

			СтрокаТЧ.Склад = Склад;

		ИначеЕсли ЕстьКолонкаЗаказ 
		        И (Не ЗначениеЗаполнено(СтрокаТЧ.Склад)) Тогда

			Если (Не ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя))
				ИЛИ (Не ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя.СкладГруппа))
				ИЛИ ТипЗнч(СтрокаТЧ.ЗаказПокупателя.СкладГруппа) <> Тип("СправочникСсылка.Склады") Тогда

				СтрокаТЧ.Склад = Склад;

			Иначе

				СтрокаТЧ.Склад = СтрокаТЧ.ЗаказПокупателя.СкладГруппа;

			КонецЕсли;

		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда

			СтрокаТЧ.Склад = Склад;

		КонецЕсли;
	КонецЦикла;

	Для каждого СтрокаТЧ из ВозвратнаяТара Цикл

		Если СкладИзШапки 
		   И НЕ ЕстьКолонкаЗаказ Тогда

			СтрокаТЧ.Склад = Склад;

		ИначеЕсли ЕстьКолонкаЗаказ 
		        И НЕ СкладИзШапки 
		        И (Не ЗначениеЗаполнено(СтрокаТЧ.Склад)) Тогда

			Если (Не ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя))
				ИЛИ (Не ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя.СкладГруппа))
				ИЛИ ТипЗнч(СтрокаТЧ.ЗаказПокупателя.СкладГруппа) <> Тип("СправочникСсылка.Склады") Тогда

				СтрокаТЧ.Склад = Склад;

			Иначе

				СтрокаТЧ.Склад = СтрокаТЧ.ЗаказПокупателя.СкладГруппа;

			КонецЕсли;

		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда

			СтрокаТЧ.Склад = Склад;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьРеквизитыТабличнойЧастиТоварыРегл(СтрокаНовая, СтрокаИсходная)
	
	СтрокаНовая.СчетУчетаБУ 				= СтрокаИсходная.СчетУчетаБУ;
	СтрокаНовая.ПереданныеСчетУчетаБУ	 	= СтрокаИсходная.ПереданныеСчетУчетаБУ;
	СтрокаНовая.СхемаРеализации 			= СтрокаИсходная.СхемаРеализации;
	СтрокаНовая.НалоговоеНазначение 		= СтрокаИсходная.НалоговоеНазначение;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыТабличнойЧастиВозвратнаяТараРегл(СтрокаНовая, СтрокаИсходная)
	
	СтрокаНовая.СчетУчетаБУ 				= СтрокаИсходная.СчетУчетаБУ;
	СтрокаНовая.СхемаРеализации 			= СтрокаИсходная.СхемаРеализации;
	
КонецПроцедуры

// Заполняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям(ДатаОстатков=Неопределено)

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура");
	СкладыТабличнойЧасти = Товары.Выгрузить();
	СкладыТабличнойЧасти.Свернуть("Склад");

	МассивНоменклатуры   = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	МассивСклады         = СкладыТабличнойЧасти.ВыгрузитьКолонку("Склад");

	ТаблицаРезервовПоСериям = Новый ТаблицаЗначений;
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям);
	ТаблицаСерий.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,Качество,Склад");
	
	ТаблицаСерий         = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры);
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;
	
	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		СтуктураПоиска.Вставить("Склад",                      ИсходнаяСтрока.Склад);

		ЗаполнятьИзРезервов = ложь;
		Если ИспользоватьУказаниеСерийНоменклатурыПриРезервировании 
		   И ИсходнаяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва  Тогда
			Если ИсходнаяСтрока.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтуктураПоиска.Вставить("ДокументРезерва", ИсходнаяСтрока.ЗаказПокупателя);
				ЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;

		Если ЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;
		
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией        = Неопределено;
		СтрокаМаксимальнойСуммы    = Неопределено;
		НепогашеннаяСумма          = ИсходнаяСтрока.Сумма;
		МаксимальнаяСумма          = 0;
		
		ЗаполненКлючСвязи = Ложь;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			
			Если СписанноеКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;
                                      
			НоваяСтрока = Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);

			Если ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.СерияНоменклатуры = ИсходнаяСтрока.СерияНоменклатуры;
			Иначе
				НоваяСтрока.СерияНоменклатуры = Строка.СерияНоменклатуры;
			КонецЕсли;

			НоваяСтрока.Количество           = СписанноеКоличество;

			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 
			                                     КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, 
			                                     СписанноеКоличество);

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			ЗаполнитьРеквизитыТабличнойЧастиТоварыРегл(НоваяСтрока, ИсходнаяСтрока);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток             = Строка.Остаток - СписанноеКоличество;

			ТекущаяСумма      = НоваяСтрока.Сумма;
			НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;

			// Проверим текущую сумму на максимум.
			Если ТекущаяСумма > МаксимальнаяСумма Тогда
				МаксимальнаяСумма       = ТекущаяСумма;
				СтрокаМаксимальнойСуммы = НоваяСтрока;
			КонецЕсли;

		КонецЦикла;

		Если КоличествоОсталосьПогасить > 0 Тогда

			Если СтрокаСПустойСерией = Неопределено Тогда

				НоваяСтрока = Товары.Добавить();

				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);

				НоваяСтрока.Количество = КоличествоОсталосьПогасить;

				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, 
				                                     НоваяСтрока, КоличествоОсталосьПогасить);

				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
				
				ЗаполнитьРеквизитыТабличнойЧастиТоварыРегл(НоваяСтрока, ИсходнаяСтрока);
				
				ТекущаяСумма      = НоваяСтрока.Сумма;
				НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;

				// Проверим текущую сумму на максимум.
				Если ТекущаяСумма > МаксимальнаяСумма Тогда
					МаксимальнаяСумма       = ТекущаяСумма;
					СтрокаМаксимальнойСуммы = НоваяСтрока;
				КонецЕсли;

			Иначе

				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;

				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				
				ТекущаяСумма      = СтрокаСПустойСерией.Сумма;
				НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;

				// Проверим текущую сумму на максимум.
				Если ТекущаяСумма > МаксимальнаяСумма Тогда
					МаксимальнаяСумма       = ТекущаяСумма;
					СтрокаМаксимальнойСуммы = СтрокаСПустойСерией;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;

		// Если что-то осталось, кидаем на строку с максимальной суммой.
		Если НепогашеннаяСумма > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда
			СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма + НепогашеннаяСумма;

			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаМаксимальнойСуммы, ЭтотОбъект, ТекПользователь,,
			                          ЕстьРеквизитПроцентСкидкиНаценки, ПересчитыватьСкидку,
			                          ЕстьРеквизитПроцентАвтоматическихСкидок, "Товары");

			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаМаксимальнойСуммы, ЭтотОбъект);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры //ЗаполнитьПоСериям()

//Процедура выполняет заполнение табличной части неполученными ТМЦ (резервом) по заказу покупателя.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ТабличнаяЧасть, ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстФильтраПоСкладам = "
	|(
	|	ВЫБРАТЬ
	|		ГруппыДоступности.Склад
	|	ИЗ
	|		РегистрСведений.СоставГруппДоступностиСкладов КАК ГруппыДоступности
	|	ГДЕ ГруппыДоступности.ГруппаДоступности = &ГруппаДоступностиСкладов)";
	Если ЗначениеЗаполнено(ДокументОснование.СкладГруппа)
		И ТипЗнч(ДокументОснование.СкладГруппа) = Тип("СправочникСсылка.ГруппыДоступностиСкладов") Тогда
		ГруппаДоступностиСкладов = ДокументОснование.СкладГруппа;
	Иначе
		ГруппаДоступностиСкладов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ГруппаДоступностиСкладов");
	КонецЕсли;
	
	Если ТабличнаяЧасть = Товары Тогда
		ТекстЗапросаПоТЧЗаказа = "
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, ХарактеристикаНоменклатуры, минимум(НомерСтроки) КАК НомерСтроки
		|				ИЗ Документ.ЗаказПокупателя.Товары
		|				ГДЕ Ссылка = &Сделка
		|				Сгруппировать по Номенклатура, ХарактеристикаНоменклатуры) КАК ТЧЗаказа
		|ПО Остатки.Номенклатура = ТЧЗаказа.Номенклатура И Остатки.ХарактеристикаНоменклатуры = ТЧЗаказа.ХарактеристикаНоменклатуры";
	Иначе
		ТекстЗапросаПоТЧЗаказа = "
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, минимум(НомерСтроки) КАК НомерСтроки
		|				ИЗ Документ.ЗаказПокупателя.ВозвратнаяТара
		|				ГДЕ Ссылка = &Сделка
		|				Сгруппировать по Номенклатура) КАК ТЧЗаказа
		|ПО Остатки.Номенклатура = ТЧЗаказа.Номенклатура";
	КонецЕсли;
	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	ЕстьТоварыСУчетомПоСерии = ложь;
	
	Запрос.УстановитьПараметр("Договор",                  ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",                   Сделка);
	Запрос.УстановитьПараметр("Склад",                    Склад);
	Запрос.УстановитьПараметр("СтатусТары",               Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("ГруппаДоступностиСкладов", ГруппаДоступностиСкладов);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);

	ПревышатьОстаткиОрганизации = УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровОрганизации();
	ОбособленныйУчет =  ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей 
	                  И Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();

	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Остатки.Номенклатура                 КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|	Остатки.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	Остатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	Остатки.Номенклатура.ЕдиницаИзмеренияМест                КАК ЕдиницаИзмеренияМест,
	|	Остатки.Номенклатура.ВестиУчетПоСериям                   КАК ВестиУчетПоСериям,
	|	Остатки.Цена                         КАК Цена,
	|	Остатки.ПроцентСкидкиНаценки         КАК ПроцентСкидкиНаценки,
	|	Остатки.ПроцентАвтоматическихСкидок  КАК ПроцентАвтоматическихСкидок,
	|	Остатки.УсловиеАвтоматическойСкидки  КАК УсловиеАвтоматическойСкидки,
	|	Остатки.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
	|	NULL                                 КАК Склад,
	|	NULL                                 КАК СортировкаПоСкладу,
	|	Остатки.СтавкаНДС                    КАК СтавкаНДС,
	|	Остатки.КоличествоОстаток            КАК КоличествоОстатокПоЗаказу,
	|	Остатки.СуммаВзаиморасчетовОстаток   КАК СуммаОстатокПоЗаказу,
	|	0                                    КАК ОстатокНаСкладе,
	|	0                                    КАК ОстатокРезерваПоСделке,
	|	0                                    КАК ОстатокРезерва,
	|	0                                    КАК ОстатокКПередаче" + ?(ТабличнаяЧасть = Товары, ",
	|	ВЫБОР КОГДА ОстаткиОрганизации.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиОрганизации.КоличествоОстаток КОНЕЦ КАК КоличествоОстатокОрганизации", "") + ",
	|	ВЫБОР КОГДА ТЧЗаказа.НомерСтроки ЕСТЬ NULL ТОГДА 9999999 Иначе ТЧЗаказа.НомерСтроки КОНЕЦ КАК НомерСтрокиЗаказа
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор
	|                                                И ЗаказПокупателя = &Сделка
	|" + ?(ТабличнаяЧасть = Товары, "                И СтатусПартии <> &СтатусТары",  "                И СтатусПартии = &СтатусТары") + ") КАК Остатки
	|
	|" + ?(ТабличнаяЧасть = Товары, "ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаОстатков, 
	|										 Организация = &Организация 
	|	                                            ) КАК ОстаткиОрганизации
	|ПО
	|	Остатки.Номенклатура = ОстаткиОрганизации.Номенклатура" +
	?(ВестиУчетПоДопРазрезамРегл,"
	|	И Остатки.ХарактеристикаНоменклатуры = ОстаткиОрганизации.ХарактеристикаНоменклатуры", ""), "") + ТекстЗапросаПоТЧЗаказа+"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|	ОстаткиНаСкладе.Номенклатура                                     КАК Номенклатура,
	|	ОстаткиНаСкладе.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	NULL                                                             КАК ЕдиницаХранения,
	|	NULL                                                             КАК КоэффициентЕдиницыХранения,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаИзмеренияМест                КАК ЕдиницаИзмеренияМест,
	|	ОстаткиНаСкладе.Номенклатура.ВестиУчетПоСериям                   КАК ВестиУчетПоСериям,
	|	0                                                                КАК Цена,
	|	0                                                                КАК ПроцентСкидкиНаценки,
	|	0                                                                КАК ПроцентАвтоматическихСкидок,
	|	NULL                                                             КАК УсловиеАвтоматическойСкидки,
	|	NULL                                                             КАК ЗначениеУсловияАвтоматическойСкидки,
	|	ОстаткиНаСкладе.Склад                                            КАК Склад,
	|	ВЫБОР КОГДА ОстаткиНаСкладе.Склад = &Склад ТОГДА
	|	0
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                       КАК СортировкаПоСкладу,
	|	ОстаткиНаСкладе.Номенклатура.СтавкаНДС      КАК СтавкаНДС,
	|	0                                           КАК КоличествоОстатокПоЗаказу,
	|	0                                           КАК СуммаОстатокПоЗаказу,
	|	ОстаткиНаСкладе.КоличествоОстаток           КАК ОстатокНаСкладе,
	|   РезервыОстаткиПоСделке.КоличествоОстаток    КАК ОстатокРезерваПоСделке,
	|   РезервыОстатки.КоличествоОстаток            КАК ОстатокРезерва,
	|   КПередаче.КоличествоОстаток                 КАК ОстатокКПередаче" + ?(ТабличнаяЧасть = Товары, ",
	|	0                                           КАК КоличествоОстатокОрганизации", "") + ",
	|	ВЫБОР КОГДА ТЧЗаказа.НомерСтроки ЕСТЬ NULL ТОГДА 9999999 Иначе ТЧЗаказа.НомерСтроки КОНЕЦ КАК НомерСтрокиЗаказа
	|		
	|	ИЗ
	|   // остатки на складе
	|	(ВЫБРАТЬ
	|		Склад КАК Склад,
	|		Номенклатура КАК Номенклатура,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(КоличествоОстаток) КАК КоличествоОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Склад КАК Склад,
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, Номенклатура В ( 
	|					ВЫБРАТЬ РАЗЛИЧНЫЕ НОМЕНКЛАТУРА ИЗ
	|					РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор
	|					И ЗаказПокупателя = &Сделка
	|" + ?(ТабличнаяЧасть = Товары, "                И СтатусПартии <> &СтатусТары",  "                И СтатусПартии = &СтатусТары") + "))
	|                                               " 
	+ ?(мУказаниеСкладовВТЧ, ?(ЗначениеЗаполнено(ГруппаДоступностиСкладов), "И Склад В " + ТекстФильтраПоСкладам, ""), " 
	|	                                     И Склад = &Склад") + "
	|		%Условие_Качество%) КАК ОстаткиНаСкладе
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			Склад КАК Склад,
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков, Номенклатура В ( 
	|					ВЫБРАТЬ РАЗЛИЧНЫЕ НОМЕНКЛАТУРА ИЗ
	|					РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор
	|					И ЗаказПокупателя = &Сделка
	|" + ?(ТабличнаяЧасть = Товары, "                И СтатусПартии <> &СтатусТары",  "                И СтатусПартии = &СтатусТары") + "))
	|                                               " 
	+ ?(мУказаниеСкладовВТЧ, ?(ЗначениеЗаполнено(ГруппаДоступностиСкладов), "И Склад В " + ТекстФильтраПоСкладам, ""), " 
	|	                                     И Склад = &Склад") + " %Условие_Качество%
	|		)) КАК ОстаткиНаСкладе
	|	СГРУППИРОВАТЬ ПО
	|		Склад,
	|		Номенклатура,
	|		ХарактеристикаНоменклатуры
	|	) КАК ОстаткиНаСкладе
	|	ЛЕВОЕ СОЕДИНЕНИЕ // резервы
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков,"
	+ ?(мУказаниеСкладовВТЧ, ?(ЗначениеЗаполнено(ГруппаДоступностиСкладов), "Склад В " + ТекстФильтраПоСкладам + " И ", ""), " 
	|	                                     Склад = &Склад И ") + "
	|	                                   ДокументРезерва = &Сделка
	|	                                            ) КАК РезервыОстаткиПоСделке
	|	ПО
	|	ОстаткиНаСкладе.Номенклатура = РезервыОстаткиПоСделке.Номенклатура
	|" + ?(ТабличнаяЧасть = Товары, "
	|   И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыОстаткиПоСделке.ХарактеристикаНоменклатуры ", "")
	+ ?(мУказаниеСкладовВТЧ, "
	|	И ОстаткиНаСкладе.Склад      = РезервыОстаткиПоСделке.Склад", "") + " 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ // резервы
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков,"
	+ ?(мУказаниеСкладовВТЧ, ?(ЗначениеЗаполнено(ГруппаДоступностиСкладов), "Склад В " + ТекстФильтраПоСкладам + " И ", ""), " 
	|	                                     Склад = &Склад И ") + "
	|	                                   ДокументРезерва <> &Сделка
	|	                                            ) КАК РезервыОстатки
	|ПО
	|	ОстаткиНаСкладе.Номенклатура = РезервыОстатки.Номенклатура"
	+ ?(мУказаниеСкладовВТЧ, "
	|	И ОстаткиНаСкладе.Склад      = РезервыОстатки.Склад", "") + " 
	|" + ?(ТабличнаяЧасть = Товары, "
	|   И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыОстатки.ХарактеристикаНоменклатуры ", "") + "
	|ЛЕВОЕ СОЕДИНЕНИЕ // к передаче
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаОстатков,"
	+ ?(мУказаниеСкладовВТЧ, ?(ЗначениеЗаполнено(ГруппаДоступностиСкладов), "Склад В " + ТекстФильтраПоСкладам+" И ", ""), " 
	|	                                     Склад = &Склад И ") + "
	|" + ?(ТабличнаяЧасть = Товары, "        СтатусПартии <> &СтатусТары",  " СтатусПартии = &СтатусТары") + "
	|	                                     %Условие_Качество% 
	|	                                            ) КАК КПередаче
	|ПО
	|	ОстаткиНаСкладе.Номенклатура = КПередаче.Номенклатура"
	+ ?(мУказаниеСкладовВТЧ, "
	|	И ОстаткиНаСкладе.Склад      = КПередаче.Склад", "") + " 
	|" + ?(ТабличнаяЧасть = Товары, "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = КПередаче.ХарактеристикаНоменклатуры", "") 
		+ СтрЗаменить(ТекстЗапросаПоТЧЗаказа,"Остатки.","ОстаткиНаСкладе.");
	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст,"%Условие_Качество%"," И Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый) ");
	Иначе
		Запрос.Текст = стрЗаменить(Запрос.Текст,"%Условие_Качество%"," ");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	
	// Таблица остатков по заказу по результатам запроса
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	ТаблицаПоЗаказу.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры");

	ТаблицаПоЗаказу.Индексы.Добавить("НомерСтрокиЗаказа");

	ТаблицаПоЗаказу.Сортировать("НомерСтрокиЗаказа возр");
	
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	// Таблица остатков на складах, резервов и т. п.
	ТаблицаПоОстаткам = РезультатЗапроса.Выгрузить();
	ТаблицаПоОстаткам.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры");

	Сч = 0;
	Пока Сч < ТаблицаПоОстаткам.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоОстаткам.Получить(Сч);
		Если СтрокаТаблицы.ОстатокНаСкладе <= 0 Тогда
			ТаблицаПоОстаткам.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	ТаблицаПоОстаткам.Индексы.Добавить("СортировкаПоСкладу,ОстатокРезерваПоСделке");
	//ТаблицаПоОстаткам.Сортировать("СортировкаПоСкладу, ОстатокРезерваПоСделке УБЫВ, СрокГодности, СерияНоменклатурыПредставление");
	ТаблицаПоОстаткам.Сортировать("СортировкаПоСкладу, ОстатокРезерваПоСделке УБЫВ");
	
	// Нам надо знать сколько на самом деле осталось конкретной номенклатуры 
	// с конкретной характеристикой	по данному заказу, поскольку в разрезе цен и скидок
	// остаки могут расходится
	ТаблицаБезЦен = ТаблицаПоЗаказу.Скопировать();
	Если ТабличнаяЧасть = Товары Тогда
		Если ПревышатьОстаткиОрганизации Тогда
			ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры","КоличествоОстатокПоЗаказу");
		Иначе
			ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, КоличествоОстатокОрганизации","КоличествоОстатокПоЗаказу");
		КонецЕсли;
	Иначе
		ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры","КоличествоОстатокПоЗаказу");
	КонецЕсли;
	
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", Метаданные(), ИмяТабличнойЧасти);
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", Метаданные(), ИмяТабличнойЧасти);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура");
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры");
	КонецЕсли;
	Для каждого СтрокаТаблицы ИЗ ТаблицаБезЦен Цикл
		
		Если ТабличнаяЧасть = Товары Тогда
			Если ПревышатьОстаткиОрганизации Тогда
				ОстатокКоличестваПоЗаказу = СтрокаТаблицы.КоличествоОстатокПоЗаказу;
			Иначе
				ОстатокКоличестваПоЗаказу = Мин(СтрокаТаблицы.КоличествоОстатокПоЗаказу, СтрокаТаблицы.КоличествоОстатокОрганизации);
			КонецЕсли;
		Иначе
			ОстатокКоличестваПоЗаказу = СтрокаТаблицы.КоличествоОстатокПоЗаказу;
		КонецЕсли;
		
		СтруктураПоиска.Номенклатура = СтрокаТаблицы.Номенклатура;
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураПоиска.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		КонецЕсли;
		
		СтрокиЗаказа   = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);
		СтрокиОстатков = ТаблицаПоОстаткам.НайтиСтроки(СтруктураПоиска);

		Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
			
			Если ОстатокКоличестваПоЗаказу <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаЗаказа.КоличествоОстатокПоЗаказу <= 0 Тогда
				Продолжить;
			Иначе
				ОстатокКоличестваПоСтрокеЗаказа = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
			КонецЕсли;
			
			//  Делаем два прохода в первом списываем все резервы по сделке, во втором, если
			//  количество еще не выбрано, то добираем из свободных остатков.
			Для Сч = 1 По 2 Цикл
				
				Если ОстатокКоличестваПоСтрокеЗаказа <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
					
					Если ОстатокКоличестваПоСтрокеЗаказа <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если Сч = 1 Тогда
						КолОстПоЗаказу  = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
						КолОстДоступно  = ?(СтрокаОстатков.ОстатокНаСкладе  = NULL, 0, СтрокаОстатков.ОстатокНаСкладе) - 
						?(СтрокаОстатков.ОстатокРезерва   = NULL, 0, СтрокаОстатков.ОстатокРезерва)  - 
						?(СтрокаОстатков.ОстатокКПередаче = NULL, 0, СтрокаОстатков.ОстатокКПередаче);
						
						Если ТабличнаяЧасть = Товары
							И НЕ ПревышатьОстаткиОрганизации Тогда
							КолОстДоступно = Мин(КолОстДоступно, СтрокаТаблицы.КоличествоОстатокОрганизации);
						КонецЕсли;
						
					КонецЕсли;
					
					Если СтрокаОстатков.ОстатокНаСкладе = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					РезервПоСделке           = ?(СтрокаОстатков.ОстатокРезерваПоСделке = NULL, 0, СтрокаОстатков.ОстатокРезерваПоСделке);
					РезервПоДругимСделкам    = ?(СтрокаОстатков.ОстатокРезерва         = NULL, 0, СтрокаОстатков.ОстатокРезерва);
					КПередаче                = ?(СтрокаОстатков.ОстатокКПередаче       = NULL, 0, СтрокаОстатков.ОстатокКПередаче);
					СвободныйОстатокНаСкладе = Макс(СтрокаОстатков.ОстатокНаСкладе - РезервПоДругимСделкам - КПередаче, 0);
					
					КоличествоКСписанию   = ?(Сч = 1, Мин(Макс(СтрокаОстатков.ОстатокНаСкладе-КПередаче,0), РезервПоСделке), Макс(СвободныйОстатокНаСкладе-РезервПоСделке,0));
					КоличествоКЗаполнению = Мин(КоличествоКСписанию, Мин(ОстатокКоличестваПоЗаказу,  ОстатокКоличестваПоСтрокеЗаказа));
					
					Если КоличествоКЗаполнению = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОстатокКоличестваПоЗаказу       = ОстатокКоличестваПоЗаказу       - КоличествоКЗаполнению;
					ОстатокКоличестваПоСтрокеЗаказа = ОстатокКоличестваПоСтрокеЗаказа - КоличествоКЗаполнению;
					СтрокаОстатков.ОстатокНаСкладе  = СтрокаОстатков.ОстатокНаСкладе  - КоличествоКЗаполнению;
					
					СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
					
					СтрокаТабличнойЧасти.Номенклатура = СтрокаОстатков.Номенклатура;
					
					Если ТабличнаяЧасть = Товары Тогда
						
						Если не ЕстьТоварыСУчетомПоСерии И СтрокаОстатков.ВестиУчетПоСериям Тогда
							ЕстьТоварыСУчетомПоСерии = Истина;
						КонецЕсли;
						
						СтрокаТабличнойЧасти.Количество       = ?(ЗначениеЗаполнено(СтрокаЗаказа.Коэффициент),
						КоличествоКЗаполнению * СтрокаЗаказа.КоэффициентЕдиницыХранения / СтрокаЗаказа.Коэффициент, 0);
						СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаЗаказа.ЕдиницаИзмерения;
						СтрокаТабличнойЧасти.Коэффициент      = СтрокаЗаказа.Коэффициент;
						СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаЗаказа.ЕдиницаИзмеренияМест;
						ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						
						СтрокаТабличнойЧасти.СтавкаНДС                           = СтрокаЗаказа.СтавкаНДС;
						СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры          = СтрокаОстатков.ХарактеристикаНоменклатуры;
						СтрокаТабличнойЧасти.ПроцентСкидкиНаценки                = СтрокаЗаказа.ПроцентСкидкиНаценки;
						СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок         = СтрокаЗаказа.ПроцентАвтоматическихСкидок;
						СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки         = СтрокаЗаказа.УсловиеАвтоматическойСкидки;
						СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = СтрокаЗаказа.ЗначениеУсловияАвтоматическойСкидки;
						СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
						Сделка.ВалютаДокумента, ВалютаДокумента,
						ЗаполнениеДокументов.КурсДокумента(Сделка, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
						ЗаполнениеДокументов.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
						Сделка.СуммаВключаетНДС,
						УчитыватьНДС,
						СуммаВключаетНДС,
						УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						
					Иначе
						
						СтрокаТабличнойЧасти.Количество = КоличествоКЗаполнению;
						СтрокаТабличнойЧасти.Цена       = СтрокаЗаказа.Цена;
						
					КонецЕсли;
					Если РезервПоСделке > 0 Тогда
						СтрокаОстатков.ОстатокРезерваПоСделке                = СтрокаОстатков.ОстатокРезерваПоСделке - КоличествоКЗаполнению;
					КонецЕсли;
					
					Если ТабличнаяЧасть = Товары Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					Иначе
						ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					КонецЕсли;
					
					Если ТабличнаяЧасть = Товары Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
					КонецЕсли;
					
					Если Сч = 1 Тогда
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
					Иначе
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
					КонецЕсли;
					
					СтрокаТабличнойЧасти.Склад           = СтрокаОстатков.Склад;
					СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;

					Если ТабличнаяЧасть = Товары Тогда
						ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти,"Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
					Иначе
						ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти,"ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
					КонецЕсли;
					
				КонецЦикла; // По строкам остатков
			КонецЦикла;  // по проходам
		КонецЦикла; // по строкам заказа
	КонецЦикла;    // по строкам таблицы (без цен)
	
	//Заполнение серий
	Если ТабличнаяЧасть = Товары И ЕстьТоварыСУчетомПоСерии Тогда
		ЗаполнитьПоСериям(ДатаОстатков);
	КонецЕсли;
	
	// Заполнение табличной части СоставНабора
	Если ТабличнаяЧасть = Товары
		И ДокументОснование.СоставНабора.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПарДокумент", ДокументОснование);
		Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	Док.Номенклатура,
		|	Док.ХарактеристикаНоменклатуры,
		|	Док.СерияНоменклатуры,
		|	Док.ЕдиницаИзмеренияМест,
		|	Док.ЕдиницаИзмерения,
		|	Док.Количество,
		|	Док.Коэффициент,
		|	Док.Цена,
		|	Док.СтавкаНДС,
		|	Док.ПроцентСкидкиНаценки,
		|	Док.ПроцентАвтоматическихСкидок,
		|	Док.УсловиеАвтоматическойСкидки,
		|	Док.ЗначениеУсловияАвтоматическойСкидки,
		|	Док.Сумма,
		|	Док.Ссылка.ВалютаДокумента         КАК ВалютаДокумента,
		|	Док.Ссылка.СуммаВключаетНДС        КАК СуммаВключаетНДС,
		|	Док.Ссылка.КратностьВзаиморасчетов КАК КратностьДокумента,
		|	Док.Ссылка.КурсВзаиморасчетов      КАК КурсДокумента,
		|	ВЫБОР 
		|		КОГДА Док.Размещение ССЫЛКА Справочник.Склады ТОГДА Док.Размещение
		|		КОГДА Док.Ссылка.СкладГруппа ССЫЛКА Справочник.Склады ТОГДА Док.Ссылка.СкладГруппа
		|		ИНАЧЕ &ПустойСклад
		|	КОНЕЦ                              КАК Склад,
		|	ВЫБОР 
		|		КОГДА Остатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ Остатки.КоличествоОстаток
		|	КОНЕЦ                              КАК Остаток,
		|	Док.КлючСтроки
		|
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ПарДокумент) КАК Остатки
		|		ПО Остатки.Номенклатура               = Док.Номенклатура
		|		 И Остатки.ХарактеристикаНоменклатуры = Док.ХарактеристикаНоменклатуры
		|
		|ГДЕ
		|	Док.Ссылка = &ПарДокумент
		|	И Док.Номенклатура.Комплект
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавленКомплект = Ложь;
		Выборка          = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОстатокКоличестваПоЗаказу = Мин(Выборка.Количество, Выборка.Остаток);
			
			Если ОстатокКоличестваПоЗаказу = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			
			НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры          = Выборка.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры                   = Выборка.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения                    = Выборка.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест                = Выборка.ЕдиницаИзмеренияМест;
			НоваяСтрока.Коэффициент                         = Выборка.Коэффициент;
			НоваяСтрока.Количество                          = ОстатокКоличестваПоЗаказу;
			НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
			НоваяСтрока.СтавкаНДС                           = Выборка.СтавкаНДС;
			
			НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
			Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			Выборка.СуммаВключаетНДС,
			УчитыватьНДС,
			СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));

			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока,  ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			НоваяСтрока.Качество                     = Справочники.Качество.Новый;
			НоваяСтрока.Склад                        = Выборка.Склад;
			НоваяСтрока.КлючСтроки                   = Выборка.КлючСтроки;
			НоваяСтрока.ЗаказПокупателя              = Сделка;
			ДобавленКомплект                         = Истина;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока,"Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
			
		КонецЦикла;
		
		Если ДобавленКомплект Тогда
			УправлениеЗапасами.ЗаполнитьСоставНабораПоОснованию(ЭтотОбъект, ДокументОснование, Истина);
			ЗаполнитьСчетаУчетаВТабЧасти(СоставНабора,"СоставНабора", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя()

// Процедура выполняет заполнение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткамУпр() Экспорт

	Курс      = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	ТаблицаОстатков = УправлениеЗаказами.ОстаткиУслугПоЗаказуПокупателя( Сделка, ДоговорКонтрагента, ДатаОстатков);
	
	Для каждого Строка из ТаблицаОстатков цикл
		СтрокаУслуг = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУслуг,Строка);
		СтрокаУслуг.Содержание = СокрЛП(СтрокаУслуг.Содержание);
		СтрокаУслуг.Количество 	 = Строка.КолОстаток;
		СтрокаУслуг.Цена         = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.Цена, Сделка.ВалютаДокумента, ВалютаДокумента,
		                                                 ЗаполнениеДокументов.КурсДокумента(Сделка, мВалютаРегламентированногоУчета),
		                                                 Курс,
		                                                 ЗаполнениеДокументов.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета),
		                                                 Кратность);

		СтрокаУслуг.СтавкаНДС = Строка.СтавкаНДС;

		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаУслуг, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаУслуг, ЭтотОбъект);

		СтрокаУслуг.ЗаказПокупателя = Сделка;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьУслугиПоОстаткам()

// Заполняет табличную часть при оперативном проведении
//
// Параметры:
//  ЗаполнятьПредоплату - булево, признак необходимости заполнения ТЧ "ДокументыРасчетовСКонтрагентом".
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением(ЗаполнятьПредоплату = Истина) Экспорт

	ЗаполнитьСкладыВТЧ();

	// Сформируем массив номенклатуры по товарам и таре для фильтров запросов.
	ТЗТовары = Товары.Выгрузить(, "Номенклатура");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "Номенклатура"), ТЗТовары);
	ТЗТовары.Свернуть("Номенклатура");

	МассивНоменклатуры = ТЗТовары.ВыгрузитьКолонку("Номенклатура");

	// Сформируем массив складов для фильтров запросов.
	СкладИзШапки = Не мУказаниеСкладовВТЧ;

	Если СкладИзШапки Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		ТЗСклады = Товары.Выгрузить(, "Склад");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "Склад"), ТЗСклады);
		ТЗСклады.Свернуть("Склад");

		МассивСклады = ТЗСклады.ВыгрузитьКолонку("Склад");

		КолвоЭлементов = МассивСклады.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			ТекЭлемент = МассивСклады[КолвоЭлементов - ОбратныйИндекс];

			Если Не ЗначениеЗаполнено(ТекЭлемент)Тогда
				МассивСклады.Удалить(КолвоЭлементов - ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОстаткиТоваровВРезерве.Склад,
	|	ОстаткиТоваровВРезерве.Номенклатура,
	|	ОстаткиТоваровВРезерве.ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровВРезерве.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва В (&МассивЗаказов)
	|	   И Склад В (&МассивСклады)
	|	   И Номенклатура В (&МассивНоменклатуры)
	|	) КАК ОстаткиТоваровВРезерве
	|");

	ТЗЗаказы = Товары.Выгрузить(, "ЗаказПокупателя");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "ЗаказПокупателя"), ТЗЗаказы);
	ТЗЗаказы.Свернуть("ЗаказПокупателя");

	Запрос.УстановитьПараметр("Ссылка"            , Ссылка);
	Запрос.УстановитьПараметр("МассивЗаказов"     , ТЗЗаказы.ВыгрузитьКолонку("ЗаказПокупателя"));
	Запрос.УстановитьПараметр("МассивСклады"      , МассивСклады);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);

	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,Склад");

	ПустаяХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();

	// Сначала вычтем из найденных остатков количество, размещение по которому явно указан
	// способ списания "из резерва". Для этого последовательно обойдем табличные части 
	// Товары и Возвратная тара.
	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;

		// Сначала вычтем из найденных остатков количество, по которому явно указан
		// способ списания "из резерва". Для этого последовательно обойдем табличные части 
		// Товары и Возвратная тара.
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл

			// Сначала обходим все строки, у которых уже установлен способ списание "из резерва",
			// если способ списание "со склада" или не установлен - пропускаем строку
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособСписанияОстаткаТоваров)
			 ИЛИ СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада Тогда
				Продолжить;
			КонецЕсли;

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтруктураПоиска.Вставить("Склад", Склад);
			Иначе
				СтруктураПоиска.Вставить("Склад", ?(НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад), Склад, СтрокаТЧ.Склад));
			КонецЕсли;

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице. Пересчитаем количество в ТЧ в единицы хранения.
			КоличествоОсталосьПогасить = СтрокаТЧ.Количество;

			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					// Это ошибка: списываемое количество не должно быть больше остатка.
					// Такой документ не проведется оперативно.
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество        = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;
				Строка.Количество          = Строка.Количество - СписанноеКоличество;

			КонецЦикла;

			Если КоличествоОсталосьПогасить > 0 Тогда
				// Значит в документе неверно задан способ списания. Заполнять не будем
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// Заполним массив, хранящий две таблицы значений, в которых задано распределение по
	// способу списания для товаров и возвратной тары
	МассивТаблицСтрок = Новый Массив(2);

	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;

		ТаблицаТЧ = ТабличнаяЧасть.Выгрузить();
		ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");

		МассивТаблицСтрок[Сч] = ТабличнаяЧасть.ВыгрузитьКолонки();
		МассивТаблицСтрок[Сч].Колонки.Добавить("ИндексИсходнойСтроки");

		Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл

			Если СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				Продолжить;
			КонецЕсли;

			// Пересчитаем в единицы хранения
			СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество;

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтруктураПоиска.Вставить("Склад", Склад);
			Иначе
				СтруктураПоиска.Вставить("Склад", ?(НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад), Склад, СтрокаТЧ.Склад));
			КонецЕсли;

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице
			КоличествоОсталосьПогасить = СтрокаТЧ.КоличествоЕдиницХранения;
			СуммаОсталосьПогасить      = СтрокаТЧ.Сумма;

			// Погашаем количество в таблице, записывая способ списания
			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);

				НоваяСтрока.ИндексИсходнойСтроки         = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Количество                   = СписанноеКоличество;
				КоэффПогашения                           = СписанноеКоличество / КоличествоОсталосьПогасить;
				НоваяСтрока.Сумма                        = Окр(СуммаОсталосьПогасить * КоэффПогашения, 2 ,1);
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;

				КоличествоОсталосьПогасить               = КоличествоОсталосьПогасить - СписанноеКоличество;
				СуммаОсталосьПогасить                    = СуммаОсталосьПогасить - НоваяСтрока.Сумма;

				// Уменьшаем количество в исходной строке
				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;

				// Уменьшаем количество в строке остатков
				Строка.Количество   = Строка.Количество - СписанноеКоличество;
				
				Если ЭтоТовары Тогда
					ЗаполнитьРеквизитыТабличнойЧастиТоварыРегл(НоваяСтрока, СтрокаТЧ);				
				Иначе	
					ЗаполнитьРеквизитыТабличнойЧастиВозвратнаяТараРегл(НоваяСтрока, СтрокаТЧ);
				КонецЕсли;
				

			КонецЦикла;

			Если КоличествоОсталосьПогасить > 0 Тогда

				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);

				НоваяСтрока.ИндексИсходнойСтроки         = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Количество                   = КоличествоОсталосьПогасить;
				НоваяСтрока.Сумма                        = Окр(СуммаОсталосьПогасить, 2, 1);
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// Изменяем табличную часть
	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;

		ТекИндексИсходнойСтроки = Неопределено;
		Для Каждого Строка Из МассивТаблицСтрок[Сч] Цикл

			// Если строка с таким индексом уже обрабатывалась, то добавляем новую
			Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда

				Стр                              = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				РедактируемаяСтрока              = ТабличнаяЧасть.Добавить();
				РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;

				Если ЭтоТовары Тогда
					РедактируемаяСтрока.ХарактеристикаНоменклатуры          = Стр.ХарактеристикаНоменклатуры;
					РедактируемаяСтрока.СтавкаНДС                           = Стр.СтавкаНДС;
					РедактируемаяСтрока.ПроцентСкидкиНаценки                = Стр.ПроцентСкидкиНаценки;
					РедактируемаяСтрока.ПроцентАвтоматическихСкидок         = Стр.ПроцентАвтоматическихСкидок;
					РедактируемаяСтрока.УсловиеАвтоматическойСкидки         = Стр.УсловиеАвтоматическойСкидки;
					РедактируемаяСтрока.ЗначениеУсловияАвтоматическойСкидки = Стр.ЗначениеУсловияАвтоматическойСкидки;
				КонецЕсли;
			Иначе
				РедактируемаяСтрока = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
			КонецЕсли;

			РедактируемаяСтрока.СпособСписанияОстаткаТоваров = Строка.СпособСписанияОстаткаТоваров;
			РедактируемаяСтрока.Склад                        = Строка.Склад;
			РедактируемаяСтрока.ЗаказПокупателя              = Строка.ЗаказПокупателя;

			Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
				Продолжить;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(РедактируемаяСтрока, Строка);

			Если ЭтоТовары Тогда
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
			Иначе
				РедактируемаяСтрока.Цена  = ?(РедактируемаяСтрока.Количество <> 0, РедактируемаяСтрока.Сумма/РедактируемаяСтрока.Количество, 0);
			КонецЕсли;
				
			Если ЭтоТовары Тогда
				ЗаполнитьРеквизитыТабличнойЧастиТоварыРегл(РедактируемаяСтрока, Стр);				
			Иначе	
				ЗаполнитьРеквизитыТабличнойЧастиВозвратнаяТараРегл(РедактируемаяСтрока, Стр);
			КонецЕсли;

			ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;

		КонецЦикла;
	КонецЦикла;

	Если мЕстьКолонкаСерии Тогда
		ЗаполнитьПоСериям();
	КонецЕсли;
	
	Если ЗаполнятьПредоплату Тогда
		УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
		УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьТовары(ДокументОснование = Неопределено) Экспорт
	
	Курс      = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуТовары.ЕдиницаИзмерения,
	|	СчетНаОплатуТовары.ЕдиницаИзмеренияМест,
	|	СчетНаОплатуТовары.Количество,
	|	СчетНаОплатуТовары.КоличествоМест,
	|	СчетНаОплатуТовары.Коэффициент,
	|	СчетНаОплатуТовары.Номенклатура,
	|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры,
	|	СчетНаОплатуТовары.Цена,
	|	СчетНаОплатуТовары.ЗаказПокупателя,
	|	СчетНаОплатуТовары.ПроцентСкидкиНаценки,
	|	СчетНаОплатуТовары.ПроцентАвтоматическихСкидок,
	|	СчетНаОплатуТовары.УсловиеАвтоматическойСкидки,
	|	СчетНаОплатуТовары.ЗначениеУсловияАвтоматическойСкидки,
	|	СчетНаОплатуТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";

	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуТовары.Сумма,
	|	СчетНаОплатуТовары.СтавкаНДС,
	|	СчетНаОплатуТовары.СуммаНДС,
	|	СчетНаОплатуТовары.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуТовары.Ссылка.УчитыватьНДС          КАК УчитыватьНДС,
	|	СчетНаОплатуТовары.КлючСтроки";

	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуТовары
	|
	|ГДЕ
	|	СчетНаОплатуТовары.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО
	|	СчетНаОплатуТовары.НомерСтроки
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.КоличествоМест             = Выборка.КоличествоМест;
		НоваяСтрока.ПроцентСкидкиНаценки             = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ПроцентАвтоматическихСкидок             = Выборка.ПроцентАвтоматическихСкидок;
		НоваяСтрока.УсловиеАвтоматическойСкидки             = Выборка.УсловиеАвтоматическойСкидки;
		НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки             = Выборка.ЗначениеУсловияАвтоматическойСкидки;
		
		НоваяСтрока.ЗаказПокупателя                     = Выборка.ЗаказПокупателя;
		НоваяСтрока.Склад                               = ДокументОснование.Склад;
		НоваяСтрока.СтавкаНДС                           = Выборка.СтавкаНДС;

		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
										Выборка.КратностьДокумента, Кратность);

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
								МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
									Выборка.КурсДокумента, Курс,
									Выборка.КратностьДокумента, Кратность),
								Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
								Выборка.СуммаВключаетНДС,
								УчитыватьНДС,
								СуммаВключаетНДС,
								УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		НоваяСтрока.Качество                     = Справочники.Качество.Новый;
		НоваяСтрока.КлючСтроки                   = Выборка.КлючСтроки;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);

	КонецЦикла;
	
	Если ДокументОснование.СоставНабора.Количество() > 0 Тогда
		СоставНабора.Загрузить(ДокументОснование.СоставНабора.Выгрузить());
		ЗаполнитьСчетаУчетаВТабЧасти(СоставНабора, "СоставНабора", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
	КонецЕсли;
	
КонецПроцедуры // СкопироватьТовары()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьВозвратнуюТару(ДокументОснование = Неопределено) Экспорт

	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуВозвратнаяТара.Количество,
	|	СчетНаОплатуВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуВозвратнаяТара.Сумма,
	|	СчетНаОплатуВозвратнаяТара.Цена,
	|	СчетНаОплатуВозвратнаяТара.ЗаказПокупателя,
	|	СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента	КАК ВалютаДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуВозвратнаяТара
	|
	|ГДЕ
	|	СчетНаОплатуВозвратнаяТара.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО
	|	СчетНаОплатуВозвратнаяТара.НомерСтроки
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = Выборка.Количество;
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
								Выборка.КратностьДокумента, Кратность);
								ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		НоваяСтрока.ЗаказПокупателя              = Выборка.ЗаказПокупателя;
		НоваяСтрока.Склад                        = ДокументОснование.Склад;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока,"ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
		
	КонецЦикла;
	

КонецПроцедуры // СкопироватьВозвратнуюТару()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьУслуги(ДокументОснование = Неопределено) Экспорт

	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуУслуги.Содержание,
	|	СчетНаОплатуУслуги.Количество,
	|	СчетНаОплатуУслуги.Номенклатура,
	|	СчетНаОплатуУслуги.Цена,
	|	СчетНаОплатуУслуги.ПроцентСкидкиНаценки,
	|	СчетНаОплатуУслуги.ПроцентАвтоматическихСкидок,
	|	СчетНаОплатуУслуги.УсловиеАвтоматическойСкидки,
	|	СчетНаОплатуУслуги.ЗначениеУсловияАвтоматическойСкидки,
	|	СчетНаОплатуУслуги.ЗаказПокупателя,
	|	СчетНаОплатуУслуги.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";

	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуУслуги.Сумма,
	|	СчетНаОплатуУслуги.СтавкаНДС,
	|	СчетНаОплатуУслуги.СуммаНДС,
	|	СчетНаОплатуУслуги.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуУслуги.Ссылка.УчитыватьНДС          КАК УчитыватьНДС";

	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуУслуги
	|
	|ГДЕ
	|	СчетНаОплатуУслуги.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО
	|	СчетНаОплатуУслуги.НомерСтроки
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.Содержание                 = Выборка.Содержание;
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.ПроцентСкидкиНаценки       = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
		НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
		НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
		НоваяСтрока.ЗаказПокупателя                     = Выборка.ЗаказПокупателя;

		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;
		
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
								Выборка.КратностьДокумента, Кратность);

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
								МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
									Выборка.КурсДокумента, Курс,
									Выборка.КратностьДокумента, Кратность),
								Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
								Выборка.СуммаВключаетНДС,
								УчитыватьНДС,
								СуммаВключаетНДС,
								УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Услуги");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(НоваяСтрока, ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);		
		
	КонецЦикла;
	
КонецПроцедуры // СкопироватьУслуги()

Процедура ОбработкаЗаполненияРегл(Основание)

	СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетУчетаРасчетовСКонтрагентом		= СчетаУчета.СчетРасчетовПокупателя;
	СчетУчетаРасчетовПоАвансам			= СчетаУчета.СчетАвансовПокупателя;
	СчетУчетаРасчетовПоТаре				= СчетаУчета.СчетУчетаТарыПокупателя;
	СчетУчетаРасчетовПоТареПоАвансам	= СчетаУчета.СчетАвансовПоТареПокупателя;
	СчетУчетаНДС 					 	= СчетаУчета.СчетУчетаНДСПродаж;
	СчетУчетаНДСПодтвержденный  	 	= СчетаУчета.СчетУчетаНДСПродажПодтвержденный;

	ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , Истина, Истина);
	ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", Истина, Истина);
	ЗаполнитьСчетаУчетаВТабЧастиУслуги(Истина, Истина);
КонецПроцедуры // ОбработкаЗаполненияРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  ТаблицаУслуг              - таблица значений по скидкам,
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, ТаблицаПоУслугам, СтруктураШапкиДокумента)
	
	МетаданныеДокумента = Метаданные();

	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДвижений.Колонки.Добавить("НДССкидки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки 	= СтрокаТаблицы.СтоимостьБезСкидок;
		НДСБезСкидки 	= СтрокаТаблицы.НДСУпрБезСкидок;

		СуммаСоСкидками = СуммаБезСкидки;
		НДССоСкидками 	= НДСБезСкидки;
		СкидкиЕсть = Ложь;
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр((СуммаБезСкидки/100) * СтрокаТаблицы.ПроцентАвтоматическихСкидок,2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			
			// НДС скидки
			СтрокаДвижений.НДССкидки = Окр((НДСБезСкидки/100) * СтрокаТаблицы.ПроцентАвтоматическихСкидок,2);
			НДССоСкидками = НДССоСкидками - СтрокаДвижений.НДССкидки;
			
			СкидкиЕсть = Истина;
		КонецЕсли;
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр((СуммаБезСкидки/100) * СтрокаТаблицы.ПроцентСкидкиНаценки,2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			
			// НДС скидки
			СтрокаДвижений.НДССкидки = Окр((НДСБезСкидки/100) * СтрокаТаблицы.ПроцентСкидкиНаценки,2);
			НДССоСкидками = НДССоСкидками - СтрокаДвижений.НДССкидки;
			
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		СуммаСоСкидкамиРеально = СтрокаТаблицы.Стоимость;
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;

		НДССоСкидкамиРеально = СтрокаТаблицы.НДСУпр;
		РазницаНДС = НДССоСкидкамиРеально - НДССоСкидками;
		
		Если (Разница <> 0 ИЛИ РазницаНДС <> 0) И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки 	= СтрокаДвижений.СуммаСкидки - Разница;
			СтрокаДвижений.НДССкидки 	= СтрокаДвижений.НДССкидки - РазницаНДС;
		КонецЕсли;
		
		//Натуральные скидки.
		Если СтрокаТаблицы.Комплект Тогда
			Если Ценообразование.ЭтоСпецПредложение(СтруктураШапкиДокумента.Дата,
				СтрокаТаблицы.Номенклатура,
				СтрокаТаблицы.ХарактеристикаНоменклатуры,
				Ценообразование.ПолучитьМассивПолучателейСкидки(Перечисления.ВидыСкидок.Оптовая, ЭтотОбъект)) Тогда
				Комплектующие = СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));
				
				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;
				
				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;
					
					СтоимостьКомплектующей = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * СтрокаТаблицы.КоличествоДок * Комплектующая.Количество,
					ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
					
					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;
				
				СуммаСкидки = СтоимостьКомплектующих - СтрокаТаблицы.Стоимость;
				// НДССкидки определим условно пропорционально
				НДССкидки   = ?(СтрокаТаблицы.Стоимость = 0, 0 , СтрокаТаблицы.НДСУпр / СтрокаТаблицы.Стоимость * СуммаСкидки);
				
				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
					СтрокаДвижений.НДССкидки   = Комплектующая.Значение / СтоимостьКомплектующих * НДССкидки;
				КонецЦикла;
			КонецЕсли;		
		КонецЕсли;		
		
	КонецЦикла;

	Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		СуммаБезСкидки = СтрокаТаблицы.СтоимостьБезСкидок;

		НДСБезСкидки 	= СтрокаТаблицы.НДСУпрБезСкидок;

		СуммаСоСкидками = СуммаБезСкидки;
		НДССоСкидками 	= НДСБезСкидки;

		СкидкиЕсть = Ложь;
		
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр((СуммаБезСкидки/100) * СтрокаТаблицы.ПроцентАвтоматическихСкидок,2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			
			// НДС скидки
			СтрокаДвижений.НДССкидки = Окр((НДСБезСкидки/100) * СтрокаТаблицы.ПроцентАвтоматическихСкидок,2);
			НДССоСкидками = НДССоСкидками - СтрокаДвижений.НДССкидки;
			
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр((СуммаБезСкидки/100) * СтрокаТаблицы.ПроцентСкидкиНаценки,2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			
			// НДС скидки
			СтрокаДвижений.НДССкидки = Окр((НДСБезСкидки/100) * СтрокаТаблицы.ПроцентСкидкиНаценки,2);
			НДССоСкидками = НДССоСкидками - СтрокаДвижений.НДССкидки;
			
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		СуммаСоСкидкамиРеально = СтрокаТаблицы.Стоимость;

		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;

		НДССоСкидкамиРеально = СтрокаТаблицы.НДСУпр;
		РазницаНДС = НДССоСкидкамиРеально - НДССоСкидками;
		
		Если (Разница <> 0 ИЛИ РазницаНДС <> 0) И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки 	= СтрокаДвижений.СуммаСкидки - Разница;
			СтрокаДвижений.НДССкидки	= СтрокаДвижений.НДССкидки - РазницаНДС;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаДвижений;
	
КонецФункции // ПодготовитьТаблицуСкидок()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;
	
	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	// Подготовка данных для регл учета (НДС)
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)

	Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ТаблицаТоваров.Колонки.ПереданныеСчетУчетаБУ.Имя = "КорСчетСписанияБУ";
	Иначе
		ТаблицаТоваров.Колонки.СчетРасходовБУ.Имя	   = "КорСчетСписанияБУ";
		ТаблицаТоваров.Колонки.СубконтоРасходовБУ1.Имя = "КорСубконтоСписанияБУ1";
		ТаблицаТоваров.Колонки.СубконтоРасходовБУ2.Имя = "КорСубконтоСписанияБУ2";
		ТаблицаТоваров.Колонки.СубконтоРасходовБУ3.Имя = "КорСубконтоСписанияБУ3";
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	
	// для списания укажем "кор. налоговое назначение" = нал. назначение доходов и затрат
	// для отражения расходов по налогу на прибыль по списанной себестоимости
	// при передаче на комиссию собсвтенных товаров, кор. налоговое назначение должно быть нал. назначением по НДС.
	Если    СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
		ИЛИ СтруктураШапкиДокумента.ЕстьНДС
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаТоваров.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		
		Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия 
			И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначение") , "НалоговоеНазначениеНовое");
			
		ИначеЕсли СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда	
			
			Если СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
				// расходы будем относить на нехоз. деятельность, это равнозначно непризнанию расходов по себестомости (при реализации товаров по авансу до 01.04)
				ТаблицаТоваров.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность , "НалоговоеНазначениеНовое");
			Иначе	
				ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
	
	ТаблицаТоваров.Колонки.Добавить("Комиссионный",		 	  		Новый ОписаниеТипов("Булево"));
	
	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("СделкаБУ");
	ТаблицаТоваров.Колонки.Добавить("СделкаНУ");
	ИспользоватьСделкуИзСтроки = (  СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	   						 	  И СтруктураШапкиДокумента.ЗаказВТабличнойЧасти);
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СделкаБУ = ?(ИспользоватьСделкуИзСтроки, СтрокаТаблицы.ЗаказПокупателя, УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента, Ссылка,Сделка)); 
		СтрокаТаблицы.СделкаНУ = ?(ИспользоватьСделкуИзСтроки, СтрокаТаблицы.ЗаказПокупателя, НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка)); 
		
		СтрокаТаблицы.Комиссионный = УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаТаблицы.СчетУчетаБУ);
	КонецЦикла;

	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);
	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()	

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"       , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"           	 , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпрБезСкидок" 	 , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  СтруктураШапкиДокумента.КурсДокумента, 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  СтруктураШапкиДокумента.КратностьДокумента, 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;

		Если СтрокаТаблицы.ПроцентСкидкиНаценки + СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда

			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоДок;
			
			СтрокаТаблицы.НДСУпрБезСкидок = УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			
			Если УчитыватьНДС И СуммаВключаетНДС Тогда
				СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок - УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			КонецЕсли;
			
			
		КонецЕсли;	
			
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Если СтрокаТаблицы.ПроцентСкидкиНаценки + СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
			                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                                 СтруктураШапкиДокумента.КурсДокумента, 
											 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                                 СтруктураШапкиДокумента.КратностьДокумента, 
											 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			СтрокаТаблицы.НДСУпрБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДСУпрБезСкидок, ВалютаДокумента, 
			                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                                 СтруктураШапкиДокумента.КурсДокумента, 
											 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                                 СтруктураШапкиДокумента.КратностьДокумента, 
											 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;								 
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 КратностьВзаиморасчетов);

		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаУпр - СтрокаТаблицы.НДСУпр;
		Если СтрокаТаблицы.ПроцентСкидкиНаценки + СтрокаТаблицы.ПроцентАвтоматическихСкидок = 0 Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Стоимость;	
			СтрокаТаблицы.НДСУпрБезСкидок    = СтрокаТаблицы.НДСУпр;
		КонецЕсли;	
		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);	

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)

	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("СделкаНУ");
	ТаблицаТоваров.Колонки.Добавить("СделкаБУ");
	ИспользоватьСделкуИзСтроки = (  СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	   						 	  И СтруктураШапкиДокумента.ЗаказВТабличнойЧасти);
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СделкаБУ = ?(ИспользоватьСделкуИзСтроки, СтрокаТаблицы.ЗаказПокупателя, УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента, Ссылка,Сделка)); 
		СтрокаТаблицы.СделкаНУ = ?(ИспользоватьСделкуИзСтроки, СтрокаТаблицы.ЗаказПокупателя, НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка)); 
    КонецЦикла;
		
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);
	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()	

Процедура ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить нужные при проведении колонки.
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"   , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));	
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"              , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпрБезСкидок" 	 , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  СтруктураШапкиДокумента.КурсДокумента, 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  СтруктураШапкиДокумента.КратностьДокумента, 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда

			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
			
			СтрокаТаблицы.НДСУпрБезСкидок = УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			
			Если УчитыватьНДС И СуммаВключаетНДС Тогда
				СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок - УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			КонецЕсли;
			
			
		
			СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
			                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                                 СтруктураШапкиДокумента.КурсДокумента, 
											 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                                 СтруктураШапкиДокумента.КратностьДокумента, 
											 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);										 
			СтрокаТаблицы.НДСУпрБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДСУпрБезСкидок, ВалютаДокумента, 
			                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                                 СтруктураШапкиДокумента.КурсДокумента, 
											 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                                 СтруктураШапкиДокумента.КратностьДокумента, 
											 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
											 
		КонецЕсли;	
		
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента,
		                                            СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, 
													КратностьВзаиморасчетов);
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаУпр - СтрокаТаблицы.НДСУпр;
		Если СтрокаТаблицы.ПроцентСкидкиНаценки = 0 Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Стоимость;	
			СтрокаТаблицы.НДСУпрБезСкидок = СтрокаТаблицы.НДСУпр;
		КонецЕсли;	
		
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	ТаблицаТары.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
 	ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаТары.Колонки.СчетРасходовБУ.Имя 	   = "КорСчетСписанияБУ";
	ТаблицаТары.Колонки.СубконтоРасходовБУ1.Имя = "КорСубконтоСписанияБУ1";
	ТаблицаТары.Колонки.СубконтоРасходовБУ2.Имя = "КорСубконтоСписанияБУ2";
	ТаблицаТары.Колонки.СубконтоРасходовБУ3.Имя = "КорСубконтоСписанияБУ3";
	
	ТаблицаТары.Колонки.Добавить("ДокументОприходования");
	ТаблицаТары.Колонки.Добавить("Регистратор");
	ТаблицаТары.Колонки.Добавить("Организация");
	ТаблицаТары.Колонки.Добавить("ДоговорКонтрагента");
	
	// для списания укажем "кор. налоговое назначение" = нал. назначение доходов и затрат
	// для отражения расходов по налогу на прибыль по списанной себестоимости
	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
		
		ТаблицаТары.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		
		Если СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
			// расходы будем относить на нехоз. деятельность, это равнозначно непризнанию расходов по себестомости (при реализации товаров по авансу до 01.04)
			ТаблицаТары.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность , "НалоговоеНазначениеНовое");
		Иначе	
			ТаблицаТары.ЗагрузитьКолонку(ТаблицаТары.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");
		КонецЕсли;
		
	КонецЕсли;

	ТаблицаТары.ЗаполнитьЗначения(ЭтотОбъект,	                               "Регистратор");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 		   "Организация");
	ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,  "ДоговорКонтрагента");
	
	ТаблицаТары.Колонки.Добавить("СделкаНУ");
	ТаблицаТары.Колонки.Добавить("СделкаБУ");
	ИспользоватьСделкуИзСтроки = (  СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	   						 	  И СтруктураШапкиДокумента.ЗаказВТабличнойЧасти);
	
	Для Каждого СтрокаТаблицы Из ТаблицаТары Цикл
		СтрокаТаблицы.СделкаБУ = ?(ИспользоватьСделкуИзСтроки, СтрокаТаблицы.ЗаказПокупателя, УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента, Ссылка,Сделка)); 
		СтрокаТаблицы.СделкаНУ = ?(ИспользоватьСделкуИзСтроки, СтрокаТаблицы.ЗаказПокупателя, НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка)); 
    КонецЦикла;
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);
	
КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаТары.Колонки.Добавить("ЦенаВВалютеЗаказа"   , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС",          ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов",  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаУпр",             ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов

		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  СтруктураШапкиДокумента.КурсДокумента, 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  СтруктураШапкиДокумента.КратностьДокумента, 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		                                    СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                    СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    КратностьВзаиморасчетов);
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		                                    СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                    СтруктураШапкиДокумента.КурсДокумента, 
		                                    СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		И НЕ УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Заказ покупателя""!");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Счет покупателю""!");
	КонецЕсли;

	// Склад заполняем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	// и склад не в ТЧ.
	Если  Не мУказаниеСкладовВТЧ
	    И Товары.Количество() + ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	СтруктураОбязательныхПолей.Вставить("ВидПередачи");
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
			
		Если ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.УчитыватьНДС 
			И СтруктураШапкиДокумента.ЕстьНДС 
			И ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
			И (СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
			   ИЛИ Дата >= '20110101'
			   ) Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
			Если СтруктураШапкиДокумента.СложныйНалоговыйУчет = Ложь 
				ИЛИ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером И Дата >= '20110101')
				Тогда
				СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПодтвержденный");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Брак нельзя отдать на реализацию.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
	   И  (  СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
	       И СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Бартерный) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Реализация товара ненадлежащего качества может производиться только по договору """
		+  СокрЛП(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) + """ или """ + СокрЛП(Перечисления.ВидыДоговоровКонтрагентов.Бартерный)
		+ """.", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если  СтруктураШапкиДокумента.ЕстьНДС
			И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			Если  Дата < '20110101'
				И СтруктураШапкиДокумента.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомиссионером_НК Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода до 2010 года!",Отказ,Заголовок);
				
			ИначеЕсли Дата >= '20110101'
			 	 И НЕ СтруктураШапкиДокумента.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомиссионером_НК Тогда
				 
				 ОбщегоНазначения.СообщитьОбОшибке("В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода с 2011 года!",Отказ,Заголовок);
				 
			ИначеЕсли Дата >= '20110101'
			 	 И НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
				      
				 ОбщегоНазначения.СообщитьОбОшибке("По договорам комиссии с 2011 года в конфигурации реализован только ""сложный налоговый учет"". Установите соответствующий флаг в договоре с контрагентом!",Отказ,Заголовок);
				 
			 КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, ЕдиницаИзмерения");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
//ЗАМЕНА РЕЗОНАНС
//ИСХОДНЫЙ ТЕКСТ
	//СтруктураОбязательныхПолей.Вставить("Склад");
//НОВЫЙ ТЕКСТ
	//В реализации, если ведомость или карточки (грн,литры) - склада в документе и в ТЧ может не быть, 
	//убрать типовую проверку на наличие склада
	Если НЕ мРежимВедомостиТалоныКарточки Тогда 
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
//КОНЕЦ ЗАМЕНЫ
		
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		СтруктураОбязательныхПолей.Вставить("Качество");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		Если ЗначениеЗаполнено(Сделка) Тогда
			СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
		
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			СтруктураОбязательныхПолей.Вставить("ПереданныеСчетУчетаБУ");
			
		Иначе
			
			СтруктураОбязательныхПолей.Вставить("СхемаРеализации");
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьТабЧатьТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");
	
	// Здесь наборов-комплектов быть не должно.
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПокупателя", Отказ, Заголовок);
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");	
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		Если НЕ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
			// Схемы реализации должны быть заполнены правильно
			СтруктураПараметровПроверки = Новый Структура;
			СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетДоходов");
			СтруктураПараметровПроверки.Вставить("КорСчетСписанияБУ", "СчетСебестоимости");
			
			БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, "Товары", , ТаблицаПоТоварам, 
																 СтруктураПараметровПроверки,
																 СтруктураШапкиДокумента,
																 Отказ, Заголовок);	
	    КонецЕсли;
    КонецЕсли;
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет проверки,которые нужны только для регл. учета
Процедура ПроверитьТабЧатьТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
		
	ЭтоКомиссия 	= (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ЭтоОборудование = (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование);
	
	НехозВНД_НДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
	НехозВНД_НП  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
	
	// Для определения вида деятельности НДС
	ДопПараметрыОпределенияВДНДС = Новый Структура("БартерИЭкспорт");
	Если  (СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета) 
	    И (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный) Тогда
		// Бартер и экспорт
		ДопПараметрыОпределенияВДНДС.БартерИЭкспорт = Истина;
	Иначе
		ДопПараметрыОпределенияВДНДС.БартерИЭкспорт = Ложь;
	КонецЕсли;

	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		Если НЕ ЭтоОборудование Тогда
			СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Товары"": ';uk='У рядку номер ""%1"" табличної частини ""Товари"": '"), СокрЛП(СтрокаТЧ.НомерСтроки));
		Иначе
			СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Оборудование"": ';uk='У рядку номер ""%1"" табличної частини ""Устаткування"": '"), СокрЛП(СтрокаТЧ.НомерСтроки));
		КонецЕсли;	
		
		Если ЭтоКомиссия Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КорСчетСписанияБУ) Тогда
				СтрокаСообщения = НСтр("ru='Не заполнено значение реквизита ""Переданные, счет учета (БУ)""!';uk='Не заповнене значення реквізиту ""Передані, рахунок (БО)""!'");
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		Если 	 СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015
			И НЕ ЭтоКомиссия Тогда   
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат) Тогда
				СтрокаСообщения = НСтр("ru = 'Не заполнено значение реквизита ""Налоговое назначение (доходов и затрат) ""!'; uk = 'Не заповнене значення реквізиту ""Податкове призначення (доходів та витрат)""!'");
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			ИначеЕсли СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = НехозВНД_НП Тогда 
				СтрокаСообщения = НСтр("ru = 'Указано некорректное налоговое назначение доходов! Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".'; uk = 'Вказано некоректне податкове призначення доходів! Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'");
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
			
		Если НЕ УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаТЧ.СчетУчетаБУ) Тогда
				
			Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
					
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначение) Тогда
					
					СтрокаСообщения = НСтр("ru = 'Не заполнено значение реквизита ""Налоговое назначение (НДС)""!'; uk = 'Не заповнене значення реквізиту ""Податкове призначення (НДС)""!'");
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
					
				ИначеЕсли СтрокаТЧ.НалоговоеНазначение = НехозВНД_НДС Тогда	
					
					СтрокаСообщения = НСтр("ru = 'Указано некорректное налоговое назначение (НДС)!  Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".'; uk = 'Вказано некоректне податкове призначення (ПДВ)! Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'");
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
					
				Иначе
							     
					Если НЕ СтрокаТЧ.СтавкаНДС.Пустая()
					   И НЕ СтрокаТЧ.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая
					   И НЕ СтрокаТЧ.ВидДеятельностиНДС = УчетНДС.ПолучитьВидДеятельностиНДС(СтрокаТЧ.СтавкаНДС, ДопПараметрыОпределенияВДНДС) 
					   И НЕ ЭтоКомиссия Тогда
						   
					   Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
							   СтрокаСообщения = НСтр("ru = 'Указано некорректное налоговое назначение (НДС)! Оно  не соответствует ставке НДС, указанной в строке.'; uk = 'Вказано некоректне податкове призначення (ПДВ)! Воно не відповідає ставці ПДВ, вказаній в рядку.'");
					   Иначе	
							   СтрокаСообщения = НСтр("ru='Указано некорректное налоговое назначение! Вид деятельности НДС должен быть ""Необлагаемая""';uk='Вказано некоректне податкове призначення! Вид діяльності ПДВ повинен бути ""Неоподатковувана""'");
					   КонецЕсли;
						   
					   ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
							
					КонецЕсли;
						
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
 		
	КонецЦикла;		

КонецПроцедуры // ПроверитьТабЧатьТоварыПоСтрочно()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма, Содержание");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СхемаРеализации");
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		// Схемы реализации должны быть заполнены правильно
		СтруктураПараметровПроверки = Новый Структура;
		СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетДоходов");
		
		Если СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦен Тогда
			СтруктураПараметровПроверки.Вставить("СчетРасходовБУ",  "СчетСебестоимости");
		КонецЕсли;	
		
		БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, "Услуги", , ТаблицаПоУслугам, 
															 СтруктураПараметровПроверки,
															 СтруктураШапкиДокумента,
															 Отказ, Заголовок);	
	КонецЕсли;
	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Услуги", "ЗаказПокупателя", Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		// построчная проверка
		НехозВНД_НДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
		НехозВНД_НП  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
		Для каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл
			
			СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Услуги"": ';uk='У рядку номер ""%1"" табличної частини ""Послуги"": '"), СокрЛП(СтрокаТЧ.НомерСтроки));
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда   
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат) Тогда
					СтрокаСообщения = НСтр("ru = 'Не заполнено значение реквизита ""Налоговое назначение (доходов и затрат) ""!'; uk = 'Не заповнене значення реквізиту ""Податкове призначення (доходів та витрат)""!'");
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				ИначеЕсли СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = НехозВНД_НП Тогда 
					СтрокаСообщения = НСтр("ru = 'Указано некорректное налоговое назначение доходов! Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".'; uk = 'Вказано некоректне податкове призначення доходів! Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'");
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		Для каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл
			
			СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Услуги"": ';uk='У рядку номер ""%1"" табличної частини ""Послуги"": '"), СокрЛП(СтрокаТЧ.НомерСтроки));
			
			Если СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦен
				И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетРасходовБУ) Тогда
				
				ПредставлениеСчета    = СтрокаТЧ.СхемаРеализации.Метаданные().Реквизиты.СчетСебестоимости.Представление();
				ПредставлениеСхемыРеализации     = ЭтотОбъект.Метаданные().ТабличныеЧасти.Услуги.Реквизиты.СхемаРеализации.Представление();
				
				Если СтрокаНачалаСообщенияОбОшибке <> "" Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(СтрокаНачалаСообщенияОбОшибке, Заголовок, СтатусСообщения.Обычное);
					СтрокаНачалаСообщенияОбОшибке = "";
					
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьОбОшибке(Символы.Таб  
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не заполнено значение ""%1"". %2 ""%3"".';uk='Не заповнене значення ""%1"". %2 ""%3"".'"), ПредставлениеСчета, ПредставлениеСхемыРеализации, СтрокаТЧ.СхемаРеализации), Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
                                                          Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
		СтруктураОбязательныхПолей.Вставить("СхемаРеализации");
	КонецЕсли;
	
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок, "ВидСклада");
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);


	УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок, "ВидСклада");	
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "ВозвратнаяТара", "ЗаказПокупателя", Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		
		// Схемы реализации должны быть заполнены правильно
		СтруктураПараметровПроверки = Новый Структура;
		СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетДоходов");
		СтруктураПараметровПроверки.Вставить("КорСчетСписанияБУ", "СчетСебестоимости");
		БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, "ВозвратнаяТара", , ТаблицаПоТаре, 
															 СтруктураПараметровПроверки,
															 СтруктураШапкиДокумента,
															 Отказ, Заголовок);	
	
		// построчная проверка
		НехозВНД_НДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
		НехозВНД_НП  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
		Если  (    СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 
			   ИЛИ СтруктураШапкиДокумента.ЕстьНДС) Тогда
			
			Для каждого СтрокаТЧ Из ТаблицаПоТаре Цикл
				
				СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" табличной части ""Тара"": ';uk='У рядку номер ""%1"" табличної частини ""Тара"": '"), СокрЛП(СтрокаТЧ.НомерСтроки));
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда   
					
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат) Тогда
						СтрокаСообщения = НСтр("ru = 'Не заполнено значение реквизита ""Налоговое назначение (доходов и затрат) ""!'; uk = 'Не заповнене значення реквізиту ""Податкове призначення (доходів та витрат)""!'");
						ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
					ИначеЕсли СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = НехозВНД_НП Тогда 
						СтрокаСообщения = НСтр("ru = 'Указано некорректное налоговое назначение доходов! Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".'; uk = 'Вказано некоректне податкове призначення доходів! Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'");
						ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
					КонецЕсли;
					
				КонецЕсли;
					
				Если  СтруктураШапкиДокумента.ЕстьНДС Тогда
						
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НалоговоеНазначение) Тогда
						
						СтрокаСообщения = НСтр("ru = 'Не заполнено значение реквизита ""Налоговое назначение (НДС)""!'; uk = 'Не заповнене значення реквізиту ""Податкове призначення (НДС)""!'");
						ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
						
					ИначеЕсли СтрокаТЧ.НалоговоеНазначение = НехозВНД_НДС Тогда	
						
						СтрокаСообщения = НСтр("ru = 'Указано некорректное налоговое назначение (НДС)! Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".'; uk = 'Вказано некоректне податкове призначення (ПДВ)! Вид податкової діяльності при реалізації не може бути ""Не господарською діяльністю"".'");
						ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
						
					Иначе
								     
						Если НЕ СтрокаТЧ.СтавкаНДС.Пустая()
						   И НЕ СтрокаТЧ.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая
						   И НЕ СтрокаТЧ.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Необлагаемая Тогда
							   
						   Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
								   СтрокаСообщения = НСтр("ru = 'Указано некорректное налоговое назначение (НДС)! Оно  не может быть облагаемым!'; uk = 'Вказано некоректне податкове призначення (ПДВ)! Воно не може бути оподатковуавним!'");
						   Иначе	
								   СтрокаСообщения = НСтр("ru='Указано некорректное налоговое назначение! Вид деятельности НДС должен быть ""Необлагаемая""';uk='Вказано некоректне податкове призначення! Вид діяльності ПДВ повинен бути ""Неоподатковувана""'");
						   КонецЕсли;
							   
						   ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
								
						КонецЕсли;
							
					КонецЕсли;
						
				КонецЕсли;

			КонецЦикла;	
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
							  ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
							  Отказ, Заголовок)

	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, ЭтотОбъект);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
						  ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
						  ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
						  Отказ, Заголовок);
	Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
		                                             Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	
    ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента,
	                          ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);

	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоКомплектам, 
	                          ТаблицаПоТаре, Отказ, Заголовок);

	// Продажи (нал. учет)	
	ТаблицаПоВторомуСобытиюНал = ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ);
	
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоУслугам, 
							  ТаблицаПоВторомуСобытиюНал,
							  Отказ, Заголовок);							  
	
//ВСТАВКА РЕЗОНАНС
	Если мРежимВедомостиТалоныКарточки Тогда
		Возврат;
	КонецЕсли;
//КОНЕЦ ВСТАВКИ
	// Учет реализованных услуг
	ДвиженияПоРегиструРеализацияУслугРегл(СтруктураШапкиДокумента, Дата, ТаблицаПоУслугам);
	
	ДвиженияПоРегиструРеализацияУслугУпр(СтруктураШапкиДокумента, Дата, ТаблицаПоУслугам);
	
	Если ТаблицаПоКомплектам.Количество() + ТаблицаПоТаре.Количество() >0 тогда
		// Зарегистрируем в последовательности УУ
		Если ОтражатьВУправленческомУчете Тогда
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
			ЗаписьРегистрации.Период      = Дата;
		КонецЕсли;
	КонецЕсли;
	
	// Проводить по партиям сразу нужно если установлен параметр
	// учетной политики СписыватьПартииПриПроведенииДокументов
	ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;

	Если ПроводитьПоПартиям Тогда

		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	Иначе

		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
			УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
							  ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
							  Отказ, Заголовок)
							  
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

//ВСТАВКА РЕЗОНАНС
Если НЕ мРежимОбменаТалонов Тогда
//КОНЕЦ ВСТАВКИ
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
												  мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
												  ВидДвиженияНакопления.Приход, Отказ, Заголовок);
//ВСТАВКА РЕЗОНАНС
КонецЕсли;
Если мРежимВедомостиТалоныКарточки Тогда
	Возврат;
КонецЕсли;
//КОНЕЦ ВСТАВКИ

	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Если СуммаДокумента <> 0 Тогда

			// По регистру ПродажиПоДисконтнымКартам.
			Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда
				НаборДвижений = Движения.ПродажиПоДисконтнымКартам;

				// Получим таблицу значений, совпадающую со структурой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

				// Заполним таблицу движений.
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ДисконтнаяКарта = СтруктураШапкиДокумента.ДисконтнаяКарта;
				СтрокаДвижений.ВладелецДисконтнойКарты = СтруктураШапкиДокумента.Контрагент;
				СтрокаДвижений.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
											СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
											СтруктураШапкиДокумента.КурсДокумента,
											СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
											СтруктураШапкиДокумента.КратностьДокумента,
											СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
				
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

				Если Не Отказ Тогда
					НаборДвижений.ВыполнитьДвижения();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ Продажи.
		
		НаборДвижений = Движения.Продажи;
		
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		ТаблицаПоТоварам.Колонки.НДС.Имя = "НДСВрем";
		ТаблицаПоТоварам.Колонки.НДСУпр.Имя = "НДС";			
		
		// Заполним таблицу движений.
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоТоварам,ТаблицаДвижений, Проект, Дата, "Продажи");
			
		Иначе
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			
		КонецЕсли;
		
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент , "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументПродажи");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
		// Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПокупателя");
		КонецЕсли;
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.Продажи.ВыполнитьДвижения();
		КонецЕсли;
		
		// УСЛУГИ ПО РЕГИСТРУ Продажи.
		
		НаборДвижений = Движения.Продажи;

		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		ТаблицаПоУслугам.Колонки.НДС.Имя = "НДСВрем";
		ТаблицаПоУслугам.Колонки.НДСУпр.Имя = "НДС";

		// Заполним таблицу движений.
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоУслугам,ТаблицаДвижений, Проект, Дата, "Продажи");
			
		Иначе
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);
			
		КонецЕсли;
		
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент , "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументПродажи");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
		// Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПокупателя");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.Продажи.ВыполнитьДвижения();
		КонецЕсли;

		// ПО РЕГИСТРУ ПредоставленныеСкидки.
		НаборДвижений = Движения.ПредоставленныеСкидки;

		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументСкидки");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ПолучательСкидки");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
		КонецЕсли;

		ТаблицаПоТоварам.Колонки.НДС.Имя = "НДСУпр";			
		ТаблицаПоТоварам.Колонки.НДСВрем.Имя = "НДС";

		ТаблицаПоУслугам.Колонки.НДС.Имя = "НДСУпр";			
		ТаблицаПоУслугам.Колонки.НДСВрем.Имя = "НДС";

	КонецЕсли;

	
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.

		ВидСкладаОпт  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
		РезультатЗапросаКомплектыОпт = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектам, ВидСкладаОпт);
		РезультатЗапросаТараОпт      = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре,       ВидСкладаОпт);

		Если Не РезультатЗапросаКомплектыОпт.Пустой() ИЛИ НЕ РезультатЗапросаТараОпт.Пустой() Тогда
		
			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				Движения.ТоварыНаСкладах.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
				Движения.ТоварыНаСкладах.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если НЕ Отказ Тогда
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("КомплектыОпт", РезультатЗапросаКомплектыОпт.Выгрузить());
				СтруктТаблицДокумента.Вставить("ТараОпт",      РезультатЗапросаТараОпт     .Выгрузить());

				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТараОпт");
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			КонецЕсли;

		КонецЕсли;

		ВидСкладаРозн = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
		РезультатЗапросаКомплектыРозн = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектам, ВидСкладаРозн);
		РезультатЗапросаТараРозн      = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре,       ВидСкладаРозн);

		Если Не РезультатЗапросаКомплектыРозн.Пустой() ИЛИ НЕ РезультатЗапросаТараРозн.Пустой() Тогда

			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				Движения.ТоварыВРознице.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
				Движения.ТоварыВРознице.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				ТаблицаКомплектыРозн = РезультатЗапросаКомплектыРозн.Выгрузить();
				ТаблицаТараРозн      = РезультатЗапросаТараРозн.Выгрузить();
				
				Если ТаблицаКомплектыРозн.Колонки.Найти("СуммаПродажная") = Неопределено Тогда
					ТаблицаКомплектыРозн.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
				КонецЕсли;
				
				Если ТаблицаКомплектыРозн.Количество() <> 0 Тогда
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаКомплектыРозн.ВыгрузитьКолонку("Склад"),
					ТаблицаКомплектыРозн.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаКомплектыРозн, ТаблицаПоЦенам, "ВидСклада");
				КонецЕсли;
				
				Если ТаблицаТараРозн.Колонки.Найти("СуммаПродажная") = Неопределено Тогда
					ТаблицаТараРозн.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
				КонецЕсли;
				
				Если ТаблицаТараРозн.Количество() <> 0 Тогда
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТараРозн.ВыгрузитьКолонку("Склад"),
					ТаблицаТараРозн.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТараРозн, ТаблицаПоЦенам, "ВидСклада");
				КонецЕсли;
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("КомплектыРозн", ТаблицаКомплектыРозн);
				СтруктТаблицДокумента.Вставить("ТараРозн"     , ТаблицаТараРозн);

				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице, СтруктТаблицДокумента);

				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТараРозн");

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			КонецЕсли;

		КонецЕсли;

	Иначе // отпуск по ордеру

		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			Движения.ТоварыКПередачеСоСкладов.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
			Движения.ТоварыКПередачеСоСкладов.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаТовары", ТаблицаПоКомплектам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
							
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
					
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаТовары");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
	КонецЕсли;
	
	// Проверка остатков лимитов возвратной тары при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный И ТаблицаПоТаре.Количество()<>0 Тогда
		Движения.ТоварыПереданные.КонтрольЛимитовВозвратнойТары(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ ТоварыПереданные
	Если Не Отказ Тогда
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
		
		КопияТаблицаПоТаре = ТаблицаПоТаре.Скопировать();
		КопияТаблицаПоТаре.Колонки.ЗаказПокупателя.Имя = "Сделка";
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", КопияТаблицаПоТаре);
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			КопияТовары = ТаблицаПоТоварам.Скопировать();
			
			КопияТовары.Колонки.ЗаказПокупателя.Имя = "Сделка";
			
			СтруктТаблицДокумента.Вставить("ТаблицаТовары", КопияТовары);
		КонецЕсли;
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыПереданные, СтруктТаблицДокумента);
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Для Каждого ТаблицаДанных Из ТаблицыДанныхДокумента Цикл
				ТаблицаДанных.Значение.ЗаполнитьЗначения(Сделка, "Сделка");
			КонецЦикла;
		КонецЕсли;
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,     "ТаблицаТовары");
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПереданные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
	КонецЕсли;

	// ТОВАР, ТАРА И УСЛУГИ ПО РЕГИСТРУ ЗаказыПокупателей.
	Если Не Отказ Тогда	
		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Товары",         Отказ, Заголовок);
			Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "ВозвратнаяТара", Отказ, Заголовок);
			Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Услуги",         Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПокупателей, СтруктТаблицДокумента);
			ОбщегоНазначения.УдалитьСтрокиИзТаблицДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя");
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам,ТаблицаПоУслугам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПокупателей, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		КонецЕсли;

		// Если есть списание из резерва, то надо списать резерв
		//ТаблицаПоТоварамИзРезерва = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамИзРезерва = ТаблицаПоКомплектам.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамИзРезерва.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамИзРезерва.Получить(Сч);
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
				ТаблицаПоТоварамИзРезерва.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;

		Если ТаблицаПоТоварамИзРезерва.Количество() > 0 Тогда
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ТаблицаПоТоварамИзРезерва.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамИзРезерва, ТаблицаДвижений);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		ТаблицаПоТареИзРезерва = ТаблицаПоТаре.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТареИзРезерва.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТареИзРезерва.Получить(Сч);
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
				ТаблицаПоТареИзРезерва.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;

		Если ТаблицаПоТареИзРезерва.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ТаблицаПоТареИзРезерва.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТареИзРезерва, ТаблицаДвижений);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
//ВСТАВКА РЕЗОНАНС
	Если мРежимОбменаТалонов Тогда
		Возврат;
	КонецЕсли;
//КОНЕЦ ВСТАВКИ
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ мСтруктураПараметровВзаиморасчетов.ПроводитьПоВзаиморасчетам Тогда
		Возврат;
	КонецЕсли;

	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;

	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок)
							  
//ВСТАВКА РЕЗОНАНС
	Если мРежимВедомостиТалоныКарточки Тогда
		Возврат;
	КонецЕсли;
//КОНЕЦ ВСТАВКИ
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
								  
	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

	Если Не ВестиУчетПоДопРазрезамРегл Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "ХарактеристикаНоменклатуры");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "СерияНоменклатуры");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Качество");
	КонецЕсли;
		
	Если Не ВестиСкладскойУчетБУ Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;
		
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	// Проверка осатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьРасход();
	КонецЕсли;	

	// Перекинем остатки по организации на комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		КопияТаблицыПоТоварам = ТаблицаПоТоварам.Скопировать();
		КопияТаблицыПоТоварам.Колонки.СчетУчетаБУ.Имя = "СчетСписанияБУ";
		КопияТаблицыПоТоварам.Колонки.КорСчетСписанияБУ.Имя = "СчетУчетаБУ";

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицыПоТоварам, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Комиссионер");

		Если Не ВестиУчетПоДопРазрезамРегл Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "ХарактеристикаНоменклатуры");
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "СерияНоменклатуры");
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Качество");
		КонецЕсли;
		
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;	

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()
                     
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда	
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование, "ДопустимыйСтатус1");
    Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,"ДопустимыйСтатус2");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус4");
	КонецЕсли;		
		
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента, "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, "КратностьДокумента");
			
	Для каждого Строка Из ТаблицаДвижений Цикл
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
		Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Строка.ЗаказСписания = СтруктураШапкиДокумента.Сделка;//Для заполнения счета в регистре ПродажиСебестоимость
		Иначе	
			Строка.ЗаказСписания = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказСписания")	
	КонецЕсли;
	
	// Учет по проектам
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
	КонецЕсли;

КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный     ,"ДопустимыйСтатус2");

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");

КонецПроцедуры 

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
											ТаблицаПоТаре, Отказ, Заголовок) Экспорт
											
//ВСТАВКА РЕЗОНАНС
	Если мРежимВедомостиТалоныКарточки Тогда
		Возврат;
	КонецЕсли;
//КОНЕЦ ВСТАВКИ
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;
	КонецЦикла;

	// Если резервирование под заказ - заказ партии
	Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
		ТаблицаЗаказов = ТаблицаПоТоварам.ВыгрузитьКолонку("ЗаказПокупателя");
		ТаблицаДвижений.ЗагрузитьКолонку(ТаблицаЗаказов, "ЗаказПартии");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ
		СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Реализация, "КодОперацииПартииТоваров");

	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию, "КодОперацииПартииТоваров");

		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                "ДокументПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "СтатусПередачи");

	КонецЕсли;
	
	// Документы с видом передачи по ордеру сразу не проводятся
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;

	КонецЦикла;

	// Документы с видом передачи по ордеру сразу не проводятся
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "ЗаказПартии");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту,"КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоУслугам, 
									ТаблицаПоВторомуСобытиюНал,	Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;	
	КонецЕсли;
	
//ВСТАВКА РЕЗОНАНС
Если НЕ мРежимВедомостиТалоныКарточки Тогда
//КОНЕЦ ВСТАВКИ
	//Списание по партиям
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, ТаблицаПоКомплектам, , Ложь, СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, , , Отказ);
	Если НЕ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		УправлениеРозничнойТорговлей.ПереоценкаСписанияСРозничногоСкладаБухгалтерскийУчет(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаПоКомплектам)		
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, ТаблицаПоТаре,    , Ложь, СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, , , Отказ);
	УправлениеРозничнойТорговлей.ПереоценкаСписанияСРозничногоСкладаБухгалтерскийУчет(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаПоТаре);	

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
//ВСТАВКА РЕЗОНАНС
КонецЕсли;
//КОНЕЦ ВСТАВКИ
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ДатаДока   = Дата;
	
	Комиссия = (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
	            И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
				
	СоответствиеКурсовЗачетаАвансаЗаказам = Новый Соответствие();
				
//ВСТАВКА РЕЗОНАНС
Если НЕ мРежимОбменаТалонов Тогда
//КОНЕЦ ВСТАВКИ
	// Проводки по взаиморасчетам - авансы
	Если НЕ Комиссия Тогда
		
		ТаблицыДокумента = Новый Структура();
	   	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
		ТаблицыДокумента.Вставить("ТаблицаПоУслугам",ТаблицаПоУслугам);
		
		//Возможны корректировки сумм при расчетах в валюте
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам  
		   И СтруктураШапкиДокумента.ЗаказВТабличнойЧасти Тогда
		   
		   МассивСделок = новый Массив;
		   Для каждого Таблица Из ТаблицыДокумента Цикл
		   		Для каждого СтрокаТаблицы Из Таблица.Значение Цикл
					МассивСделок.Добавить(СтрокаТаблицы.СделкаБУ);
		   		КонецЦикла;
		   КонецЦикла;
		   
		   УчетНДС.УдалитьПовторяющиесяЭлементыМассива(МассивСделок);
		   
		   Для каждого ТекСделка Из МассивСделок Цикл
			    // зачтем аванс по каждой сделке отдельно
				ТаблицаАвансов = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ"
																	   ,, ,,, ТекСделка);	
				СоответствиеКурсовЗачетаАвансаЗаказам.Вставить(ТекСделка, ?(ТаблицаАвансов.Итог("СуммаВал") = 0, Неопределено, ТаблицаАвансов.Итог("Сумма") / ТаблицаАвансов.Итог("СуммаВал")));
			
			КонецЦикла;
		   
		ИначеЕсли  СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентомРегл Тогда  
			
			ВсегоКЗачету = СуммаДокумента;
			
		   ТаблицаСделок = ДокументыРасчетовСКонтрагентом.Выгрузить(,"ДокументРасчетовСКонтрагентом,Сумма,ДатаОплаты,ВозвратнаяТара");
		   ТаблицаСделок.Свернуть("ДокументРасчетовСКонтрагентом,ДатаОплаты,ВозвратнаяТара", "Сумма");
		   ТаблицаСделок.Сортировать("ДатаОплаты");
		   
		   Для каждого СтрокаПредоплаты Из ТаблицаСделок Цикл
				
				Если СтрокаПредоплаты.ВозвратнаяТара Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаПредоплаты   = СтрокаПредоплаты.Сумма;
				РасчетныйДокумент = СтрокаПредоплаты.ДокументРасчетовСКонтрагентом;
				
				//Если СуммаПредоплаты > ВсегоКЗачету Тогда
				//
				//	Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Сумма предоплаты по документу %1, указанная на закладке ""Предоплата"" (%2),
				//								   |    превышает возможную сумму предоплаты на %3 (%4) (с учетом предыдущих документов предоплаты)",
				//								   СтрокаПредоплаты.ДокументРасчетовСКонтрагентом,
				//								   СуммаПредоплаты,
				//								   Мин(СуммаПредоплаты,СуммаПредоплаты - ВсегоКЗачету),
				//								   ВалютаДокумента));
				//
				//КонецЕсли;
				
				Если ВсегоКЗачету > 0 Тогда
				
					// зачтем аванс в размере указанной суммы на закладке предоплата
					ТаблицаАвансов = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ"
																		   ,,, ,, РасчетныйДокумент, Мин(ВсегоКЗачету,СуммаПредоплаты));	
				КонецЕсли;
																	   
				ВсегоКЗачету = ВсегоКЗачету - ТаблицаАвансов.Итог("СуммаВал");
				
			КонецЦикла;
			
			КурсЗачетаАвансаРегл = Неопределено;
			
		Иначе
			// обычный зачет аванса и корректировка сумм при расчетах в валюте
			ТаблицаАвансов = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ");
			КурсЗачетаАвансаРегл = ?(ТаблицаАвансов.Итог("СуммаВал") = 0, Неопределено, ТаблицаАвансов.Итог("Сумма") / ТаблицаАвансов.Итог("СуммаВал"));
			
		КонецЕсли;		
		
	КонецЕсли; // Проводки по взаиморасчетам - авансы

	// Проводки по взаиморасчетам за тару - авансы
   	ТаблицыДокумента = Новый Структура();
   	ТаблицыДокумента.Вставить("ТаблицаПоТаре",ТаблицаПоТаре);
	//Возможны корректировки сумм при расчетах в валюте
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам  
	   И СтруктураШапкиДокумента.ЗаказВТабличнойЧасти Тогда
	   
	   МассивСделок = новый Массив;
	   Для каждого Таблица Из ТаблицыДокумента Цикл
			   Для каждого СтрокаТаблицы Из Таблица.Значение Цикл
				МассивСделок.Добавить(СтрокаТаблицы.СделкаБУ);
			   КонецЦикла;
	   КонецЦикла;
	   
	   УчетНДС.УдалитьПовторяющиесяЭлементыМассива(МассивСделок);
	   
	   Для каждого ТекСделка Из МассивСделок Цикл
			// зачтем аванс по каждой сделке отдельно
			ТаблицаАвансов = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ"
																   ,,, СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре, СтруктураШапкиДокумента.СчетУчетаРасчетовПоТареПоАвансам
																   , ТекСделка);	
		КонецЦикла;
	   
	ИначеЕсли  СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентомРегл Тогда  
		
	   ВсегоКЗачету = ВозвратнаяТара.Итог("Сумма");
		
	   ТаблицаСделок = ДокументыРасчетовСКонтрагентом.Выгрузить(,"ДокументРасчетовСКонтрагентом,Сумма,ДатаОплаты,ВозвратнаяТара");
	   ТаблицаСделок.Свернуть("ДокументРасчетовСКонтрагентом,ДатаОплаты,ВозвратнаяТара", "Сумма");
	   ТаблицаСделок.Сортировать("ДатаОплаты");
	   
	   Для каждого СтрокаПредоплаты Из ТаблицаСделок Цикл
			
			Если НЕ СтрокаПредоплаты.ВозвратнаяТара Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаПредоплаты   = СтрокаПредоплаты.Сумма;
			РасчетныйДокумент = СтрокаПредоплаты.ДокументРасчетовСКонтрагентом;
			
			//Если СуммаПредоплаты > ВсегоКЗачету Тогда
			//
			//	Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Сумма предоплаты по документу %1, указанная на закладке ""Предоплата"" (%2),
			//								   |    превышает возможную сумму предоплаты на %3 (%4) (с учетом предыдущих документов предоплаты)",
			//								   СтрокаПредоплаты.ДокументРасчетовСКонтрагентом,
			//								   СуммаПредоплаты,
			//								   Мин(СуммаПредоплаты,СуммаПредоплаты - ВсегоКЗачету),
			//								   ВалютаДокумента));
			//
			//КонецЕсли;
			
			Если ВсегоКЗачету > 0 Тогда
			
				// зачтем аванс в размере указанной суммы на закладке предоплата
				ТаблицаАвансов = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента , мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок, "АВ"
																	   ,,, СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре, СтруктураШапкиДокумента.СчетУчетаРасчетовПоТареПоАвансам
																	   , РасчетныйДокумент, Мин(ВсегоКЗачету,СуммаПредоплаты));	
																	   
			КонецЕсли;
																   
			ВсегоКЗачету = ВсегоКЗачету - ТаблицаАвансов.Итог("СуммаВал");
			
		КонецЦикла;
		
		
	Иначе
		//Возможны корректировки сумм при расчетах в валюте
		ТаблицаАвансовПоТаре = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, ТаблицыДокумента , Отказ, Заголовок,"АВ",,,СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре, СтруктураШапкиДокумента.СчетУчетаРасчетовПоТареПоАвансам);
		
	КонецЕсли;
	
	МассивРасчетныхДокументов = Неопределено;
	Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентомРегл Тогда
		МассивРасчетныхДокументов = ДокументыРасчетовСКонтрагентом.ВыгрузитьКолонку("ДокументРасчетовСКонтрагентом");
		УчетНДС.УдалитьПовторяющиесяЭлементыМассива(МассивРасчетныхДокументов);
	КонецЕсли;

	// Проводки по реализации товаров
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный    Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
			// Выручка
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			Проводка.Содержание      = "Реализация товаров";
			Проводка.НомерЖурнала    = "";
			
			Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаТаблицы.СделкаБУ);
			
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;

			Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				
				Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			    Проводка.СуммаНУКт 				= НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл) + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		// необходимо списать наценку (как при перемещении из розницы в опт) для розничных складов
		
		ТаблицаНаценок = УправлениеЗапасамиПартионныйУчет.ТорговаяНаценкаАТТ(Ссылка, ТаблицаПоКомплектам.ВыгрузитьКолонку("Склад"), ТаблицаПоКомплектам.ВыгрузитьКолонку("Номенклатура"), ТаблицаПоКомплектам.ВыгрузитьКолонку("НалоговоеНазначение"));
		СчетНаценки = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		
		Для каждого Строка Из ТаблицаПоКомплектам Цикл
			
			// только по розничному складу
			Если НЕ Строка.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.СчетУчетаБУ.Забалансовый Тогда
				// комиссионные товары учитваются по ценам поступления.
				Продолжить;
			КонецЕсли;
			
			Для Каждого Партия Из Строка.СписанныеПартииБУ Цикл
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура",			Строка.Номенклатура);
				СтруктураОтбора.Вставить("Склад",					Строка.Склад);
				СтруктураОтбора.Вставить("НоменклатурнаяПозиция",	Партия.НоменклатурнаяПозиция);
				СтруктураОтбора.Вставить("Партия",					Партия.Партия);
				
				СтрокаТаблицыНаценок = ТаблицаНаценок.НайтиСтроки(СтруктураОтбора);
				
				Сумма = Строка.СуммаПродажная / Строка.Количество * Партия.Количество;
				
				Если СтрокаТаблицыНаценок.Количество() = 0 Тогда
					ПокупнаяЦена = Сумма;
				ИначеЕсли НЕ СтрокаТаблицыНаценок[0].ПС = 0 Тогда
					СуммаНаценки = СтрокаТаблицыНаценок[0].ТН * Сумма / (СтрокаТаблицыНаценок[0].ПС);
					ПокупнаяЦена = Сумма - СуммаНаценки;
				Иначе
					ПокупнаяЦена = 0;
				КонецЕсли;
				
				Если Сумма - ПокупнаяЦена <> 0 Тогда
					
					// наценку спишем в корреспонденции со счетом учета в АТТ, двумя проводками
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = Организация;
					Проводка.Содержание  = "Торговая наценка";
					
					Проводка.СчетДт      = Строка.КорСчетСписанияБУ;
					Проводка.СчетКт      = Строка.СчетУчетаБУ;
					
					УправлениеЗапасамиПартионныйУчет.ЗаполнитьСубконто(Проводка, Строка);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
					
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеПозиции",  Партия.НоменклатурнаяПозиция);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  Строка.Склад);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
					
					Проводка.Сумма       = -(Сумма - ПокупнаяЦена);
					
					// собственно наценка
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = Организация;
					Проводка.Содержание  = "Торговая наценка";
					
					Проводка.СчетДт      = СчетНаценки;
					Проводка.СчетКт      = Строка.СчетУчетаБУ;
					
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  Строка.Номенклатура);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеПозиции",  Партия.НоменклатурнаяПозиция);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  Строка.Склад);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  Партия.Партия);
					
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  Строка.Номенклатура);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеПозиции",  Партия.НоменклатурнаяПозиция);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  Строка.Склад);
					ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
					
					Проводка.Сумма       = Сумма - ПокупнаяЦена;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	// Проводки по реализации услуг
	Если     СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный    Тогда
		 
		Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл

			// Выручка
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			Проводка.Содержание      = "Оказание услуг";
			Проводка.НомерЖурнала    = "";

			Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,  "ДокументыРасчетовСКонтрагентами", СтрокаТаблицы.СделкаБУ);
			
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
			
			Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				
				Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			    Проводка.СуммаНУКт 				= НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл) + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	// Проводки по передачи тары
	Для каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

		// Выручка
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период          = Дата;
		Проводка.Активность      = Истина;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		Проводка.Содержание      = "Передача возвратной тары";
		Проводка.НомерЖурнала    = "";

		Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,  "ДокументыРасчетовСКонтрагентами", СтрокаТаблицы.СделкаБУ);
		
		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
		
		Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			
			Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
		    Проводка.СуммаНУКт 				= НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтрокаТаблицы.ПроводкиСуммаБезНДСРегл) + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			
		КонецЕсли;

	КонецЦикла;

	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли;
//ВСТАВКА РЕЗОНАНС
КонецЕсли;
//КОНЕЦ ВСТАВКИ
	
	// НДС 
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, 
				  ТаблицаПоВторомуСобытиюНал, МассивРасчетныхДокументов, Отказ);
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, 
						ТаблицаПоВторомуСобытиюНал, МассивРасчетныхДокументов, Отказ)
	
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();                                                                                                                               
	ТаблицаКопия.Свернуть("СделкаНУ, СделкаБУ, СтавкаНДС, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал,ПроводкиСуммаНДСКурсНБУ");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();                                                                                                           					
	ТаблицаКопия.Свернуть("СделкаНУ, СделкаБУ, СтавкаНДС, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал,ПроводкиСуммаНДСКурсНБУ");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	ТаблицаДвижений.Свернуть("СделкаНУ, СделкаБУ, СтавкаНДС, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал,ПроводкиСуммаНДСКурсНБУ");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = "НДС: налоговые обязательства: отгрузка";
			Проводка.НомерЖурнала               = "";

			Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				Проводка.СчетДт                     = СтрокаТаблицы.СчетДоходовБУ;
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					
					Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
					
				КонецЕсли;
				
			Иначе	
				// с 2011 года согласно НК начисляются обязательства при поставке товаров по договорам комиссии
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный;
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаТаблицы.СделкаНУ);//НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));
			КонецЕсли;
			
			Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаНДС;
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтрокаТаблицы.СделкаНУ);//НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка));
			
			НалоговыйУчет.РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ПроводкиБУ, Проводка, 
													  "Кт", СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный, 
													  СтруктураШапкиДокумента.ДоговорКонтрагента, 
													  //НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента, Ссылка, Сделка), МассивРасчетныхДокументов,
													  СтрокаТаблицы.СделкаНУ, МассивРасчетныхДокументов,
													  Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация,
													  СтрокаТаблицы.СтавкаНДС,	
													  ,,,СтрокаТаблицы.ПроводкиСуммаНДСВал, СтрокаТаблицы.ПроводкиСуммаНДСКурсНБУ, ?(СоответствиеКурсовЗачетаАвансаЗаказам.Получить(СтрокаТаблицы.СделкаБУ) = Неопределено, КурсЗачетаАвансаРегл, СоответствиеКурсовЗачетаАвансаЗаказам.Получить(СтрокаТаблицы.СделкаБУ)));
								  
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ)
	
	ТаблицаПоВторомуСобытиюНал = НалоговыйУчет.СоздатьСтруктуруТаблицыНалоговыхСумм();
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в бухгалтерском учете, тогда не отражаем и в подсистеме учета НДС
		Возврат ТаблицаПоВторомуСобытиюНал;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ЕстьНДС Тогда
		Возврат ТаблицаПоВторомуСобытиюНал;
	КонецЕсли;
	
	//Отразим Продажи в регистре ПродажиНалоговыйУчет
	НаборДвижений = Движения.ПродажиНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	ТаблицаДвиженийТара = ТаблицаДвижений.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаНУ,СтавкаНДС","СуммаСНДСВал, СуммаНДСВал");
	ТаблицаПродаж = ТаблицаКопия.Скопировать();
	
	// ТОВАРЫ
	Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СделкаНУ,СтавкаНДС","СуммаСНДСВал, СуммаНДСВал");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);
		
	КонецЕсли;		
	ТаблицаПродаж.Свернуть("СделкаНУ,СтавкаНДС","СуммаСНДСВал, СуммаНДСВал");
	ТаблицаПродаж.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаПродаж.Колонки.СуммаНДСВал.Имя  = "СуммаНДС";
	ТаблицаПродаж.Колонки.СделкаНУ.Имя     = "Сделка";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	//ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
	//																СтруктураШапкиДокумента.Ссылка, 
	//																СтруктураШапкиДокумента.Сделка),
	//								  "Сделка");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю, "Событие");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");
		
	Иначе		
		// упрощенный налоговый учет
		Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(0, 												"СуммаНДС");	
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентомРегл Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			НалоговыйУчет.ЗаполнитьДокументыРасчета(ТаблицаДвижений, ДокументыРасчетовСКонтрагентом.Выгрузить(), "Реализация");
		КонецЕсли;			
		
	КонецЕсли;	
	
	//ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СделкаНУ, СтавкаНДС","СуммаСНДСВал, СуммаНДСВал");
	ТаблицаКопия.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	ТаблицаКопия.Колонки.СуммаНДСВал.Имя  = "СуммаНДС";
	ТаблицаКопия.Колонки.СделкаНУ.Имя     = "Сделка";										  
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	//ТаблицаДвиженийТара.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
	//																	СтруктураШапкиДокумента.Ссылка, 
	//																	СтруктураШапкиДокумента.Сделка),
	//								  	  "Сделка");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю, "Событие");
    ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина, "ВозвратнаяТара");
	
	Если СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// очистим налоговые реквизиты
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(0, 												"СуммаНДС");
		
	Иначе		
		// упрощенный налоговый учет
		Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
			ТаблицаДвиженийТара.ЗаполнитьЗначения(0, 												"СуммаНДС");	
			ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), 			"СтавкаНДС");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентомРегл Тогда
			// взаиморасчеты по договору по расчетным документам - необходимо заполнить в регистре реквизит РасчетныйДокумент
			НалоговыйУчет.ЗаполнитьДокументыРасчета(ТаблицаДвиженийТара, ДокументыРасчетовСКонтрагентом.Выгрузить(), "Реализация");
		КонецЕсли;			
		
	КонецЕсли;		
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
		Движения.ПродажиНалоговыйУчет.Записать();
			
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
			
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
			
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
		Движения.ПродажиНалоговыйУчет.Записать();
			
	КонецЕсли;
	
	
	// ОжидаемыйИПодтвержденныйНДСПродаж
	Если НЕ СтруктураШапкиДокумента.СложныйНалоговыйУчет Тогда
		
		// Движения формируются по данным рассчета "первого события" 
	   НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ЭтотОбъект, ТаблицаПоВторомуСобытиюНал);
	
	Иначе

		НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		ТаблицаДвиженийТара = ТаблицаДвижений.Скопировать();
		
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СделкаНУ, СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
		ТаблицаПродаж = ТаблицаКопия.Скопировать();
		
		// УСЛУГИ
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
		ТаблицаКопия.Свернуть("СделкаНУ, СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);
		ТаблицаПродаж.Свернуть("СделкаНУ, СтавкаНДС","СуммаБезНДСВал,СуммаНДСВал");
		ТаблицаПродаж.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ТаблицаПродаж.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
		ТаблицаПродаж.Колонки.СделкаНУ.Имя     = "Сделка";		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		//ТаблицаДвижений.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
		//																СтруктураШапкиДокумента.Ссылка, 
		//																СтруктураШапкиДокумента.Сделка),
		//								  	"Сделка");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");

		
		// ТАРА
		ТаблицаКопия = ТаблицаПоТаре.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС, СделкаНУ","СуммаБезНДСВал");
		ТаблицаКопия.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ТаблицаКопия.Колонки.СделкаНУ.Имя     = "Сделка";		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		//ТаблицаДвиженийТара.ЗаполнитьЗначения(НалоговыйУчет.ОпределитьСделкуНалоговыйУчет(СтруктураШапкиДокумента,
		//																	СтруктураШапкиДокумента.Ссылка, 
		//																	СтруктураШапкиДокумента.Сделка),
		//									  "Сделка");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина            , "ВозвратнаяТара");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация, "СобытиеНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС   , "КодОперации");
			
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
			
		КонецЕсли;
		
		Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
		
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
			Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат ТаблицаПоВторомуСобытиюНал;
	
КонецФункции

Процедура ДвиженияПоРегиструРеализацияУслугРегл(СтруктураШапкиДокумента, ДатаДока, ТаблицаПоУслугам)
	
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦен Тогда
		Возврат;
	КонецЕсли;
	
	ТипСтатьяЗатрат = Тип("СправочникСсылка.СтатьиЗатрат");
	
	ДвиженияРеализацияУслуг = Движения["РеализацияУслуг"];
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		СтрокаДвижения                       = ДвиженияРеализацияУслуг.Добавить();
		СтрокаДвижения.Период                = ДатаДока;
		СтрокаДвижения.Организация           = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.СчетРасходов          = СтрокаТаблицы.СчетРасходовБУ;
		СтрокаДвижения.НоменклатурнаяГруппа  = СтрокаТаблицы.НоменклатурнаяГруппа;
		СтрокаДвижения.Сумма                 = СтрокаТаблицы.Сумма;
		
		Если СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ = Истина Тогда
		    СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
		Иначе
			СтрокаДвижения.НалоговоеНазначениеДоходовИЗатрат  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
		КонецЕсли;
		
		ЕстьСтатьяЗатрат = Ложь;
		Для Н = 1 По 3 Цикл
			Если ТипЗнч(СтрокаТаблицы["СубконтоРасходовБУ" + Н]) = ТипСтатьяЗатрат Тогда
				ЕстьСтатьяЗатрат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьСтатьяЗатрат = Истина Тогда
			СтрокаДвижения.СтатьяЗатрат = СтрокаТаблицы["СубконтоРасходовБУ" + Н];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструРеализацияУслугУпр(СтруктураШапкиДокумента, ДатаДока, ТаблицаПоУслугам)
	
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦенУпр Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРеализацияУслуг = Движения["РеализацияУслугУправленческийУчет"];
	
	ЗаказРеализацияУслуг = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,Истина);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		СтрокаДвижения                       = ДвиженияРеализацияУслуг.Добавить();
		СтрокаДвижения.Период                = ДатаДока;
		СтрокаДвижения.НоменклатурнаяГруппа  = СтрокаТаблицы.НоменклатурнаяГруппа;
		СтрокаДвижения.Номенклатура			 = СтрокаТаблицы.Номенклатура;
		СтрокаДвижения.Подразделение		 = СтруктураШапкиДокумента.Подразделение;
		СтрокаДвижения.ЗаказПокупателя		 = ЗаказРеализацияУслуг;
		СтрокаДвижения.ДокументПродажи		 = Ссылка;
		СтрокаДвижения.Сумма                 = СтрокаТаблицы.СуммаУпр - СтрокаТаблицы.НДСУпр;
		СтрокаДвижения.НДС					 = СтрокаТаблицы.НДСУпр;
	КонецЦикла;
	
КонецПроцедуры


// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");

	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Прежде всего, проверим заполнение реквизита Организация в шапке документа
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	// Теперь позовем общую процедуру проверки
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	// Организация не заполнена, получать учетную политику нет смысла
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация, "Нал");
		
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015"       , УчетнаяПолитикаНУ.ЕстьНалогНаПрибыльДо2015);
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитикаНУ.ЕстьНДС);
	
	УчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация, "Бух");
	РазрешитьУчетУслугБезПлановыхЦен = Не УчетнаяПолитикаБУ.ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	СтруктураШапкиДокумента.Вставить("РазрешитьУчетУслугБезПлановыхЦен", РазрешитьУчетУслугБезПлановыхЦен);
	
	УчетнаяПолитикаУУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, , "Упр");
	РазрешитьУчетУслугБезПлановыхЦенУпр = Не УчетнаяПолитикаУУ.ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	СтруктураШапкиДокумента.Вставить("РазрешитьУчетУслугБезПлановыхЦенУпр", РазрешитьУчетУслугБезПлановыхЦенУпр);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

Процедура ПроверкаАктуальностиУчета(СтруктураШапкиДокумента, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если Константы.НеИспользоватьДатуАктуальностиУчета.Получить() ИЛИ НЕ Константы.ИнформироватьЕслиУчетНеАктуален.Получить() Тогда
			Возврат;
		КонецЕсли;
		
		МассивРазделовУчета = Новый Массив;
		// в каких видах учета должен отражаться документ
		МассивРазделовУчета.Добавить(Перечисления.РазделыУчета.ОценкаМПЗ);
		МассивРазделовУчета.Добавить(Перечисления.РазделыУчета.РасчетыСКонтрагентами);
		ОбщегоНазначения.СообщитьОНеактуальностиУчета(СтруктураШапкиДокумента, МассивРазделовУчета, Заголовок);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) ИЛИ Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", Основание.Метаданные()) Тогда
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
	Иначе
		ОтражатьВУправленческомУчете = НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "НеОтражатьДокументыВУправленческомУчете");
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", Основание.Метаданные()) Тогда
		ОтражатьВБухгалтерскомУчете = Основание.ОтражатьВБухгалтерскомУчете;
	Иначе
		ОтражатьВБухгалтерскомУчете = НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "НеОтражатьДокументыВБухгалтерскомУчете");
	КонецЕсли;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ЗаполнениеДокументов.ЗаполнитьДанныеДоставкиПоОснованию(ЭтотОбъект, Основание);

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") И 
			 ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			БанковскийСчетОрганизации = Основание.СтруктурнаяЕдиница;
		КонецЕсли;
		
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;

		Если Не ЗначениеЗаполнено(Склад) Тогда
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;

		#Если Клиент Тогда
			Если Не ЗначениеЗаполнено(Склад) И НЕ мУказаниеСкладовВТЧ И ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ВвестиЗначение(Склад, "Выберите склад", Тип("СправочникСсылка.Склады"));
			КонецЕсли;
		#КонецЕсли

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		 Или (ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		      И ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
			Сделка = Основание;
		Иначе
			Сделка = Основание.ЗаказПокупателя;
		КонецЕсли;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

			СкопироватьТовары(Основание);
			СкопироватьВозвратнуюТару(Основание);
			СкопироватьУслуги(Основание);
			
			Если ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				БанковскийСчетОрганизации = Основание.СтруктурнаяЕдиница;
			КонецЕсли;

		ИначеЕсли Основание.Проведен Тогда // Заказ покупателя
			
			// Заполним табличные части неполученными ТМЦ (резервом) по заказу покупателя.
			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(Товары, Основание);
			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ВозвратнаяТара, Основание);
			ЗаполнитьУслугиПоОстаткамУпр();

		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты шапки по документу основанию.
		Организация   = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ВидПередачи   = Перечисления.ВидыПередачиТоваров.СоСклада;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		КонецЕсли;
		

		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
			Склад = Основание.СкладОрдер;
		Иначе
			Склад = Основание.СкладОрдер.Склад;
		КонецЕсли;

		МассивЗаказов = Неопределено;
#Если Клиент Тогда

		СтруктТабЧастей = Новый Структура;
		СтруктТабЧастей.Вставить("Товары",         "Заказ");
		СтруктТабЧастей.Вставить("ВозвратнаяТара", "Заказ");

		СтруктПараметры = Новый Структура;
		СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
		
		ЗаказыВТабЧасти = Константы.УказаниеЗаказовВТабличнойЧастиДокументов.Получить();
		СтруктПараметры.Вставить("ЗаказВТабЧасти",
			    ЗаказыВТабЧасти = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации
			Или ЗаказыВТабЧасти = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);

		РезультатВыбораЗаказа = УправлениеЗаказами.ВыбратьЗаказИзДокументаОснования(Основание, СтруктПараметры);

		Если РезультатВыбораЗаказа.ВыборСделан Тогда

			Контрагент         = РезультатВыбораЗаказа.Контрагент;

			Если ЗаполнениеДокументов.МожноИспользоватьДоговорДляДокумента(РезультатВыбораЗаказа.Договор, Контрагент, Организация, мСтруктураПараметровДляПолученияДоговора) Тогда
				ДоговорКонтрагента = РезультатВыбораЗаказа.Договор;
			КонецЕсли;

			МассивЗаказов      = РезультатВыбораЗаказа.Заказ;
			Если МассивЗаказов.Количество() = 1 Тогда
				Сделка         = МассивЗаказов[0];
			КонецЕсли;
		КонецЕсли;
#Иначе
		Контрагент         = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойПокупатель");
#КонецЕсли

		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;

		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ОбщегоНазначения.ПолучитьРабочуюДату());
		КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;

		// ТипЦен.
		ТипЦен = ДоговорКонтрагента.ТипЦен;

		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПродажи");
		КонецЕсли;

		// Флаги включения налогов.
		УчитыватьНДС = Истина;
		Если ЗначениеЗаполнено(ТипЦен) Тогда

			// Если цены выбранного типа расчетные, то флаги включения налогов надо брать из базовой цены.
			ВремТипЦен       = ?(ТипЦен.Рассчитывается, ТипЦен.БазовыйТипЦен, ТипЦен);
			СуммаВключаетНДС = ВремТипЦен.ЦенаВключаетНДС;

		Иначе
			// Заполним значениями по умолчанию (не заполнен ТипЦен).
			СуммаВключаетНДС = НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "СуммаНеВключаетНДС");
		КонецЕсли;

		Если Основание.Проведен Тогда

			// Заполним табличные части по документу основанию (Поступление товаров);
			// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
			ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание,"Товары", МассивЗаказов);
			ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(Основание, МассивЗаказов);

		КонецЕсли;

	КонецЕсли;

	Если НЕ ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
	
		ОбработкаЗаполненияРегл(Основание);
	
	КонецЕсли;

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
		УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Услуги.Очистить();

	КонецЕсли;
	
	// Если договор внешнеэкономический, то надо почистить закладку "ВозвратнаяТара".
	Если ВозвратнаяТара.Количество() > 0
		И ДоговорКонтрагента.Внешнеэкономический Тогда

		ВозвратнаяТара.Очистить();

	КонецЕсли;
	
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);
	
	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ПогрешностиОкругления, ?(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование, "Оборудование", "Товары"));
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, ЭтотОбъект, ПогрешностиОкругления, "Услуги");
	КонецЕсли;
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда 

		// Необходимо, чтобы качество обязательно было "Новый"
		КачествоНовый = Справочники.Качество.Новый;
		ВсегоЗаказ	=0;
		ВсегоТоваров=0;
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.Качество <> КачествоНовый Тогда
				СтрокаТаблицы.Качество = КачествоНовый;
			КонецЕсли;
			ВсегоЗаказ	=ВсегоЗаказ	  + СтрокаТаблицы.КоличествоЗаявки;
			ВсегоТоваров=ВсегоТоваров + СтрокаТаблицы.Количество + СтрокаТаблицы.СкидкаНаВес;
		КонецЦикла;
		//***
		ЭтотОбъект.ИтогоКоличествоЗаявки	=ВсегоЗаказ;
		ЭтотОбъект.ИтогоКоличествоТовара	=ВсегоТоваров;
		//***
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда 

		// Необходимо, чтобы качество обязательно было "Новый"
		КачествоНовый = Справочники.Качество.Новый;
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.Качество <> КачествоНовый Тогда
				СтрокаТаблицы.Качество = КачествоНовый;
			КонецЕсли;
		КонецЦикла
	Иначе
		//способ списания брака всегда "со склада"
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				Сообщить("В строке №"+СтрокаТаблицы.НомерСтроки+" табличной части ""Товары"" изменен способ списания остатка товаров: было 'Из резерва', установлено 'Со склада'."+Символы.ПС+"   Списывать брак из резерва запрещено.", СтатусСообщения.Внимание);

			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				Сообщить("В строке №"+СтрокаТаблицы.НомерСтроки+" табличной части ""Возвратная тара"" изменен способ списания остатка товаров: было 'Из резерва', установлено 'Со склада'."+Символы.ПС+"   Списывать брак из резерва запрещено.", СтатусСообщения.Внимание);
			КонецЕсли;
			

		КонецЦикла;
				

	КонецЕсли;

	ЗаполнитьСкладыВТЧ();
	УправлениеЗаказами.ЗаполнитьЗаказПокупателяВТЧ(ВидОперации,ЭтотОбъект, "Реализация");
	Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) 
		   И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) 
		   И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
	КонецЦикла;
	
	РозницаВПродажныхЦенах = (НЕ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование);									
	
	Для каждого СтрокаТЧ  Из Товары Цикл
		Если  РозницаВПродажныхЦенах
			И СтрокаТЧ.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный 
			И НЕ СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		КонецЕсли;
	КонецЦикла;	
	ВсегоВесТары=0;
	Для каждого СтрокаТЧ  Из ВозвратнаяТара Цикл
		Если СтрокаТЧ.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		КонецЕсли;
		ВсегоВесТары	=	ВсегоВесТары+СтрокаТЧ.Вес;
	КонецЦикла;				
	ЭтотОбъект.ИтогоВесТары		=ВсегоВесТары;

	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "СоставНабора", "СерийныеНомераСоставНабора");
	
	УчетнаяПолитикаНеЗадана = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.УчетнаяПолитикаНалоговыйУчет(Дата, УчетнаяПолитикаНеЗадана, Организация);
	Если НЕ УчетнаяПолитика.ЕстьНДС Тогда
		// организация - не плательщик НДС. Установим во всех ТЧ признак соответствующего учета НДС
		НеОБлНДСДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из ВозвратнаяТара Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
		Для каждого СтрокаТЧ  Из Услуги Цикл
		    СтрокаТЧ.НалоговоеНазначение = НеОБлНДСДеятельность;
		КонецЦикла; 
	КонецЕсли; 
	
	Если НЕ УчетнаяПолитика.ЕстьНалогНаПрибыльДо2015 Тогда
		
		Для каждого СтрокаТЧ  Из Товары Цикл
		    СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		КонецЦикла; 
		
		Для каждого СтрокаТЧ  Из ВозвратнаяТара Цикл
		    СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		КонецЦикла; 
		
		Для каждого СтрокаТЧ  Из Услуги Цикл
		    СтрокаТЧ.НалоговоеНазначениеДоходовИЗатрат = Неопределено;
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если ЕстьАвансДо01042011 Тогда
		Если НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
			СуммаВДВРПоАвансуДо01042011	= СуммаДокумента + ВозвратнаяТара.Итог("Сумма");
		КонецЕсли;
	Иначе	
		НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ = Ложь;
	КонецЕсли;
	
	Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
//ВСТАВКА РЕЗОНАНС
	Р_УстановитьЭтоГСМНаСкладах();
//КОНЕЦ ВСТАВКИ
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	Перем ДеревоПолейЗапросаПоШапке;
	
  //ВСТАВКА РЕЗОНАНС
	мРежимОбменаТалонов = Ложь;
	мРежимВедомостиТалоныКарточки = Ложь;
	тТипТов = Ложь; тТипГСМ = Ложь; тТопКрт = Ложь;
	Р_ПолучитьТипыНоменклатурыТовары(тТипТов, тТипГСМ, тТопКрт);
	Если ((тТипТов И тТипГСМ) ИЛИ (тТипГСМ И тТопКрт) ИЛИ (тТипТов И тТопКрт)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Недопустимо смешение в одном документе ГСМ и других видов номенклатуры", Отказ);
		Возврат;
	КонецЕсли;
	Если Р_РежимТалоны И (НЕ тТипТов) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе продажи талонов должны быть только товары (талоны)", Отказ);
		Возврат;
	КонецЕсли;
	Если Р_РежимТалоны Тогда
		Если ДоговорКонтрагента.ВидВзаиморасчетов <> Справочники.ВидыВзаиморасчетов.Р_ПоТалонамГСМ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для продажи талонов договор контрагента должен быть с видом взаиморасчетов ""По талонам ГСМ""", Отказ);
			Возврат;
		КонецЕсли;
		Если Р_ВозвратХранения Тогда
			мРежимОбменаТалонов = Истина;
		КонецЕсли
	ИначеЕсли тТопКрт Тогда
		Если (ДоговорКонтрагента.ВидВзаиморасчетов <> Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамГСМ)
		   И (ДоговорКонтрагента.ВидВзаиморасчетов <> Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамЛитрыГСМ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для продажи топливных карт договор контрагента должен быть с видом взаиморасчетов ""По карточкам (деньги/литры) ГСМ""", Отказ);
			Возврат;
		КонецЕсли
	ИначеЕсли тТипГСМ Тогда
		Если НЕ ЗначениеЗаполнено(Р_ВидУчетаГСМ) Тогда 
			ОбщегоНазначения.СообщитьОбОшибке("Не указан ""Вид отгрузки ГСМ""", Отказ);
			Возврат;
		КонецЕсли;
		Если ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамЛитрыГСМ
		 //ИЛИ ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамГСМ
		 ИЛИ ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамЛитрыЭмитентовГСМ 
		 //ИЛИ ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамЭмитентовГСМ
		 ИЛИ ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоТалонамГСМ
		 ИЛИ ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоТалонамЭмитентовГСМ
		 ИЛИ ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоВедомостямГСМ Тогда
			тТипГСМ = Ложь;
			мРежимВедомостиТалоныКарточки = Истина;
			Если Р_ВидУчетаГСМ <> Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоОбъему Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В документе реализации ГСМ по ведомостям, талонам и картам (литры) ""Вид отгрузки ГСМ"" должен быть только ""По объему""", Отказ);
				Возврат;
			ИначеЕсли ЗначениеЗаполнено(Склад) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В документе реализации ГСМ по ведомостям, талонам и картам (литры) склад должен быть пустым", Отказ);
				Возврат;
			КонецЕсли
		ИначеЕсли ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамГСМ
			  ИЛИ ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамЭмитентовГСМ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Реализация ГСМ по картам (деньги) запрещено", Отказ);
			Возврат;
		Иначе
			Если ЗначениеЗаполнено(Склад) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В документе реализации ГСМ с АЗС или нефтебазы склад должен быть пустым", Отказ);
			КонецЕсли;
			Р_ПроверитьРеквизитыНефтебазыАЗС(Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли
		КонецЕсли
	// тТипТов
	ИначеЕсли ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамЛитрыГСМ 
		  ИЛИ ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамГСМ
		  ИЛИ ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамЛитрыЭмитентовГСМ
		  ИЛИ ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамЭмитентовГСМ
		  ИЛИ ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоТалонамГСМ
		  ИЛИ ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоТалонамЭмитентовГСМ
		  ИЛИ ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоВедомостямГСМ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе реализации товаров запрещено использовать договор по ведомостям, талонам и карточкам", Отказ);
		Возврат;
	КонецЕсли;
//КОНЕЦ ВСТАВКИ
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда		
		ПроверкаАктуальностиУчета(СтруктураШапкиДокумента, Заголовок);
	КонецЕсли;

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладВТабличнойЧасти =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		                  Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", СкладВТабличнойЧасти);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                      , "ВедениеВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"                       , "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                                , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"                                , "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СложныйНалоговыйУчет"					   , "СложныйНалоговыйУчет");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                                , "СделкаВидОперации");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"                                  , "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"               , "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентом",      "ВестиПоДокументамРасчетовСКонтрагентом");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентомРегл",      "ВестиПоДокументамРасчетовСКонтрагентомРегл");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",     "ВедениеУчетаПоПроектам",                       "ВедениеУчетаПоПроектам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СхемаНалоговогоУчета"                      , "СхемаНалоговогоУчета");
	
	
	// Если сделка - Заказ покупателя, то надо цену для проведения пересчитать в валюту заказа.
	Если ЗначениеЗаполнено(Сделка) 
		И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                            , "ВалютаЗаказа");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                         , "КурсВзаиморасчетовЗаказа");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"                    , "КратностьВзаиморасчетовЗаказа");
	КонецЕсли;

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);

	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);
	
	// Для определения где нужно проверять заказ: в шапке или в ТЧ.
	ЗаказВТабличнойЧасти = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", ЗаказВТабличнойЧасти);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);

	// Получим необходимые данные для проведения и проверки заполенения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	
	// Получим необходимые данные для проведения и проверки заполенения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                               , "Цена");
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                              , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                           , "Номенклатура.Комплект");
//ЗАМЕНА РЕЗОНАНС
// ИСХОДНЫЙ ТЕКСТ
//	СтруктураПолей.Вставить("Количество"                         , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
//	СтруктураПолей.Вставить("КоличествоДок"                      , "Количество");
//	СтруктураПолей.Вставить("Качество"                           , "Качество");
// НОВЫЙ ТЕКСТ
	Если тТипГСМ Тогда
		Если мВидОсновногоКоличественногоУчетаГСМ = Р_ВидУчетаГСМ Тогда
			СтруктураПолей.Вставить("Количество"          		, "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
			СтруктураПолей.Вставить("КоличествоДок"             , "Количество");
		Иначе
			СтруктураПолей.Вставить("Количество"          		, "Р_Количество2 * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
			СтруктураПолей.Вставить("КоличествоДок"             , "Р_Количество2");
		КонецЕсли
	Иначе
		//***
		СтруктураПолей.Вставить("Количество"              		, "Количество*Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент + СкидкаНаВес*Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
		СтруктураПолей.Вставить("КоличествоДок"                 , "Количество+СкидкаНаВес");
	КонецЕсли;
	//КОНЕЦ ЗАМНЫ
	СтруктураПолей.Вставить("Качество"                           , "Качество");
	СтруктураПолей.Вставить("Склад"                              , "Склад");	
	СтруктураПолей.Вставить("Сумма"                              , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                           , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                          , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                                , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                             , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"                        , "НомерСтроки");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                  , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"               , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"        , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"        , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("КоличествоВЕдиницахДокумента"       , "Количество");
	СтруктураПолей.Вставить("СчетУчетаБУ"          				 ,"СчетУчетаБУ");
	СтруктураПолей.Вставить("ПереданныеСчетУчетаБУ"			     ,"ПереданныеСчетУчетаБУ");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("КлючСтроки"                         , "КлючСтроки");
	СтруктураПолей.Вставить("ЗаказПокупателя"                    , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ВидСклада"							 , "Склад.ВидСклада");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"			   , "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("СхемаРеализации"                  , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ"                    , "СхемаРеализации.СчетДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"               , "СхемаРеализации.СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"               , "СхемаРеализации.СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"               , "СхемаРеализации.СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"                   , "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"              , "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"              , "СхемаРеализации.СубконтоСебестоимости2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"              , "СхемаРеализации.СубконтоСебестоимости3");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"			   , "Номенклатура.НоменклатурнаяГруппа");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     		   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     		   , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураПростыхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей);

	// Получим необходимые данные для проведения и проверки заполенения данных 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("Склад"                     , "Склад");
	СтруктураПолей.Вставить("ВидСклада"					, "Склад.ВидСклада");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");
	
	СтруктураПолей.Вставить("БланкСтрогогоУчета", "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("СчетУчетаБУ" , "СчетУчетаБУ");
	СтруктураПолей.Вставить("Цена"        , "Цена");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	
 	СтруктураПолей.Вставить("СхемаРеализации"           , "СхемаРеализации");
 	СтруктураПолей.Вставить("СчетДоходовБУ"             , "СхемаРеализации.СчетДоходов");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ1"        , "СхемаРеализации.СубконтоДоходов1");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ2"        , "СхемаРеализации.СубконтоДоходов2");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ3"        , "СхемаРеализации.СубконтоДоходов3");
 	СтруктураПолей.Вставить("СчетРасходовБУ"            , "СхемаРеализации.СчетСебестоимости");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ1"       , "СхемаРеализации.СубконтоСебестоимости1");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ2"       , "СхемаРеализации.СубконтоСебестоимости2");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ3"       , "СхемаРеализации.СубконтоСебестоимости3");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"		, "Номенклатура.НоменклатурнаяГруппа");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"     		   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     		   , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС"    	, "Ссылка.СчетУчетаНДС");

 	СтруктураПростыхПолей.Вставить("СтавкаНДС"              , Перечисления.СтавкиНДС.НеНДС);
 	СтруктураПростыхПолей.Вставить("НДС"                    , 0);
	 
	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей,СтруктураПростыхПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данных по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"          , "Содержание");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"          , "Количество");
	СтруктураПолей.Вставить("Цена"                , "Цена");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"         , "НомерСтроки");
	СтруктураПолей.Вставить("ЗаказПокупателя"     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"        , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"        , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	
	СтруктураПолей.Вставить("БланкСтрогогоУчета",  "Номенклатура.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("СхемаРеализации",     "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ" ,      "СхемаРеализации.СчетДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1",  "СхемаРеализации.СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2",  "СхемаРеализации.СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3",  "СхемаРеализации.СубконтоДоходов3");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа","Номенклатура.НоменклатурнаяГруппа");
	
	Если СтруктураШапкиДокумента.РазрешитьУчетУслугБезПлановыхЦен Тогда
		СтруктураПолей.Вставить("СчетРасходовБУ"   ,"СхемаРеализации.СчетСебестоимости");
		СтруктураПолей.Вставить("СубконтоРасходовБУ1"       , "СхемаРеализации.СубконтоСебестоимости1");
 		СтруктураПолей.Вставить("СубконтоРасходовБУ2"       , "СхемаРеализации.СубконтоСебестоимости2");
 		СтруктураПолей.Вставить("СубконтоРасходовБУ3"       , "СхемаРеализации.СубконтоСебестоимости3");
	КонецЕсли;	

	СтруктураПолей.Вставить("НалоговоеНазначение"     		   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"     		   , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС"    				   , "Ссылка.СчетУчетаНДС");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураПростыхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;
	
	РезультатЗапросаПоУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураПростыхПолей);
	
	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;

	// Подготовим таблицы для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ТаблицаПоТаре 	 = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);

	ПроводитьПоВзаиморасчетам = НЕ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);

	СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
	                                                Отказ, Заголовок);
	
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "Состав набора".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура");
	СтруктураПолей.Вставить("Количество");
	СтруктураПолей.Вставить("Цена");
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураПолей.Вставить("СчетУчетаБУ");
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставНабора", СтруктураПолей, Отказ, Заголовок);
	
//ЗАМЕНА РЕЗОНАНС
//Корректировка движений документа для случая операций с ГСМ в т.ч и для операций возврата с хранения
// ИСХОДНЫЙ ТЕКСТ
	////Проверим на возможность проведения в БУ и НУ.
	//Если ОтражатьВБухгалтерскомУчете Тогда
	//	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
	//										 ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете, мВалютаРегламентированногоУчета, 
	//										 Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
	//КонецЕсли;

	//// Движения по документу
	//Если Не Отказ Тогда
	//	// Подготовим таблицу скидок для проведения.
	//	ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, ТаблицаПоУслугам, СтруктураШапкиДокумента);
	//	
	//	ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре,
	//						ТаблицаПоУслугам, 
	//						ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	//						Отказ, Заголовок);
	//КонецЕсли;
	//
	//Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	//мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", Неопределено);
// НОВЫЙ ТЕКСТ
                                    
    Если Отказ Тогда Возврат; КонецЕсли;

	//ВСТАВКА РЕЗОНАНС /работа с талонами
	// Добавим таблицу ГСМ - эквивалентно Талонам
	ТаблицаГСМНаХранении = Новый ТаблицаЗначений;
	//Если Р_РежимТалоны Тогда
	//	ТаблицаПоГСМ = Р_РаботаСТалонами.Р_СформироватьТабличнуюЧастьГСМ(ТаблицаПоТоварам,ЭтотОбъект);
	//КонецЕсли;
	//КОНЕЦВСТАВКИ РЕЗОНАНС  

	Если Р_ВозвратХранения И (НЕ Р_РежимТалоны) Тогда 

		Если НЕ Отказ Тогда 
			Р_ДвиженияПоРегистрамНефтебазы(РежимПроведения, ТаблицаПоТоварам, Отказ);
		КонецЕсли;
		
		Если НЕ Отказ и ОтражатьВБухгалтерскомУчете Тогда
			Р_ВыполнитьДвиженияПоПроводкамНаХранении();
			Движения.Хозрасчетный.Записать();
		КонецЕсли
		
	Иначе
		
		мДвиженияПоЗабалансуВыполнены = Ложь;
		Если мРежимВедомостиТалоныКарточки Тогда
			Р_ДополнительныеДвиженияПоГСМНаХраненииАЗС(Отказ,ТаблицаГСМНаХранении);
			мДвиженияПоЗабалансуВыполнены = Истина;
		ИначеЕсли тТипГСМ Тогда 
			Р_ДвиженияПоРегистрамНефтебазы(РежимПроведения, ТаблицаПоТоварам, Отказ);
		ИначеЕсли тТопКрт Тогда 
			Р_ДвиженияПоРегистрамТопливныхКарт(РежимПроведения, Отказ);
		ИначеЕсли Р_РежимТалоны Тогда
			//Автоматическое формирование Документов Талонов при проведении документа
			//в случае отсутствия спец коментария 
			//если комментарий с &, есть значит документ был создан автоматически и 
			//повторное перепроведение и переформирование талонов не имеет смысла
			Если Найти(Комментарий,"&")=0 Тогда
				ОбработкаФормированияДокументов = Обработки.Р_ФормированиеДокументовПоПродажеТалонов.Создать();
				Отказ = НЕ ОбработкаФормированияДокументов.СформироватьДокументыПродажиТалонов(Ссылка);
			КонецЕсли;
			Р_ДополнительныеДвиженияПоГСМНаХраненииАЗС(Отказ,ТаблицаГСМНаХранении);
			мДвиженияПоЗабалансуВыполнены = Истина;
		КонецЕсли;
			
		//Проверим на возможность проведения в БУ и НУ.
		Если ОтражатьВБухгалтерскомУчете Тогда
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
												 ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете, мВалютаРегламентированногоУчета, 
												 Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
		КонецЕсли;

	    
		// Движения по документу
		Если Не Отказ Тогда
			// Подготовим таблицу скидок для проведения.
			ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, ТаблицаПоУслугам, СтруктураШапкиДокумента);
			
			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре,
			ТаблицаПоУслугам, 
			ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
			Отказ, Заголовок);
		КонецЕсли;
		
		//Дополнительные проводки по 
		Если НЕ мДвиженияПоЗабалансуВыполнены Тогда 
			Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
		
			мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", Неопределено);
		КонецЕсли;
		
	КонецЕсли;	
	//КОНЕЦ ЗАМЕНЫ
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
//ВСТАВКА РЕЗОНАНС
	Р_ОтменаДвиженияПоРегистрамТопливныхКарт(Отказ);
//КОНЕЦ ВСТАВКИ
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	ОсновноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение");

	Если ЗначениеЗаполнено(ОсновноеПодразделение) Тогда
		Подразделение = ОсновноеПодразделение;
	КонецЕсли;
	
	//Если в копируемом документе было право отпуска без контроля взаиморасчетов, то в новом документе это право нужно давать явно.
	ОтключитьКонтрольВзаиморасчетов = Ложь;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	ОбщегоНазначения.УдалитьРегистрациюДокументаВПоследовательностях(ЭтотОбъект);

КонецПроцедуры

// Функция проверяет возможность расчета автоматических скидок в документе.
//
// Возвращаемое значение:
//  Булево.
//
Функция МожноРассчитыватьАвтоматическиеСкидки() Экспорт

	Если мРассчитыватьАвтоматическиеСкидки = Неопределено Тогда
		Если ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоКоличествуТовара
		 Или ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоСуммеДокумента
		 Или ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоВидуОплаты
		 												 Тогда
			мРассчитыватьАвтоматическиеСкидки = Истина;
		Иначе
			мРассчитыватьАвтоматическиеСкидки = Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат мРассчитыватьАвтоматическиеСкидки;

КонецФункции // МожноРассчитыватьАвтоматическиеСкидки()
//
Функция РассчитыватьАвтоматическиеСкидки() Экспорт

	ТипСделки = (ТипЗнч(Сделка));

	Если Не МожноРассчитыватьАвтоматическиеСкидки()
	 Или Проведен  Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции
// Функция выполняет пересчет автоматических скидок в документе.
//
// Возвращаемое значение:
//  Булево - Истина, если автоматические скидки были рассчитаны.
//
Функция ПересчитатьАвтоматическиеСкидки() Экспорт

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары) + Ценообразование.ПолучитьСуммуДокументаБезСкидки(Услуги);

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации"                      , Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента"                     , СуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта"                              , ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС"                       , УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС"                   , СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета"     , мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика"                    , ПолучитьЗначениеУчетнойПолитики());

		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПересчитатьАвтоматическиеСкидки()

// Функция возвращает структуру со значениями учетной политики.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьЗначениеУчетнойПолитики() Экспорт

	Если мУчетнаяПолитика = Неопределено Тогда
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь);
	КонецЕсли;

	Возврат мУчетнаяПолитика;

КонецФункции // ПолучитьЗначениеУчетнойПолитики()

Процедура ПриИзмененииОрганизации(ПодменюДействияФормы = Неопределено, ЭлементыФормыНомер = Неопределено) Экспорт
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ПодменюДействияФормы, ЭлементыФормыНомер);
	КонецЕсли;
	
КонецПроцедуры

//ВСТАВКА РЕЗОНАНС

Процедура Р_ДвиженияПоРегистрамНефтебазы(РежимПроведения, ТаблицаПоТоварам, Отказ)
		
	Если Р_ВидУчетаГСМ = Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоМассе Тогда
		КвоПоМассе = Истина;
	Иначе
		КвоПоМассе = Ложь;
	КонецЕсли;
	
	НаборДвижений = Движения.Р_ГСМНаСкладах;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	Запрос = Новый запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Качество,
	|	РеализацияТоваровУслугТовары.Коэффициент,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры,
	|	РеализацияТоваровУслугТовары.Склад,
	|	РеализацияТоваровУслугТовары.Р_Количество2,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровУслугТовары.НомерСтроки
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.Количество,
	|	ВТ_Товары.ЕдиницаИзмерения,
	|	ВТ_Товары.Качество,
	|	ВТ_Товары.Коэффициент,
	|	ВТ_Товары.СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Товары.Склад, 0) = 0
	|			ТОГДА &Склад
	|		ИНАЧЕ ВТ_Товары.Склад
	|	КОНЕЦ КАК Склад,
	|	ВТ_Товары.Р_Количество2,
	|	ВТ_Товары.ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА &КвоПоМассе
	|			ТОГДА ВТ_Товары.Количество
	|		ИНАЧЕ ВТ_Товары.Р_Количество2
	|	КОНЕЦ КАК Масса,
	|	ВЫБОР
	|		КОГДА &КвоПоМассе
	|			ТОГДА ВТ_Товары.Р_Количество2
	|		ИНАЧЕ ВТ_Товары.Количество
	|	КОНЕЦ КАК Объем,
	|	ВТ_Товары.НомерСтроки
	|ПОМЕСТИТЬ ВТ_ГСМ
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = &ТипНоменклатурыГСМ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ГСМ.Номенклатура,
	|	ВТ_ГСМ.Количество,
	|	ВТ_ГСМ.ЕдиницаИзмерения,
	|	ВТ_ГСМ.Качество,
	|	ВТ_ГСМ.Коэффициент,
	|	ВТ_ГСМ.СерияНоменклатуры,
	|	ВТ_ГСМ.Склад,
	|	ВТ_ГСМ.Р_Количество2,
	|	ВложенныйЗапрос.МассаОстаток,
	|	ВложенныйЗапрос.ОбъемОстаток,
	|	ВТ_ГСМ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Плотность,
	|	ВЫБОР
	|		КОГДА &ОткорректированоВручную
	|			ТОГДА ВТ_ГСМ.ЕдиницаИзмерения.Коэффициент * ЕСТЬNULL(ВТ_ГСМ.Объем, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &КвоПоМассе
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(ВложенныйЗапрос.Плотность, 0) = 0
	|								ТОГДА 0
	|							ИНАЧЕ ВТ_ГСМ.ЕдиницаИзмерения.Коэффициент * ЕСТЬNULL(ВТ_ГСМ.Масса, 0) / ЕСТЬNULL(ВложенныйЗапрос.Плотность, 0)
	|						КОНЕЦ
	|				ИНАЧЕ ВТ_ГСМ.ЕдиницаИзмерения.Коэффициент * ВТ_ГСМ.Объем
	|			КОНЕЦ
	|	КОНЕЦ КАК Объем,
	|	ВЫБОР
	|		КОГДА &ОткорректированоВручную
	|			ТОГДА ВТ_ГСМ.ЕдиницаИзмерения.Коэффициент * ЕСТЬNULL(ВТ_ГСМ.Масса, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &КвоПоМассе
	|					ТОГДА ВТ_ГСМ.ЕдиницаИзмерения.Коэффициент * ЕСТЬNULL(ВТ_ГСМ.Масса, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЕСТЬNULL(ВложенныйЗапрос.Плотность, 0) = 0
	|							ТОГДА 0
	|						ИНАЧЕ ВТ_ГСМ.ЕдиницаИзмерения.Коэффициент * ЕСТЬNULL(ВТ_ГСМ.Объем, 0) * ЕСТЬNULL(ВложенныйЗапрос.Плотность, 0)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Масса,
	|	&ПриходРасход КАК ВидДвижения,
	|	&Ссылка КАК Регистратор,
	|	ИСТИНА КАК Активность,
	|	&Контрагент КАК Контрагент,
	|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	&Период КАК Период,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.МассаОстаток - ВТ_ГСМ.ЕдиницаИзмерения.Коэффициент * ЕСТЬNULL(ВТ_ГСМ.Масса, 0) < 0
	|				ИЛИ ВложенныйЗапрос.ОбъемОстаток - ВЫБОР
	|					КОГДА &ОткорректированоВручную
	|						ТОГДА ВТ_ГСМ.Объем
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЕСТЬNULL(ВложенныйЗапрос.Плотность, 0) = 0
	|								ТОГДА 0
	|							ИНАЧЕ ВТ_ГСМ.ЕдиницаИзмерения.Коэффициент * ЕСТЬNULL(ВТ_ГСМ.Масса, 0) / ЕСТЬNULL(ВложенныйЗапрос.Плотность, 0)
	|						КОНЕЦ
	|				КОНЕЦ < 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтрицательныеОстатки,
	|	ВТ_ГСМ.НомерСтроки
	|ИЗ
	|	ВТ_ГСМ КАК ВТ_ГСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Р_ГСМНаСкладахОстатки.Склад КАК Склад,
	|			Р_ГСМНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|			Р_ГСМНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			Р_ГСМНаСкладахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|			СУММА(Р_ГСМНаСкладахОстатки.МассаОстаток) КАК МассаОстаток,
	|			СУММА(Р_ГСМНаСкладахОстатки.ОбъемОстаток) КАК ОбъемОстаток,
	|			СРЕДНЕЕ(ВЫБОР
	|					КОГДА ЕСТЬNULL(Р_ГСМНаСкладахОстатки.ОбъемОстаток, 0) = 0
	|						ТОГДА 0
	|					ИНАЧЕ ЕСТЬNULL(Р_ГСМНаСкладахОстатки.МассаОстаток, 0) / ЕСТЬNULL(Р_ГСМНаСкладахОстатки.ОбъемОстаток, 0)
	|				КОНЕЦ) КАК Плотность
	|		ИЗ
	|			РегистрНакопления.Р_ГСМНаСкладах.Остатки(
	|					&Период,
	|					Номенклатура В
	|							(ВЫБРАТЬ
	|								Т.Номенклатура
	|							ИЗ
	|								ВТ_ГСМ КАК Т)
	|						И Склад В
	|							(ВЫБРАТЬ
	|								Т.Склад
	|							ИЗ
	|								ВТ_ГСМ КАК Т)) КАК Р_ГСМНаСкладахОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Р_ГСМНаСкладахОстатки.СерияНоменклатуры,
	|			Р_ГСМНаСкладахОстатки.ХарактеристикаНоменклатуры,
	|			Р_ГСМНаСкладахОстатки.Номенклатура,
	|			Р_ГСМНаСкладахОстатки.Склад) КАК ВложенныйЗапрос
	|		ПО (ВложенныйЗапрос.Номенклатура = ВТ_ГСМ.Номенклатура)
	|			И (ВложенныйЗапрос.ХарактеристикаНоменклатуры = ВТ_ГСМ.ХарактеристикаНоменклатуры)
	|			И (ВложенныйЗапрос.Склад = ВТ_ГСМ.Склад)
	|			И (ВложенныйЗапрос.СерияНоменклатуры = ВТ_ГСМ.СерияНоменклатуры)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Документ.РеализацияТоваровУслуг.Товары","&ДокументРеализацияТоваровУслугТовары");
	Запрос.УстановитьПараметр("ДокументРеализацияТоваровУслугТовары",Товары);
	Запрос.УстановитьПараметр("ТипНоменклатурыГСМ",Перечисления.ТипыНоменклатуры.ГСМ);
	Запрос.УстановитьПараметр("Период",ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("ПриходРасход",ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("КвоПоМассе", КвоПоМассе);
	Запрос.УстановитьПараметр("ОткорректированоВручную",ЭтотОбъект.Р_ОткорректированоВручную);
	Результат = Запрос.Выполнить();
	
	ВыгрузкаЗапроса = Результат.Выгрузить();
	
	//Проверим на позитивность остатков по массе и объему:
	ОтрицательныеОстатки = ВыгрузкаЗапроса.Итог("ОтрицательныеОстатки");
	Если ОтрицательныеОстатки <> Неопределено и ОтрицательныеОстатки <> 0 Тогда 
		
		Для Каждого Элемент из ВыгрузкаЗапроса Цикл 
			
			Если Элемент.МассаОстаток < 0 Тогда
				Если УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровНаСкладе() Тогда // Возвращаемое значение://  Истина - если разрешено превышать остаток, иначе Ложь.
					Сообщить("По " + Элемент.Номенклатура + " обнаружены отрицательные остатки МАССЫ. (ГСМ на складах)", СтатусСообщения.Информация);
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("По " + Элемент.Номенклатура + " обнаружены отрицательные остатки МАССЫ. (ГСМ на складах)", Отказ);
				КонецЕсли;
			ИначеЕсли Элемент.ОбъемОстаток < 0 Тогда 
				Если УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровНаСкладе() Тогда // Возвращаемое значение://  Истина - если разрешено превышать остаток, иначе Ложь.
					Сообщить("По " + Элемент.Номенклатура + " обнаружены отрицательные остатки ОБЪЕМ. (ГСМ на складах)", СтатусСообщения.Информация);
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("По " + Элемент.Номенклатура + " обнаружены отрицательные остатки ОБЪЕМ. (ГСМ на складах)", Отказ);
				КонецЕсли;
			ИначеЕсли Элемент.МассаОстаток - Элемент.Масса < 0 Тогда
				Если УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровНаСкладе() Тогда // Возвращаемое значение://  Истина - если разрешено превышать остаток, иначе Ложь.
					Сообщить("По " + Элемент.Номенклатура + " обнаружена нехватка остатков по МАССЕ. (ГСМ на складах)", СтатусСообщения.Информация);
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("По " + Элемент.Номенклатура + " обнаружена нехватка остатков по МАССЕ. (ГСМ на складах)", Отказ);
				КонецЕсли;
			ИначеЕсли Элемент.ОбъемОстаток - Элемент.Объем < 0 Тогда 
				Если УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровНаСкладе() Тогда // Возвращаемое значение://  Истина - если разрешено превышать остаток, иначе Ложь.
					Сообщить("По " + Элемент.Номенклатура + " обнаружена нехватка остатков по ОБЪЕМУ. (ГСМ на складах)", СтатусСообщения.Информация);
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("По " + Элемент.Номенклатура + " обнаружена нехватка остатков по ОБЪЕМУ. (ГСМ на складах)", Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Результат.Пустой() Тогда 
		Если Не Отказ Тогда
			Движения.Р_ГСМНаСкладах.Загрузить(ВыгрузкаЗапроса);
			Движения.Р_ГСМНаСкладах.Записывать = Истина;
			
			Если Р_ВозвратХранения Тогда 
				Движения.Р_ГСМНаХранении.Загрузить(ВыгрузкаЗапроса);
				Движения.Р_ГСМНаХранении.Записывать = Истина;
			КонецЕсли;
			
			//Запишем расчитанные данные в ТЧ Товары, на случай если там данные корректировались вручную и отличаются от расчетных
			Если НЕ Р_ОткорректированоВручную Тогда 
				Для Каждого Элемент из ВыгрузкаЗапроса Цикл 
					СтрокаТоваров = Товары.Найти(Элемент.НомерСтроки, "НомерСтроки");
					
					Если СтрокаТоваров = Неопределено Тогда 
						ОбщегоНазначения.СообщитьОбОшибке("По " + Элемент.Номенклатура + " не удалось найти строку с № "+Строка(Элемент.НомерСтроки)+" в документе", Отказ);
					Иначе
						Если КвоПоМассе Тогда 
							//в поле Количество хранится Масса, без пересчета, Р_Количество2 - Объем, пересчитанный в соотв. с коэффициентом
							//СтрокаТоваров.Количество 		= ?(КвоПоМассе,Элемент.Масса,Элемент.Объем);
							СтрокаТоваров.Р_Количество2 	= ?(Элемент.ЕдиницаИзмерения.Коэффициент = 0,0,Элемент.Объем/Элемент.ЕдиницаИзмерения.Коэффициент);
							СтрокаТоваров.Р_Плотность		= Элемент.Плотность;
						Иначе
							//в поле Количество хранится Объем, без пересчета, Р_Количество2 - Масса, пересчитанная в соотв. с коэффициентом
							СтрокаТоваров.Р_Количество2 	= ?(Элемент.ЕдиницаИзмерения.Коэффициент = 0,0,Элемент.Масса/Элемент.ЕдиницаИзмерения.Коэффициент);
							СтрокаТоваров.Р_Плотность		= Элемент.Плотность;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НоменклатураКонтрагентов.СоздатьНаборЗаписей();
	ДЛя Каждого СтрокаДанных из Товары Цикл 
		
		Если СтрокаДанных.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.ГСМ 
			или Не ЗначениеЗаполнено(СтрокаДанных.Р_ВариантНаименования) Тогда 
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей.Отбор.Номенклатура.Значение 		= СтрокаДанных.Номенклатура;
		НаборЗаписей.Отбор.Номенклатура.Использование 	= Истина;
		НаборЗаписей.Отбор.Контрагент.Значение 			= Контрагент;
		НаборЗаписей.Отбор.Контрагент.Использование 	= Истина;
		НаборЗаписей.Прочитать();
		
		НаборЗаписей.Очистить();
		
		НоваяЗапись 									= НаборЗаписей.Добавить();
		НоваяЗапись.Номенклатура 						= СтрокаДанных.Номенклатура;
		НоваяЗапись.Контрагент							= Контрагент;
		НоваяЗапись.ХарактеристикаНоменклатуры			= СтрокаДанных.ХарактеристикаНоменклатуры;
		НоваяЗапись.НаименованиеНоменклатурыКонтрагента = СтрокаДанных.Р_ВариантНаименования;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			//Сообщить("Не удалось сохранить запись по номенклатуре: "+СтрокаДанных.Номенклатура);
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

Процедура Р_ВыполнитьДвиженияПоПроводкамНаХранении()
	
	Если Р_ВидУчетаГСМ = Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоМассе Тогда
		КвоПоМассе = Истина;
	Иначе
		КвоПоМассе = Ложь;
	КонецЕсли;
	
	Запрос = Новый запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Качество,
	|	РеализацияТоваровУслугТовары.Коэффициент,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры,
	|	РеализацияТоваровУслугТовары.Склад,
	|	РеализацияТоваровУслугТовары.Р_Количество2,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровУслугТовары.НомерСтроки,
	|	РеализацияТоваровУслугТовары.НалоговоеНазначение,
	|	РеализацияТоваровУслугТовары.Сумма
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.Количество,
	|	ВТ_Товары.ЕдиницаИзмерения,
	|	ВТ_Товары.Качество,
	|	ВТ_Товары.Коэффициент,
	|	ВТ_Товары.СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Товары.Склад, 0) = 0
	|			ТОГДА &Склад
	|		ИНАЧЕ ВТ_Товары.Склад
	|	КОНЕЦ КАК Склад,
	|	ВТ_Товары.Р_Количество2,
	|	ВТ_Товары.ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА &КвоПоМассе
	|			ТОГДА ВТ_Товары.Количество
	|		ИНАЧЕ ВТ_Товары.Р_Количество2
	|	КОНЕЦ КАК Масса,
	|	ВЫБОР
	|		КОГДА &КвоПоМассе
	|			ТОГДА ВТ_Товары.Р_Количество2
	|		ИНАЧЕ ВТ_Товары.Количество
	|	КОНЕЦ КАК Объем,
	|	ВТ_Товары.НомерСтроки,
	|	ВТ_Товары.НалоговоеНазначение,
	|	ВТ_Товары.Сумма
	|ПОМЕСТИТЬ ВТ_ГСМ
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = &ТипНоменклатурыГСМ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ГСМ.Номенклатура,
	|	ВТ_ГСМ.ХарактеристикаНоменклатуры,
	|	ВТ_ГСМ.СерияНоменклатуры,
	|	ВТ_ГСМ.Склад,
	|	ВТ_ГСМ.ЕдиницаИзмерения,
	|	ВТ_ГСМ.Масса,
	|	ВТ_ГСМ.Объем,
	|	&ВидДвижения КАК ВидДвижения,
	|	&Ссылка КАК Регистратор,
	|	&Контрагент КАК Контрагент,
	|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	&Период КАК Период,
	|	ВТ_ГСМ.НалоговоеНазначение,
	|	ВТ_ГСМ.Сумма
	|ИЗ
	|	ВТ_ГСМ КАК ВТ_ГСМ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Документ.РеализацияТоваровУслуг.Товары"," &ТЧТовары ");
	Запрос.УстановитьПараметр("ТЧТовары",Товары);
	Запрос.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ТипНоменклатурыГСМ",Перечисления.ТипыНоменклатуры.ГСМ);
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("КвоПоМассе", КвоПоМассе);
	Запрос.УстановитьПараметр("ОткорректированоВручную",ЭтотОбъект.Р_ОткорректированоВручную);
	
	ТаблицаГСМ = Запрос.Выполнить().Выгрузить();
	Если ТаблицаГСМ.Количество() <> 0 Тогда 
		Для каждого Элемент из ТаблицаГСМ Цикл 
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Активность 			= Истина;
			Проводка.ВалютаДт				= ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт		= Элемент.Сумма;
			
			Если мВидОсновногоКоличественногоУчетаГСМ = Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоМассе Тогда 
				Проводка.КоличествоКт			= Элемент.ЕдиницаИзмерения.Коэффициент * Элемент.Масса;
			Иначе
				Проводка.КоличествоКт			= Элемент.ЕдиницаИзмерения.Коэффициент * Элемент.Объем;
			КонецЕсли;
			
			Проводка.НалоговоеНазначениеКт	= Элемент.НалоговоеНазначение;
			Проводка.Организация			= Организация;
			//Проводка.Содержание			= ;
			
			Проводка.Период					= Ссылка.Дата;
			Проводка.Регистратор			= Ссылка;
			Проводка.СубконтоКт.Номенклатура= Элемент.Номенклатура;
			Проводка.Субконтокт.Контрагенты	= Контрагент;
			Проводка.Сумма					= Элемент.Сумма;
			Проводка.СуммаНУКт				= Элемент.Сумма;
			
			Проводка.СчетКт					= ПланыСчетов.Хозрасчетный.МатериальныеЦенностиНаОтветственномХранении;		
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура Р_ПолучитьТипыНоменклатурыТовары(тТипТов, тТипГСМ, тТопКрт) Экспорт
	
	тТипТов = Ложь; тТипГСМ = Ложь; тТопКрт = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ГСМ)
	|			И КатегорииОбъектов.Объект ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипТовар,
	|	ВЫБОР
	|		КОГДА ВТ_Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ГСМ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипГСМ,
	|	ВЫБОР
	|		КОГДА КатегорииОбъектов.Объект ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТопливнаяКарта
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	|	  ПО  КатегорииОбъектов.Объект = ВТ_Товары.Номенклатура
	|		И КатегорииОбъектов.Категория.НазначениеКатегории = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура)
	|		И (НЕ КатегорииОбъектов.Категория.ПометкаУдаления)
	|		И КатегорииОбъектов.Категория = ЗНАЧЕНИЕ(Справочник.КатегорииОбъектов.Р_ТопливнаяКарта)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВТ_Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ГСМ)
	|			И КатегорииОбъектов.Объект ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ГСМ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КатегорииОбъектов.Объект ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Документ.РеализацияТоваровУслуг.Товары", "&ДокументРеализацияТоваровУслугТовары");
	Запрос.УстановитьПараметр("ДокументРеализацияТоваровУслугТовары", Товары);
	ВыборкаТипы = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТипы.Следующий() Цикл 
		Если ВыборкаТипы.ТипТовар Тогда 
			тТипТов = Истина;
		КонецЕсли;
		Если ВыборкаТипы.ТипГСМ Тогда 
			тТипГСМ = Истина;
		КонецЕсли;
		Если ВыборкаТипы.ТопливнаяКарта Тогда 
			тТопКрт = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура Р_ДвиженияПоРегистрамТопливныхКарт(РежимПроведения, Отказ)
	
	// Переделать на работу со справочником ИнформационныеКарты
	//ДатаЗаписи = НачалоДня(Дата);
	//
	//НаборПроверки = РегистрыСведений.Р_КартыНаГСМ.СоздатьНаборЗаписей();
	//НаборПроверки.Отбор.Период.Установить(ДатаЗаписи);
	//НаборПроверки.Отбор.Эмитент.Установить(Организация);
	//		
	//НаборЗаписей = РегистрыСведений.Р_КартыНаГСМ.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Период.Установить(ДатаЗаписи);
	//НаборЗаписей.Отбор.Эмитент.Установить(Организация);
	//НаборЗаписей.Отбор.Владелец.Установить(Контрагент);
	//НаборЗаписей.Отбор.ДокРегистратор.Установить(Ссылка);
	//НаборЗаписей.Прочитать();
	//НаборЗаписей.Очистить();
	//
	//ЕстьДаные = Ложь;
	//Для Каждого СтрТовар Из Товары Цикл
	//	Если Р_АЗС_ПОС.ЭтоТопливнаяКарта(СтрТовар.Номенклатура) Тогда
	//		тНомерТП = СокрЛП(СтрТовар.Р_ШтрихКодНачалоПакета);
	//		Если НЕ ЗначениеЗаполнено(тНомерТП) Тогда
	//			ОбщегоНазначения.СообщитьОбОшибке("Строка № " + СтрТовар.НомерСтроки + ". № топливной карты не заполнен", Отказ);
	//			Возврат;
	//		КонецЕсли;
	//		Запись = НаборЗаписей.Добавить();
	//		Запись.Период			= ДатаЗаписи;
	//		Запись.Эмитент			= Организация;
	//		Запись.Владелец			= Контрагент;
	//		Запись.НомерКарты		= тНомерТП;
	//		Запись.ВидКарты			= ДоговорКонтрагента.ВидВзаиморасчетов;
	//		Запись.ДокРегистратор	= Ссылка;
	//	КонецЕсли
	//КонецЦикла;
	//
	//НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура Р_ОтменаДвиженияПоРегистрамТопливныхКарт(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	тТипТов = Ложь; тТипГСМ = Ложь; тТопКрт = Ложь;
	Р_ПолучитьТипыНоменклатурыТовары(тТипТов, тТипГСМ, тТопКрт);
	Если тТопКрт Тогда
		// Переделать на работу со справочником ИнформационныеКарты
		//НаборПроверки = РегистрыСведений.Р_КартыНаГСМ.СоздатьНаборЗаписей();
		//НаборПроверки.Отбор.ДокРегистратор.Установить(Ссылка);
		//НаборПроверки.Прочитать();
		//НаборПроверки.Очистить();
		//НаборПроверки.Записать(Истина);
	КонецЕсли
	
КонецПроцедуры

Процедура Р_УстановитьЭтоГСМНаСкладах()
	
	тЭтоГСМ = Ложь;
	Для Каждого СтрТов Из Товары Цикл
		Если СтрТов.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ Тогда
			тЭтоГСМ = Истина;
			Прервать;
		КонецЕсли
	КонецЦикла;
	Р_ЭтоГСМ = тЭтоГСМ;
	
КонецПроцедуры

Процедура Р_ДополнительныеДвиженияПоГСМНаХраненииАЗС(Отказ,ТаблицаГСМНаХранении)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если Р_РежимТалоны Тогда 
		Запрос = Новый запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Р_КоличествоГСМ,
		|	РеализацияТоваровУслугТовары.Склад,
		|	РеализацияТоваровУслугТовары.Р_НоминалГСМ,
		|	РеализацияТоваровУслугТовары.Р_ШтрихКодНачалоПакета КАК Р_ШтрихКодНачалоПакета,
		|	РеализацияТоваровУслугТовары.Р_ШтрихКодКонецПакета,
		|	РеализацияТоваровУслугТовары.Сумма,
		|	РеализацияТоваровУслугТовары.НалоговоеНазначение,
		|	&Контрагент,
		|	РеализацияТоваровУслугТовары.СуммаНДС
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Р_ШтрихКодНачалоПакета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Склад КАК Склад,
		|	ВТ_Товары.Р_КоличествоГСМ КАК Количество,
		|	Р_ТалоныНаГСМСрезПоследних.ГСМ КАК Номенклатура,
		|	&ПриходРасход КАК ВидДвижения,
		|	&Ссылка КАК Регистратор,
		|	ИСТИНА КАК Активность,
		|	&Период КАК Период,
		|	ВТ_Товары.Сумма КАК СуммаПродажи,
		|	ВТ_Товары.СуммаНДС,
		|	Р_ТалоныНаГСМСрезПоследних.Структура.ВидОплаты КАК ВидОплаты,
		|	ВТ_Товары.НалоговоеНазначение,
		|	ВТ_Товары.Контрагент,
		|	&ВидОплатыВТК КАК ВидОплатыВТК
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Р_ТалоныНаГСМ.СрезПоследних(
		|				&Период,
		|				Код В
		|					(ВЫБРАТЬ
		|						ВТ_Товары.Р_ШтрихКодНачалоПакета
		|					ИЗ
		|						ВТ_Товары КАК ВТ_Товары)) КАК Р_ТалоныНаГСМСрезПоследних
		|		ПО ВТ_Товары.Р_ШтрихКодНачалоПакета = Р_ТалоныНаГСМСрезПоследних.Код
		|			И ВТ_Товары.Р_НоминалГСМ = Р_ТалоныНаГСМСрезПоследних.Номинал
		|//СоединениеДокРаботаСТалонами";
		Р_ДатаДокРаботаСТалонами = Дата(1, 1, 1);
		Если ДополнительныеСвойства.Свойство("Р_ДатаДокРаботаСТалонми", Р_ДатаДокРаботаСТалонами) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Период КАК Период,", "&Р_ДатаДокРаботаСТалонами КАК Период,");
			Запрос.УстановитьПараметр("Р_ДатаДокРаботаСТалонами", Р_ДатаДокРаботаСТалонами);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Период КАК Период,", "Р_РаботаСТалонамиНаГСМ.Дата КАК Период,");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//СоединениеДокРаботаСТалонами",
			"			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|			Р_РаботаСТалонамиНаГСМТалоны.Ссылка.Дата КАК Дата,
			|			Р_РаботаСТалонамиНаГСМТалоны.Структура КАК Структура,
			|			Р_РаботаСТалонамиНаГСМТалоны.Код КАК Код
			|		ИЗ
			|			Документ.Р_РаботаСТалонамиНаГСМ.Талоны КАК Р_РаботаСТалонамиНаГСМТалоны
			|		ГДЕ
			|			Р_РаботаСТалонамиНаГСМТалоны.Ссылка.ДокументОснование = &Ссылка
			|			И НЕ Р_РаботаСТалонамиНаГСМТалоны.Ссылка.ИзСейфа
			|			И Р_РаботаСТалонамиНаГСМТалоны.Код В
			|					(ВЫБРАТЬ
			|						ВТ_Товары.Р_ШтрихКодНачалоПакета
			|					ИЗ
			|						ВТ_Товары КАК ВТ_Товары)
			|			И Р_РаботаСТалонамиНаГСМТалоны.Ссылка.ВидОперации В (&СписокОперацийПродажа)) КАК Р_РаботаСТалонамиНаГСМ
			|		ПО ВТ_Товары.Р_ШтрихКодНачалоПакета = Р_РаботаСТалонамиНаГСМ.Код");
			СписокОперацийПродажа = Новый СписокЗначений;
			СписокОперацийПродажа.Добавить(Перечисления.Р_СтатусыТалоновНаГСМ.ВСейф);
			СписокОперацийПродажа.Добавить(Перечисления.Р_СтатусыТалоновНаГСМ.Продан);
			Запрос.УстановитьПараметр("СписокОперацийПродажа", СписокОперацийПродажа);
		КонецЕсли;
		//Запрос.УстановитьПараметр("ПлановыйТипЦен",Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
		Запрос.УстановитьПараметр("МоментВремени",Новый Граница(МоментВремени(),ВидГраницы.Включая));
	Иначе
		Запрос = Новый запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Склад,
		|	РеализацияТоваровУслугТовары.Количество,
		|	РеализацияТоваровУслугТовары.Сумма,
		|	РеализацияТоваровУслугТовары.СуммаНДС,
		|	РеализацияТоваровУслугТовары.НалоговоеНазначение,
		|	&Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.Склад КАК Склад,
		|	ВТ_Товары.Количество КАК Количество,
		|	&ПриходРасход КАК ВидДвижения,
		|	&Ссылка КАК Регистратор,
		|	ИСТИНА КАК Активность,
		|	&Период КАК Период,
		|	ВТ_Товары.Сумма КАК СуммаПродажи,
		|	ВТ_Товары.СуммаНДС,  
		|	ВТ_Товары.НалоговоеНазначение,
		|	ВТ_Товары.Контрагент,
		|	&ВидОплаты КАК ВидОплаты,
		|	&ВидОплатыВТК КАК ВидОплатыВТК
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары";
	КонецЕсли;                           
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РеализацияТоваровУслуг.Товары", "&ДокументРеализацияТоваровУслугТовары");
	
	Запрос.УстановитьПараметр("ДокументРеализацияТоваровУслугТовары", Товары);
	Запрос.УстановитьПараметр("ПриходРасход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Период", ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидОплатыВТК", Перечисления.Р_ВидыОплатыВТК.ПустаяСсылка());

	ТаблицаГСМНаХранении = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаГСМНаХранении.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нет данных для регистра ""ГСМ на хранении АЗС (Р)""", Отказ);
		Возврат;
	КонецЕсли;
	
	//Установим ВидОплаты ВТК
	Для Каждого Элемент из ТаблицаГСМНаХранении Цикл 
		Если НЕ ЗначениеЗаполнено(Элемент.ВидОплаты) Тогда
			Если ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоВедомостямГСМ Тогда 
				Элемент.ВидОплатыВТК = Перечисления.Р_ВидыОплатыВТК.Ведомости;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВидыОплатЧекаККМ.Ссылка КАК ВидОплаты
				|ИЗ
				|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
				|ГДЕ
				|	ВидыОплатЧекаККМ.Р_ЭмитентПлатежногоСредстваНаАЗС = &Контрагент
				|	И НЕ ВидыОплатЧекаККМ.ПометкаУдаления
				|	И ВидыОплатЧекаККМ.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Р_БезналичнаяОплатаНаАЗС)
				|	И ВидыОплатЧекаККМ.Р_ТипЭмитента = ЗНАЧЕНИЕ(Перечисление.Р_ТипыЭмитентовНаАЗС.Ведомость)";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Элемент.ВидОплаты = Выборка.ВидОплаты;
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("Не найден вид оплаты по ведомостям для контрагента """ + Контрагент + """ для регистра ""ГСМ на хранении АЗС (Р))", Отказ);
					Возврат;
				КонецЕсли
			ИначеЕсли ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоТалонамЭмитентовГСМ Тогда 
				Элемент.ВидОплатыВТК = Перечисления.Р_ВидыОплатыВТК.ТалоныПартнеров;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВидыОплатЧекаККМ.Ссылка КАК ВидОплаты
				|ИЗ
				|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
				|ГДЕ
				|	ВидыОплатЧекаККМ.Р_ЭмитентПлатежногоСредстваНаАЗС = &Контрагент
				|	И НЕ ВидыОплатЧекаККМ.ПометкаУдаления
				|	И ВидыОплатЧекаККМ.Р_ТипЭмитента <> ЗНАЧЕНИЕ(Перечисление.Р_ТипыЭмитентовНаАЗС.Системный)";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НашиТалоны = Ложь;
					ВыборкаСК = РегистрыСведений.СобственныеКонтрагенты.Выбрать(Новый Структура("Контрагент", Контрагент));
					Пока ВыборкаСК.Следующий() Цикл
						Если (ВыборкаСК.ВидСвязи = Перечисления.ВидыСобственныхКонтрагентов.Организация) И (ВыборкаСК.Объект = Организация) Тогда
							НашиТалоны = Истина;
							Прервать;
						КонецЕсли
					КонецЦикла;
					Если НашиТалоны Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Недопустимый вид оплаты ""По талонам нашим (несистемным)"" (эмитент: " + Контрагент + ", собственный контрагент) и вид взаиморасчетов в договоре ""По талонам эмитентов"" для регистра ""ГСМ на хранении АЗС (Р))", Отказ);
						Возврат;
					Иначе
						Элемент.ВидОплаты = Выборка.ВидОплаты;
					КонецЕсли
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("Не найден вид оплаты по талонам партнера (межэмитента) """ + Контрагент + """ для регистра ""ГСМ на хранении АЗС (Р))", Отказ);
					Возврат;
				КонецЕсли
			ИначеЕсли (ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамЛитрыЭмитентовГСМ)
				  ИЛИ (ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамЭмитентовГСМ) Тогда
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВидыОплатЧекаККМ.Ссылка КАК ВидОплаты
				|ИЗ
				|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
				|ГДЕ
				|	ВидыОплатЧекаККМ.Р_ЭмитентПлатежногоСредстваНаАЗС = &Контрагент
				|	И НЕ ВидыОплатЧекаККМ.ПометкаУдаления
				|	И НЕ ВидыОплатЧекаККМ.Р_НашиКартыНаГСМ
				|	И ((ВидыОплатЧекаККМ.Р_ТипЭмитента = ЗНАЧЕНИЕ(Перечисление.Р_ТипыЭмитентовНаАЗС.PetrolPlus)) ИЛИ
				|	   (ВидыОплатЧекаККМ.Р_ТипЭмитента = ЗНАЧЕНИЕ(Перечисление.Р_ТипыЭмитентовНаАЗС.ДПСPesPOS)))";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Элемент.ВидОплаты = Выборка.ВидОплаты;
					Если ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамЛитрыЭмитентовГСМ Тогда
						Элемент.ВидОплатыВТК = Перечисления.Р_ВидыОплатыВТК.КарточкиПартнеровЛитры;
					Иначе
						Элемент.ВидОплатыВТК = Перечисления.Р_ВидыОплатыВТК.КарточкиПартнеровГрн;
					КонецЕсли
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("Не найден вид оплаты по карточкам ГСМ (Не наши) партнера/межэмитента """ + Контрагент + """ для регистра ""ГСМ на хранении АЗС (Р))", Отказ);
					Возврат;
				КонецЕсли
			ИначеЕсли (ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамЛитрыГСМ)
				  ИЛИ (ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамГСМ) Тогда
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ВидыОплатЧекаККМ.Ссылка КАК ВидОплаты,
				|	ИнформационныеКарты.ВладелецКарты КАК ВладелецКарты
				|ИЗ
				|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
				|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
				|	ПО ИнформационныеКарты.ВладелецКарты = &Контрагент
				|		И НЕ ИнформационныеКарты.ПометкаУдаления
				|		И ИнформационныеКарты.Р_ДатаНачалаДействия <= &Период
				|		И ((ИнформационныеКарты.Р_ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)) ИЛИ (ИнформационныеКарты.Р_ДатаОкончанияДействия > &Период))
				|ГДЕ
				|	НЕ ВидыОплатЧекаККМ.ПометкаУдаления
				|	И ВидыОплатЧекаККМ.Р_НашиКартыНаГСМ
				|	И ((ВидыОплатЧекаККМ.Р_ТипЭмитента = ЗНАЧЕНИЕ(Перечисление.Р_ТипыЭмитентовНаАЗС.PetrolPlus)) ИЛИ
				|	   (ВидыОплатЧекаККМ.Р_ТипЭмитента = ЗНАЧЕНИЕ(Перечисление.Р_ТипыЭмитентовНаАЗС.ДПСPesPOS)))";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Если ЗначениеЗаполнено(Выборка.ВладелецКарты) Тогда
						Элемент.ВидОплаты = Выборка.ВидОплаты;
						Если ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоКарточкамЛитрыГСМ Тогда
							Элемент.ВидОплатыВТК = Перечисления.Р_ВидыОплатыВТК.КарточкиНашиЛитры;
						Иначе
							Элемент.ВидОплатыВТК = Перечисления.Р_ВидыОплатыВТК.КарточкиНашиГрн;
						КонецЕсли
					Иначе
						ОбщегоНазначения.СообщитьОбОшибке("Не найден контрагент """ + Контрагент + """ как владелец наших карт (Справочник ""Информационные карты"") для регистра ""ГСМ на хранении АЗС (Р))", Отказ);
						Возврат;
					КонецЕсли
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("Не найден вид оплаты по картам ГСМ (Наши) для регистра ""ГСМ на хранении АЗС (Р))", Отказ);
					Возврат;
				КонецЕсли
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке("Недопустимый вид взаиморасчетов договора для регистра ""ГСМ на хранении АЗС (Р)""", Отказ);
				Возврат;
			КонецЕсли
		ИначеЕсли Элемент.ВидОплаты.Р_ТипЭмитента = Перечисления.Р_ТипыЭмитентовНаАЗС.Системный Тогда 
			Элемент.ВидОплатыВТК = Перечисления.Р_ВидыОплатыВТК.ТалоныСистемные;
		Иначе 
			ОбщегоНазначения.СообщитьОбОшибке("Недопустимый вид оплаты """ + Элемент.ВидОплаты + """ для регистра ""ГСМ на хранении АЗС (Р)""", Отказ);
			Возврат;
		КонецЕсли
	КонецЦикла;
	
	Если УчитыватьНДС и НЕ СуммаВключаетНДС Тогда 
		//Установим принудительно в СуммуПродажи сумму с НДС
		Для Каждого Элемент из ТаблицаГСМНаХранении Цикл 
			Если Элемент.ВидОплаты = Перечисления.Р_ВидыОплатыДляОтчетаГСМ.Карточки Тогда 
				Элемент.СуммаПродажи = Элемент.СуммаПродажи + Элемент.СуммаНДС;
			КонецЕсли
		КонецЦикла
	КонецЕсли;
	
	ТаблицаГСМНаХранении.Свернуть("Номенклатура, ВидОплатыВТК, ВидОплаты, Контрагент, ВидДвижения, Регистратор, Активность, Период, НалоговоеНазначение,Склад", "Количество, СуммаПродажи");
	ТаблицаГСМНаХранении.Сортировать("Номенклатура, ВидОплатыВТК, ВидОплаты, Контрагент");
	
	ТаблицаГСМНаХранении.Колонки.Добавить("СебестоимостьГСМ", Новый ОписаниеТипов("Число"));
	ТаблицаГСМНаХранении.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаГСМНаХранении.Колонки.Добавить("НалоговоеНазначениеДоходовИЗатрат");
	ТаблицаГСМНаХранении.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаГСМНаХранении.Колонки.Добавить("КорСубконтоСписанияБУ2");
	
	//Дополним таблицу Счетами учета ГСМ
	Для каждого строкаТЗ из ТаблицаГСМНаХранении Цикл
        СчетУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, строкаТЗ.Номенклатура, ?(мУказаниеСкладовВТЧ, строкаТЗ.Склад, Склад));
		СхемаРеализации = СчетУчета.СхемаРеализации;
		строкаТЗ.КорСчетСписанияБУ      = СхемаРеализации.СчетСебестоимости;
		строкаТЗ.КорСубконтоСписанияБУ1 = СхемаРеализации.СубконтоСебестоимости1; 
		строкаТЗ.КорСубконтоСписанияБУ2 = СхемаРеализации.СубконтоСебестоимости2;
		строкаТЗ.НалоговоеНазначение    = СчетУчета.НалоговоеНазначение;
		строкаТЗ.НалоговоеНазначениеДоходовИЗатрат   = СчетУчета.НалоговоеНазначениеДоходовИЗатрат;
		ПлановаяЦена = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
		Если  Не ЗначениеЗаполнено(ПлановаяЦена) Тогда
			   Продолжить;
		КонецЕсли;
		ЦенаГСМ = Ценообразование.ПолучитьЦенуНоменклатуры(строкаТЗ.Номенклатура, ,ПлановаяЦена);
		СтрокаТЗ.СебестоимостьГСМ = СтрокаТЗ.Количество*ЦенаГСМ;
	КонецЦикла;
	
	Р_ВыполнитьДвиженияПоГСМНаХраненииАЗС(ТаблицаГСМНаХранении);
	Если ОтражатьВБухгалтерскомУчете Тогда 
		Р_ВыполнитьРеглДвиженияПоГСМНаХраненииАЗС(ТаблицаГСМНаХранении);
	КонецЕсли

	
КонецПроцедуры
	
Процедура Р_ВыполнитьДвиженияПоГСМНаХраненииАЗС(ТаблицаГСМНаХранении)
	
	НаборДвижений = Движения.Р_ГСМНаХраненииАЗС;
 
	Если ТаблицаГСМНаХранении.Количество() <> 0 Тогда 
		Движения.Р_ГСМНаХраненииАЗС.Загрузить(ТаблицаГСМНаХранении);
	КонецЕсли;
	
КонецПроцедуры

Процедура Р_ВыполнитьРеглДвиженияПоГСМНаХраненииАЗС(ТаблицаГСМНаХранении)
	
	Если ТаблицаГСМНаХранении.Количество() <> 0 Тогда 
		Для каждого Элемент из ТаблицаГСМНаХранении Цикл 
			
			//Проведение по балансовому счету накопления Количества ГСМ на хранении
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Активность 				= Истина;
			Проводка.Организация				= Организация;
			Проводка.Период						= Элемент.Период;
			Проводка.Регистратор				= Ссылка;
			Проводка.Содержание                 = "Количество ГСМ на Хранении, от продажи талонов";
			Проводка.СчетДт						= Элемент.КорСчетСписанияБУ;
			Проводка.СчетКт                     = ПланыСчетов.Хозрасчетный.Р_ТоварыНаХраненииАЗС;
			
			Проводка.Сумма						= Элемент.СебестоимостьГСМ;
			Проводка.СуммаНУДт           		= Элемент.СебестоимостьГСМ;
			Проводка.СуммаНУКт           		= Элемент.СебестоимостьГСМ;
			
			Проводка.КоличествоКт               = Элемент.Количество;
			
			Проводка.НалоговоеНазначениеДт  	= Элемент.НалоговоеНазначениеДоходовИЗатрат;
			Проводка.НалоговоеНазначениеКт  	= Элемент.НалоговоеНазначение;
						
			Проводка.СубконтоДт[Элемент.КорСчетСписанияБУ.ВидыСубконто.Получить(0).ВидСубконто] = Элемент.КорСубконтоСписанияБУ1;
			Проводка.СубконтоДт[Элемент.КорСчетСписанияБУ.ВидыСубконто.Получить(1).ВидСубконто] = Элемент.КорСубконтоСписанияБУ2;
			
			Проводка.СубконтоКт.Номенклатура    = Элемент.Номенклатура;
			
			//Детализация ГСМ на хранении по Забалансовым счетам
			//Пересмотреть необходимость формирования даннй проводки
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Активность 				= Истина;
			Проводка.Организация				= Организация;
			Проводка.Период						= Элемент.Период;
			Проводка.Регистратор				= Ссылка;
			
			Проводка.СчетДт						= ПланыСчетов.Хозрасчетный.МатериальныеЦенностиНаОтветственномХранении;
			Проводка.Сумма						= Элемент.СуммаПродажи;
			Проводка.СуммаНУДт           		= Элемент.СуммаПродажи;
			Проводка.ВалютаДт          			= ВалютаДокумента;
			Проводка.КоличествоДт       		= Элемент.Количество;
			Проводка.НалоговоеНазначениеДт  	= Элемент.НалоговоеНазначение;
			Проводка.СубконтоДт.Контрагенты		= Контрагент;
			Проводка.СубконтоДт.Номенклатура	= Элемент.Номенклатура;
			
			
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры

Процедура Р_ПроверитьРеквизитыНефтебазыАЗС(Отказ)
	
	мВидТорговойТочки = Перечисления.Р_ВидыТорговыхТочек.ПустаяСсылка();
	
	Для Каждого Элемент из Товары Цикл 
		
		Если НЕ ЗначениеЗаполнено(Элемент.Склад) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Строка № " + Элемент.НомерСтроки + ". Склад должн быть назнчен и быть резервуаром (категория ""Резервуар"")", Отказ);
		Иначе
			ТекВидТТ = Р_АЗС_ПОС.СкладРезервуарНефтебазыАЗС(Элемент.Склад);
			Если ТекВидТТ = Неопределено Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Строка № " + Элемент.НомерСтроки + ". Склад должн быть резервуаром (категория ""Резервуар"")", Отказ);
			ИначеЕсли мВидТорговойТочки <> ТекВидТТ Тогда
				Если НЕ ЗначениеЗаполнено(мВидТорговойТочки) Тогда
					мВидТорговойТочки = ТекВидТТ;
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("Строка № " + Элемент.НомерСтроки + ". Склады (резервуары) в табл. ""Товары"" должны принадлежать торговым точкам одного вида: ""Нефтебаза"" или ""АЗС""", Отказ);
				КонецЕсли
			КонецЕсли
		КонецЕсли;
		
		Если Р_ОткорректированоВручную
		   И (Не ЗначениеЗаполнено(Элемент.Количество) 
		  Или Не ЗначениеЗаполнено(Элемент.Р_Количество2)
		  Или Не ЗначениеЗаполнено(Элемент.Р_Плотность)) Тогда 
			ОбщегоНазначения.СообщитьОбОшибке("Строка № " + Строка(Элемент.НомерСтроки) + ". Не заполнены количественные поля (масса, объем, плотность) в строке ", Отказ);	
		КонецЕсли;
		Если Элемент.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Р_ВидУчетаГСМ <> Р_ВидУчетаГСМ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Строка № " + Элемент.НомерСтроки + ". Единица измерения не соответствует виду отгрузки ГСМ", Отказ);
		КонецЕсли
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		Если мВидТорговойТочки = Перечисления.Р_ВидыТорговыхТочек.Нефтебаза Тогда
			мВидОсновногоКоличественногоУчетаГСМ = Р_АЗС_ПОС.ВидОсновногоКоличественногоУчетаГСМНаНБ();
			Если НЕ ЗначениеЗаполнено(мВидОсновногоКоличественногоУчетаГСМ) Тогда 
				ОбщегоНазначения.СообщитьОбОшибке("Не установлена основная единица измерения для ГСМ на нефтебазе", Отказ);
			КонецЕсли
		ИначеЕсли мВидТорговойТочки = Перечисления.Р_ВидыТорговыхТочек.АЗС Тогда
			мВидОсновногоКоличественногоУчетаГСМ = Р_АЗС_ПОС.ВидОсновногоКоличественногоУчетаГСМНаАЗС();
			Если НЕ ЗначениеЗаполнено(мВидОсновногоКоличественногоУчетаГСМ) Тогда 
				ОбщегоНазначения.СообщитьОбОшибке("Не установлена основная единица измерения для ГСМ на АЗС", Отказ);
			КонецЕсли
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Склады (резервуары) в табл. ""Товары"" должны принадлежать торговым точкам с видом ""Нефтебаза"" или ""АЗС""", Отказ);
		КонецЕсли
	КонецЕсли
	
КонецПроцедуры

Процедура ПечатьКомплектаНакладных(МойДокумент) Экспорт
	ВсегоКПечати=МойДокумент.Контрагент.КоличествоЭкземпляровРасходныхНакладных;
	Если ВсегоКПечати=0 тогда
		КоличествоЭкземпляровРасходных=1;
	ИНАЧЕ 
		КоличествоЭкземпляровРасходных		=	МойДокумент.Контрагент.КоличествоЭкземпляровРасходныхНакладных;
	КонецЕсли;
	ДокументПечати =МойДокумент.ПечатьДокумента(Ложь);
	НапечататьНЕОткрывая=Истина;
	УниверсальныеМеханизмы.НапечататьДокумент(ДокументПечати, КоличествоЭкземпляровРасходных,НапечататьНЕОткрывая);
	КоличествоЭкземпляровРасходных=КоличествоЭкземпляровРасходных-1;
	Если КоличествоЭкземпляровРасходных<>0 тогда
		ДокументПечати =?(МойДокумент.Контрагент.СоСкидкой, МойДокумент.ПечатьДокументаСоСкидкой(), МойДокумент.ПечатьДокумента());
		УниверсальныеМеханизмы.НапечататьДокумент(ДокументПечати, КоличествоЭкземпляровРасходных,НапечататьНЕОткрывая); //
	КонецЕсли;
	Для каждого стр из МойДокумент.Контрагент.КлиентыПечатиРасходныхНакладных Цикл
		ДокументПечати =МойДокумент.ПечатьНакладной(стр.Продавец,стр.Покупатель,стр.ТипЦены);
		УниверсальныеМеханизмы.НапечататьДокумент(ДокументПечати, стр.Количество,НапечататьНЕОткрывая);
	КонецЦикла; 
КонецПроцедуры// ПечатьКомплектаНакладных()
 

//КОНЕЦ ВСТАВКИ

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мЕстьКолонкаСерии = глЗначениеПеременной("ИспользоватьСерииНоменклатуры");
мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПокупателя");

мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();

мУказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                  Или (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

мСписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(
   ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
   Неопределено);

//БУ = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе.ПолучитьОбъект();

//ВестиСкладскойУчетБУ  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
//ВестиУчетПоДопРазрезамРегл  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеПозиции, "ВидСубконто") = Неопределено, Ложь, Истина);

мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
