////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОповещатьВладельцаОЗакрытии Экспорт;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента;

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

// Хранят текущее значение налоговой схемы организации
Перем мТекущаяСхемаНалогообложения;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, мКолонкиДокументы, мКолонкиТаблицаАвтоСкидок;

// Хранит информацию о сумме без скидки документа.
Перем мКоличествоПредыдущее;
Перем мЦенаПредыдущая;

Перем мРазрешитьНулевыеЦеныВОпте, мРазрешитьНулевыеЦеныВРознице;

// Автоотметка СкладОредра без учета заполненности ТЧ.
Перем мАвтоОтметкаСклада;

// Признак перерасчета сумм НДС с учетом погрешностей округления
Перем мПерерасчетПроизведен;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит соответствие 
Перем мКнопкиЗаполненияТЧ;

Перем мТерминалы;

Перем мФормаСоставНабора, мТекущаяСтрокаНабор;

// Предыдущие значения реквизитов
Перем мСтароеЗначениеСделки, мСтароеЗначениеСклада;

Перем мКартинкаСерийныеНомера, мКартинкаНаборКомплект;
Перем мКачество;

Перем мНоваяСтрока;

//ВСТАВКА РЕЗОНАНС
Перем Р_СтарыйШтрихКодНачало,Р_СтарыйШтрихКодКонец;
//КОНЕЦ ВСТАВКИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

//Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли; 	

КонецПроцедуры


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если РаботаСДиалогами.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия при изменении дисконтной карты.
//
Процедура ПриИзмененииДисконтнойКарты()

	Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		Если ЗначениеЗаполнено(ДисконтнаяКарта.ВладелецКарты)
		   И ДисконтнаяКарта.ВладелецКарты <> Контрагент Тогда
			Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
				Ответ = КодВозвратаДиалога.Да;
			Иначе
				Ответ = Вопрос("У выбранной дисконтной карты владелец " + СокрЛП(ДисконтнаяКарта.ВладелецКарты) + "."
				   + Символы.ПС + "Изменить контрагента в документе?", РежимДиалогаВопрос.ДаНет);
			КонецЕсли;

			Если Ответ = КодВозвратаДиалога.Да Тогда
				Контрагент = ДисконтнаяКарта.ВладелецКарты;
				ПриИзмененииКонтрагента();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // ПриИзмененииДисконтнойКарты()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента, "Реализация");
	Если ЕстьКолонкаЗаказ Тогда
		УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, Товары, "ЗаказПокупателя");
		УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, ВозвратнаяТара, "ЗаказПокупателя");
        УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, Услуги, "ЗаказПокупателя");
	КонецЕсли;
	
	
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();
	ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Истина);

	ПересчитатьАвтоматическиеСкидки();
	
	мПоДокументамРасчетов = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;

	Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
		Проект = ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ОтражатьВБухгалтерскомУчете Тогда

		Если ПоказыватьВДокументахСчетаУчета Тогда
			
			Ответ = Вопрос("Установить счета бухгалтерского и налогового учета в соответствии со значениями по умолчанию?", 
							РежимДиалогаВопрос.ДаНет, 
							, , 
							"Изменения счетов учета");
			
		Иначе
							
			Ответ = КодВозвратаДиалога.Да;
			
		КонецЕсли;

		Если Ответ = КодВозвратаДиалога.Да Тогда

			Если Товары.Количество() + ВозвратнаяТара.Количество() > 0 + Услуги.Количество() > 0 Тогда
				ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
				ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
				ЗаполнитьСчетаУчетаВТабЧастиУслуги(ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
			КонецЕсли;

			СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
			
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателяПриБартере;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателяПриБартере;
			Иначе
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			КонецЕсли;
			
			СчетУчетаРасчетовПоТаре          = СчетаУчета.СчетУчетаТарыПокупателя;
			СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТареПокупателя;
			СчетУчетаНДС 					 = СчетаУчета.СчетУчетаНДСПродаж;
			СчетУчетаНДСПодтвержденный  	 = СчетаУчета.СчетУчетаНДСПродажПодтвержденный;
			
		КонецЕсли;

	КонецЕсли;
 
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Если Услуги.Количество() > 0 Тогда
			Услуги.Очистить(); // На комиссию передать услуги нельзя
		КонецЕсли;

	КонецЕсли;	
	
	//установка автоотметки незаполненного для заказа в табличной части
	РаботаСДиалогами.УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, ВидОперации, ДоговорКонтрагента, мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, мКолонкиДокументы, ЭлементыФормы.Сделка);
	
	УстановитьВидимость();

//ВСТАВКА РЕЗОНАНС
	Р_ОграничениеВидимостиДляОтгрузкиГСМСоСклада();
//КОНЕЦ ВСТАВКИ

КонецПроцедуры // ПриИзмененииДоговора()

// Выполняет необходимые действия при изменении вида склада.
//
Процедура ПриИзмененииВидаСклада()

	// Определим текущий вид склада
	ВидСклада = Склад.ВидСклада;

	// Оформление колонок таблицы
	ФлагАвтоОтметкиНезаполненого = Истина;

	Если (ВидСклада = Перечисления.ВидыСкладов.Оптовый ИЛИ НЕ ЗначениеЗаполнено(ВидСклада)) И мРазрешитьНулевыеЦеныВОпте Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	ИначеЕсли ВидСклада = Перечисления.ВидыСкладов.Розничный И мРазрешитьНулевыеЦеныВРознице Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	КонецЕсли;

	мКолонкиТовары.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	мКолонкиТовары.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	мКолонкиУслуги.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	мКолонкиУслуги.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Сумма.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Цена.АвтоОтметкаНезаполненного  = ФлагАвтоОтметкиНезаполненого;

КонецПроцедуры // ПриИзмененииВидаСклада()

// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧасть(ТабличнаяЧасть)

	ПредставлениеЗаказПокупателя = Метаданные.Документы.ЗаказПокупателя.Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	ИначеЕсли НЕ ЗначениеЗаполнено(Сделка)
		  или (Не ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		          И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")) Тогда
		ТекстПредупреждения = "Не выбран заказ покупателя (счет на оплату).
							  |Заполнение невозможно.";
	
	ИначеЕсли Не Сделка.Проведен И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ТекстПредупреждения = ПредставлениеЗаказПокупателя + " не проведен.
							  |Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , );
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
		Если ТабличнаяЧасть = Товары Тогда
			СоставНабора.Очистить();
			СерийныеНомера.Очистить();
			СерийныеНомераСоставНабора.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Если ТабличнаяЧасть = Товары Тогда
			СкопироватьТовары();
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
			СкопироватьВозвратнуюТару();
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			СкопироватьУслуги();
		КонецЕсли;
	Иначе
		Если ТабличнаяЧасть = Товары 
		 Или ТабличнаяЧасть = ВозвратнаяТара Тогда

			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ТабличнаяЧасть, Сделка);
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			ЗаполнитьУслугиПоОстаткамУпр();
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть, РазворачиватьДоКачества)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	ПустойТипЦен = НЕ ЗначениеЗаполнено(ТипЦен);

	Если ТабличнаяЧасть = Товары
	 ИЛИ ТабличнаяЧасть = ВозвратнаяТара Тогда
		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
			СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		КонецЕсли;

		СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");
		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
				СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
		КонецЕсли;

		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
			РазворачиватьДоКачества = ТабличнаяЧасть = Товары;
		КонецЕсли;
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		СписокЗапросов.Добавить("РасходУслуги",        "По услугам предприятия");

		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
			СписокЗапросов.Добавить("РасходЦеныУслуг", "По ценам и услугам предприятия");
		КонецЕсли;
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Функция получает качество для подстановки значения качества при построчном вводе в табличную часть "Товары"
// или при подборе номенклатуры с помощью обработки "Подбор номенклатуры" или обработки ввод серийных номеров
// Рассчитывает качество только для вида операции "Брак", для других случаев качество по умолчанию новое.
//
// Параметры:
// Качество                  - СправочникСсылка.Качество, необязательный параметр, если параметр заполнен он же возвращается,
//                             ситуация возможна при варианте подбора через обработку подбор номенклатуры или обработку ввода серийных номеров.
//
// Возвращаемое значение:
// СправочникСсылка.Качество - для вида операции "Брак" возвращается качество отличное от Нового и если количество таких элементов равное одному,
//                             в остальных случаях пустая ссылка справочника качество.
//                           - для остальных видов операций качество по умолчанию новое.
//
Функция ПолучитьКачествоНоменклатуры(Качество = Неопределено)
	Перем Результат;

	Если ЗначениеЗаполнено(Качество) Тогда
		возврат Качество;
	КонецЕсли;

	Если НЕ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		// Для отличного вида операции от Брак, качество новое.
		возврат Справочники.Качество.Новый;
	КонецЕсли;

	Если НЕ мКачество = Неопределено Тогда
		возврат мКачество;
	КонецЕсли;
	Результат = Справочники.Качество.ПустаяСсылка();

	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Качество.Ссылка КАК Качество
	|ИЗ
	|	Справочник.Качество КАК Качество
	|ГДЕ
	|	НЕ Качество.Ссылка = ЗНАЧЕНИЕ(Справочник.Качество.Новый)
	|";
	таблицаКачество = Запрос.Выполнить().Выгрузить();
	Если таблицаКачество.Количество() = 1 Тогда
		Результат = таблицаКачество[0]["Качество"];
	КонецЕсли;
	мКачество = Результат;
	Возврат Результат;
КонецФункции // ПолучитьКачествоНоменклатуры()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	РазворачиватьДоКачества = Ложь;
	ЕстьЦена            = мМожноМенятьЦенуВДокументе;
	ЕстьСерия           = Истина;
	Валюта              = ВалютаДокумента;
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	Качество            = ?(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия, Справочники.Качество.Новый, Неопределено);
	ПодбиратьУслуги         = Ложь;
	ЕстьСкладВТабличнойЧасти = мУказаниеСкладовВТЧ;

	Если ТабличнаяЧасть = Товары Тогда

		Команда           = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти = "Товары";

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Тара";

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Команда                  = "ПодборВТабличнуюЧастьУслуги";
		ЕстьСерия                = Ложь;
		ИмяТабличнойЧасти        = "Услуги";
		Качество                 = Неопределено;
		ЕстьСкладВТабличнойЧасти = Ложь;
		СкрыватьХарактеристику   = Истина;
		ПодбиратьУслуги          = Истина;

	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть, РазворачиватьДоКачества);
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"   , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Контрагент);
	СтруктураПараметровПодбора.Вставить("Сделка"               , Сделка);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
	СтруктураПараметровПодбора.Вставить("Качество"             , Качество);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества", РазворачиватьДоКачества);
	СтруктураПараметровПодбора.Вставить("СкрыватьХарактеристику" , СкрыватьХарактеристику);
	СтруктураПараметровПодбора.Вставить("ИспользоватьГруппуДоступности", Истина);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"        , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");
	СтруктураПараметровПодбора.Вставить("УсловиеПродаж"        , УсловиеПродаж);
	СтруктураПараметровПодбора.Вставить("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти);
	СтруктураПараметровПодбора.Вставить("ВременныеТаблицы",ОбработкаТабличныхЧастей.СтруктураДляРасчетаРезерваПриПодбореНоменклатуры(ЭтаФорма, Истина, "Сделка"));
	
	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены, ЕстьСкладВТабличнойЧасти;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество, ВыборИзСправочника;
	
	ЗначениеВыбора.Свойство("ВыборИзСправочника", ВыборИзСправочника);
	ВыборИзСправочника = ВыборИзСправочника = Истина;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   (ТабличнаяЧасть <> Товары Или ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	УправлениеЗапасами.ПолучитьПараметрыДокументаИзСтруктуры(ЗначениеВыбора, ТипЦен,
	                                      СпособЗаполненияЦен, Номенклатура, Количество, КоличествоМест, Характеристика,
	                                      ВалютаЦены, Цена, ЕдиницаИзмерения);

	ЗначениеВыбора.Свойство("Серия"   , Серия);
	ЗначениеВыбора.Свойство("Качество", Качество);

	Если НЕ ЗначениеВыбора.Свойство("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти) Тогда
		ЕстьСкладВТабличнойЧасти = Ложь;
	КонецЕсли;

	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ВозвратнаяТара)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	Если ВыборИзСправочника Тогда
		
		СтрокаТабличнойЧасти = Неопределено;
		ЗначениеВыбора.Свойство("ТекущиеДанные",СтрокаТабличнойЧасти);
		
	Иначе
		
		СтруктураОтбора = Новый Структура();

		Если ТабличнаяЧасть = Товары Тогда
			Качество = ПолучитьКачествоНоменклатуры(Качество);
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
			СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
			Если ЗначениеЗаполнено(Качество) Тогда
				СтруктураОтбора.Вставить("Качество"         , Качество);
			КонецЕсли;
			Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
				СтруктураОтбора.Вставить("Цена", Цена);
			КонецЕсли;
		Иначе
			СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
		КонецЕсли;

		Если ЕстьСкладВТабличнойЧасти
		   И ТабличнаяЧасть <> Услуги
		   И ЗначениеЗаполнено(Склад) Тогда
			СтруктураОтбора.Вставить("Склад", Склад);
		КонецЕсли;
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);

	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если Не ПересчитатьАвтоматическиеСкидки() Тогда // рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			СтрокаТабличнойЧасти.Склад = Склад;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;
			
			Если ВыборИзСправочника Тогда
				ОбработкаТабличныхЧастей.ОбновитьДанныеСтроки(СтрокаТабличнойЧасти,ЗначениеВыбора);
				ТоварыПриНачалеРедактирования(ЭлементыФормы.Товары, мНоваяСтрока);
				ТоварыНоменклатураПриИзменении(ЗначениеВыбора["ВладельцыФормы"]["Элемент"]);
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.Склад = Склад;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			Если ЗначениеЗаполнено(Качество) Тогда
				СтрокаТабличнойЧасти.Качество          = Качество;
			КонецЕсли;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

			Если Цена <> Неопределено Тогда
				Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                                                 СпособЗаполненияЦен,
				                                                 ТипЦен.ЦенаВключаетНДС,
				                                                 УчитыватьНДС,
				                                                 СуммаВключаетНДС,
				                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
			КонецЕсли;

			// Рассчитываем реквизиты табличной части.
			СтрокаТабличнойЧасти.Склад = Склад;
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Качество) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			Если Не ПересчитатьАвтоматическиеСкидки() Тогда // рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);

			// Ввод состава набора
			СтрокаТабличнойЧасти.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
			УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Цена;
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.Склад = Склад;

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

			Если Цена <> Неопределено Тогда

				// Пересчитаем цену в валюту документа.
				Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                                                 СпособЗаполненияЦен,
				                                                 ТипЦен.ЦенаВключаетНДС,
				                                                 УчитыватьНДС,
				                                                 СуммаВключаетНДС,
				                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			Иначе
				ОбработкаТабличныхЧастей.ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
			КонецЕсли;

			Если Не ПересчитатьАвтоматическиеСкидки() Тогда // рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
			
		КонецЕсли;
	КонецЕсли;

	ТабличнаяЧастьИмя = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	Если НЕ ВыборИзСправочника Тогда
		ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
		ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];
	КонецЕсли;
	
	

	УчетСерийныхНомеров.ОбработкаПодбораНоменклатурыПоСерийномуНомеру(ЗначениеВыбора, СерийныеНомера,
	                                              ТабличнаяЧасть, СтрокаТабличнойЧасти,
	                                              мПараметрыСвязиСтрокТЧ,
	                                              ТабличнаяЧастьИмя,
	                                              ЭтотОбъект);

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение документа переданными из формы заполнения данными.
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ТаблицаИсточник - таблица значений - источник для заполняемой табличной части.
//
Процедура ОбработкаЗаполнения(ТабличнаяЧасть, ТаблицаИсточник) Экспорт

	// Сформировать таблицу по ценам и скидкам
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ДокументОбъект.ВидОперации, ДокументОбъект.ДоговорКонтрагента);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Если ЕстьКолонкаЗаказ Тогда
		ТаблицаЗаказов = ТаблицаИсточник.Скопировать();
		ТаблицаЗаказов.Свернуть("ЗаказПокупателя");
		СписокЗаказов = Новый СписокЗначений;
		Для Каждого Строка Из ТаблицаЗаказов Цикл
			Если ЗначениеЗаполнено(Строка.ЗаказПокупателя) Тогда
				СписокЗаказов.Добавить(Строка.ЗаказПокупателя.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если НЕ СписокЗаказов.Количество() > 0 Тогда
			СписокЗаказов.Добавить(Сделка);
		КонецЕсли;
		Запрос.УстановитьПараметр("СписокЗаказов",   СписокЗаказов);
	Иначе
		Запрос.УстановитьПараметр("ЗаказПокупателя", Сделка);
	КонецЕсли;
	Запрос.УстановитьПараметр("СтатусТары", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	ИмяРеквизитаКоличества = "Количество";

	Если ТабличнаяЧасть = Товары Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя                      КАК ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена                                 КАК Цена,
		|	ОстаткиЗаказ.СтавкаНДС                            КАК СтавкаНДС,
		|	ОстаткиЗаказ.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент         КАК Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок          КАК ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки          КАК УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента"
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПокупателя В (&СписокЗаказов)", "
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя") + "
		|	                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена,
		|	ОстаткиЗаказ.СтавкаНДС,
		|	ОстаткиЗаказ.ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки
		|";

		ИмяРеквизитаКоличества = "Количество";

		ТаблицаИсточник.Колонки.Добавить("СтавкаНДС");
		ТаблицаИсточник.Колонки.Добавить("Коэффициент");
		ТаблицаИсточник.Колонки.Добавить("ПроцентСкидкиНаценки");
		ТаблицаИсточник.Колонки.Добавить("ПроцентАвтоматическихСкидок");
		ТаблицаИсточник.Колонки.Добавить("УсловиеАвтоматическойСкидки");
		ТаблицаИсточник.Колонки.Добавить("ЗначениеУсловияАвтоматическойСкидки");

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.Цена                                 КАК Цена,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя                      КАК ЗаказПокупателя,", "") + "
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента" 
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПокупателя В (&СписокЗаказов)", "
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя") + "
		|	                                              И СтатусПартии = &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена
		|";

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.Цена                                 КАК Цена,
		|	ОстаткиЗаказ.СтавкаНДС                            КАК СтавкаНДС,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя                      КАК ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок          КАК ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки          КАК УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента"
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПокупателя В (&СписокЗаказов)", "
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя") + "
		|	                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена,
		|	ОстаткиЗаказ.СтавкаНДС,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки
		|";

		ТаблицаИсточник.Колонки.Добавить("СтавкаНДС");
		ТаблицаИсточник.Колонки.Добавить("ПроцентСкидкиНаценки");
		ТаблицаИсточник.Колонки.Добавить("ПроцентАвтоматическихСкидок");
		ТаблицаИсточник.Колонки.Добавить("УсловиеАвтоматическойСкидки");
		ТаблицаИсточник.Колонки.Добавить("ЗначениеУсловияАвтоматическойСкидки");
	КонецЕсли;

	ТаблицаЦенСкидок = Запрос.Выполнить().Выгрузить();
	СтрокаИндекса = "Номенклатура";
	Если ТабличнаяЧасть = Товары Тогда
		СтрокаИндекса = СтрокаИндекса + ",ХарактеристикаНоменклатуры";
	КонецЕсли;
	ТаблицаЦенСкидок.Индексы.Добавить(СтрокаИндекса);

	ТаблицаИсточник.Колонки.Добавить("Цена");

	НомерСтроки = 0;
	ТаблицаИсточникКоличество = ТаблицаИсточник.Количество();
	Пока НомерСтроки < ТаблицаИсточникКоличество Цикл

		СтрокаТаблицы = ТаблицаИсточник[НомерСтроки];

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура",                   СтрокаТаблицы.Номенклатура);
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		КонецЕсли;

		Если ЕстьКолонкаЗаказ И ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			СтруктураОтбора.Вставить("ЗаказПокупателя", СтрокаТаблицы.ЗаказПокупателя);
		ИначеЕсли ЕстьКолонкаЗаказ И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтруктураОтбора.Вставить("ЗаказПокупателя", Сделка);
		КонецЕсли;

		ОтобранныеСтрокиТаблицыЦенСкидок = ТаблицаЦенСкидок.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицыЦенСкидок Из ОтобранныеСтрокиТаблицыЦенСкидок Цикл

			Если СтрокаТаблицыЦенСкидок.Количество > 0 Тогда

				Если СтрокаТаблицыЦенСкидок.Количество >= СтрокаТаблицы[ИмяРеквизитаКоличества] Тогда

					СтрокаТаблицы.Цена = СтрокаТаблицыЦенСкидок.Цена;

					Если ТабличнаяЧасть = Товары
					 Или ТабличнаяЧасть = Услуги Тогда
						СтрокаТаблицы.ПроцентСкидкиНаценки = СтрокаТаблицыЦенСкидок.ПроцентСкидкиНаценки;
						СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыЦенСкидок.ПроцентАвтоматическихСкидок;
						СтрокаТаблицы.УсловиеАвтоматическойСкидки = СтрокаТаблицыЦенСкидок.УсловиеАвтоматическойСкидки;
						СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = СтрокаТаблицыЦенСкидок.ЗначениеУсловияАвтоматическойСкидки;

						СтрокаТаблицы.СтавкаНДС            = СтрокаТаблицыЦенСкидок.СтавкаНДС;

						Если ТабличнаяЧасть = Товары Тогда

							СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
							СтрокаТаблицы.Коэффициент      = СтрокаТаблицыЦенСкидок.Коэффициент;

							СтрокаТаблицы.Количество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
							                             СтрокаТаблицы.Количество
							                             * СтрокаТаблицыЦенСкидок.КоэффициентЕдиницыХранения
							                             / СтрокаТаблицы.Коэффициент);




						КонецЕсли;
					КонецЕсли;

					СтрокаТаблицыЦенСкидок.Количество = СтрокаТаблицыЦенСкидок.Количество - СтрокаТаблицы[ИмяРеквизитаКоличества];

				Иначе

					// Разобьем на две строки
					КопияСтроки = ТаблицаИсточник.Добавить();
                    КопияСтроки[ИмяРеквизитаКоличества] = СтрокаТаблицы[ИмяРеквизитаКоличества];

					СтрокаТаблицы[ИмяРеквизитаКоличества] = СтрокаТаблицыЦенСкидок.Количество;
					СтрокаТаблицы.Цена                    = СтрокаТаблицыЦенСкидок.Цена;

					Если ТабличнаяЧасть = Товары
					 Или ТабличнаяЧасть = Услуги Тогда
						СтрокаТаблицы.ПроцентСкидкиНаценки = СтрокаТаблицыЦенСкидок.ПроцентСкидкиНаценки;
						СтрокаТаблицы.СтавкаНДС            = СтрокаТаблицыЦенСкидок.СтавкаНДС;
						Если ТабличнаяЧасть = Товары Тогда
							СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыЦенСкидок.ПроцентАвтоматическихСкидок;
							СтрокаТаблицы.ЕдиницаИзмерения            = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
							СтрокаТаблицы.Коэффициент                 = СтрокаТаблицыЦенСкидок.Коэффициент;

							СтрокаТаблицы.Количество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
							                             СтрокаТаблицы.Количество
							                             * СтрокаТаблицыЦенСкидок.КоэффициентЕдиницыХранения
							                             / СтрокаТаблицы.Коэффициент);

						КонецЕсли;
					КонецЕсли;
                    ЗаполнитьЗначенияСвойств(КопияСтроки, СтрокаТаблицы,,ИмяРеквизитаКоличества);

					КопияСтроки[ИмяРеквизитаКоличества] = КопияСтроки[ИмяРеквизитаКоличества] - СтрокаТаблицы[ИмяРеквизитаКоличества];

				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;

	// Загрузить в документ обработанную таблицу
	Если НЕ ЕстьКолонкаЗаказ Тогда
		ОрганизацияЗаказа                   = Сделка.Организация;
		ДатаЗаказа                          = Сделка.Дата;
	КонецЕсли;
	
	КопияТабличнойЧасти = ТабличнаяЧасть.Выгрузить();
    ТабличнаяЧасть.Загрузить(ТаблицаИсточник);


	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ЕстьКолонкаЗаказ И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;
		КонецЕсли;

		Если ТабличнаяЧасть = Товары Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент) Тогда
				СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			КонецЕсли;
            Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
				СтрокаТабличнойЧасти.Склад = Склад;
			КонецЕсли;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
			
			// Заполнение цены зависит от розничности операции.
			//Заказ для получения курса и кратности извлекается либо из таб. части либо из шапки
			Если ЕстьКолонкаЗаказ Тогда
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
					текЗаказ = СтрокаТабличнойЧасти.ЗаказПокупателя;
				Иначе
					текЗаказ = Сделка;
				КонецЕсли;
			Иначе
				текЗаказ = Сделка;
			КонецЕсли;
			Если ЗначениеЗаполнено(текЗаказ) Тогда
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
												МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
												текЗаказ.ВалютаДокумента, ВалютаДокумента,
												ЗаполнениеДокументов.КурсДокумента(текЗаказ, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
												ЗаполнениеДокументов.КратностьДокумента(текЗаказ, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
												Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
												текЗаказ.СуммаВключаетНДС,
												УчитыватьНДС,
												СуммаВключаетНДС,
												УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
            КонецЕсли;
			ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
            Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
				СтрокаТабличнойЧасти.Склад = Склад;
			КонецЕсли;

			// Выполнить общие действия для всех документов при изменении возвратной тары.
			ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);

		КонецЕсли;

	КонецЦикла;
	
	Если КопияТабличнойЧасти.Количество()>0 Тогда
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТабличнойЧасти, ТабличнаяЧасть);
	КонецЕсли;
	
	Если ТабличнаяЧасть = Товары Тогда
		СтрокаХарактеристика       = ", ХарактеристикаНоменклатуры";
	Иначе
		СтрокаХарактеристика       = "";
	КонецЕсли;
	
	Если ЕстьКолонкаЗаказ Тогда
		СтрокаЗаказ = ", ЗаказПокупателя";
	Иначе
		СтрокаЗаказ = "";
	КонецЕсли;
	
	Если ТабличнаяЧасть <> Услуги Тогда
		СтрокаСпособСписания = ", СпособСписанияОстаткаТоваров";
	Иначе
		СтрокаСпособСписания = "";
	КонецЕсли;
	
	Если ТабличнаяЧасть <> Услуги И мУказаниеСкладовВТЧ Тогда
		СтрокаСклад = ", Склад";
	Иначе
		СтрокаСклад = "";
	КонецЕсли;
	
	Если ТабличнаяЧасть = Товары И мЕстьКолонкаСерии Тогда
		СтрокаСерия = ", СерияНоменклатуры";
	Иначе
		СтрокаСерия = "";
	КонецЕсли;
	
	КолонкиГруппировок = "";
	КолонкиСуммирования = "";
	Для каждого Колонка из КопияТабличнойЧасти.Колонки цикл
		ИмяКолонки = Колонка.Имя;
		Если ИмяКолонки = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяКолонки = "Количество" или ИмяКолонки = "Сумма" или ИмяКолонки = "КоличествоМест" или ИмяКолонки = "СуммаНДС" Тогда
			КолонкиСуммирования = КолонкиСуммирования + ?(КолонкиСуммирования="","",",") + ИмяКолонки ;
			Продолжить;
		КонецЕсли;
		КолонкиГруппировок = КолонкиГруппировок + ?(КолонкиГруппировок="","",",") + ИмяКолонки ;
	КонецЦикла;

	ТабличнаяЧасть.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	ТабличнаяЧасть.Сортировать("Номенклатура" + СтрокаХарактеристика + СтрокаЗаказ + СтрокаСклад + СтрокаСерия + СтрокаСпособСписания + ", Цена");

КонецПроцедуры // ОбработкаЗаполнения()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
	ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнение цены зависит от розничности операции.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	
	// Состав набора зависит от его характеристики.
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
// Для оптового склада или услуг в рознице цена редактируется,
// Для товаров на розничном складе выбирается из списка наличия в регистре.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭлементУправления = мКолонкиТовары.Цена.ЭлементУправления;
	
	ЭлементУправления.КнопкаСпискаВыбора = Ложь;

КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	// Колонка СуммаНДС не доступна для редактировани, если включен АвторасчетНДС
	ЭлементыФормы.Товары.Колонки.СуммаНДС.ТолькоПросмотр = АвторасчетНДС;
	ЭлементыФормы.Услуги.Колонки.СуммаНДС.ТолькоПросмотр = АвторасчетНДС;
	
	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> мКолонкиУслуги.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> мКолонкиУслуги.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	ВидимостьСпособаСписания = Ложь;
	Если НЕ (ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак) Тогда

		//видимость колонки ЗаказПокупателя определили ранее с помощью процедуры УстановитьВидимостьКолонкиЗаказ 
		ВидимостьКолонкиЗаказ = мКолонкиТовары.ЗаказПокупателя.Видимость;
		Если ВидимостьКолонкиЗаказ Тогда
			ВидимостьСпособаСписания = Истина;
		Иначе
			Если ЗначениеЗаполнено(Сделка) Тогда
				ВидимостьСпособаСписания = (Сделка.Метаданные().Имя = "ЗаказПокупателя");
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

	Если ВидимостьСпособаСписания <> мКолонкиТовары.СпособСписанияОстаткаТоваров.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СпособСписанияОстаткаТоваров, ВидимостьСпособаСписания);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.СпособСписанияОстаткаТоваров, ВидимостьСпособаСписания);
	КонецЕсли;

	// Видимость страници "Услуги"
	ЭтоКомиссия = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = НЕ ЭтоКомиссия;

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	ЭлементыФормы.Подразделение.Видимость        = ОтражатьВУправленческомУчете;
	ЭлементыФормы.НадписьПодразделение.Видимость = ОтражатьВУправленческомУчете;

	// Качество указывается только для брака
	ВидимостьКолонкиКачества = (ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Качество, ВидимостьКолонкиКачества);

	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");
	
	Внешнеэкономический = ДоговорКонтрагента.Внешнеэкономический;	
	ЭтоОборудование 	= (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование);
	ЕстьНалогНаПрибыльДо2015 = мТекущаяСхемаНалогообложения.НалогНаПрибыль И (Дата < глЗначениеПеременной("ДатаНКУ2015"));
	
	// Установка видимости колонок если отражаем в рег. учете.
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СчетУчетаБУ,              	ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПереданныеСчетУчетаБУ,    	ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета И ЭтоКомиссия);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СхемаРеализации,    		 	ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета И НЕ ЭтоКомиссия);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.НалоговоеНазначение, 			  ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета И мТекущаяСхемаНалогообложения.НДС);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.НалоговоеНазначениеДоходовИЗатрат, ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета  И ЕстьНалогНаПрибыльДо2015 И НЕ ЭтоКомиссия);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.СчетУчетаБУ, 				ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.СхемаРеализации,		 		ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.НалоговоеНазначение, 		ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета И мТекущаяСхемаНалогообложения.НДС);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.НалоговоеНазначениеДоходовИЗатрат, 		ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета И ЕстьНалогНаПрибыльДо2015);

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СхемаРеализации,    	ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.НалоговоеНазначениеДоходовИЗатрат, 	ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета И ЕстьНалогНаПрибыльДо2015);
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета;
	
	// Счета учета взаиморасчетов
	ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Видимость          = ОтражатьВБухгалтерскомУчете И НЕ ЭтоКомиссия;
	ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентом.Видимость   = ОтражатьВБухгалтерскомУчете И НЕ ЭтоКомиссия;
	ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость              = ОтражатьВБухгалтерскомУчете И НЕ ЭтоКомиссия;
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансам.Видимость       = ОтражатьВБухгалтерскомУчете И НЕ ЭтоКомиссия;
	
	СложныйНалоговыйУчет = ДоговорКонтрагента.СложныйНалоговыйУчет;                                     

	// управление видимостью тары
	ЭлементыУправленияПоТаре = Новый Массив();
	ЭлементыУправленияПоТаре.Добавить(ЭлементыФормы.СчетУчетаРасчетовПоТаре);
	ЭлементыУправленияПоТаре.Добавить(ЭлементыФормы.НадписьСчетУчетаРасчетовПоТаре);
	ЭлементыУправленияПоТаре.Добавить(ЭлементыФормы.СчетУчетаРасчетовПоТареПоАвансам);
	ЭлементыУправленияПоТаре.Добавить(ЭлементыФормы.НадписьСчетУчетаРасчетовПоТареПоАвансам);
	ТараНеУчитывается = Внешнеэкономический;
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма, ЭлементыУправленияПоТаре, ТараНеУчитывается);
	
	ВестиПоДокументамРасчетовСКонтрагентом     = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом; 
	ВестиПоДокументамРасчетовСКонтрагентомРегл = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентомРегл; 
	Если ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость =    (ОтражатьВУправленческомУчете И ВестиПоДокументамРасчетовСКонтрагентом)
																						ИЛИ (ОтражатьВБухгалтерскомУчете  И ВестиПоДокументамРасчетовСКонтрагентомРегл);
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость = ложь;
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.СуммаВзаиморасчетов, 	ОтражатьВУправленческомУчете И мТекущаяВалютаВзаиморасчетов <> ВалютаДокумента);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.ВозвратнаяТара, 		ОтражатьВБухгалтерскомУчете И ВестиПоДокументамРасчетовСКонтрагентомРегл И НЕ ТараНеУчитывается);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.СтавкаНДС, 			ОтражатьВБухгалтерскомУчете И ВестиПоДокументамРасчетовСКонтрагентомРегл И мТекущаяСхемаНалогообложения.НДС И НЕ СложныйНалоговыйУчет И УчитыватьНДС);
	
	УправлениеВзаиморасчетами.УстановитьНадписьОВеденииВзаиморасчетовПоДокументамРасчетов(ЭлементыФормы, 
																ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, Ложь, 
																ВестиПоДокументамРасчетовСКонтрагентом, ВестиПоДокументамРасчетовСКонтрагентомРегл,
																СложныйНалоговыйУчет);	

	ЭлементыФормы.ЕстьАвансДо01042011.Видимость 	   		   = ЕстьНалогНаПрибыльДо2015 И НЕ ЭтоКомиссия;
	ЭлементыФормы.НадписьСуммаВДВРПоАвансуДо01042011.Видимость = ЕстьНалогНаПрибыльДо2015 И ЕстьАвансДо01042011 И НЕ НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ И НЕ ЭтоКомиссия;
	ЭлементыФормы.СуммаВДВРПоАвансуДо01042011.Видимость 	   = ЕстьНалогНаПрибыльДо2015 И ЕстьАвансДо01042011 И НЕ НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ И НЕ ЭтоКомиссия;
	ЭлементыФормы.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ.Видимость = ЕстьНалогНаПрибыльДо2015 И ЕстьАвансДо01042011 И НЕ ЭтоКомиссия;
	
	ЭлементыФормы.ДоверенностьСерия.Видимость = НЕ ПолучилПоДругомуДокументу;
	ЭлементыФормы.ДоверенностьДата.Видимость = НЕ ПолучилПоДругомуДокументу;
	ЭлементыФормы.ДоверенностьНомер.Видимость = НЕ ПолучилПоДругомуДокументу;
	ЭлементыФормы.НадписьДоверенностьСерия.Видимость = НЕ ПолучилПоДругомуДокументу;
	ЭлементыФормы.НадписьДоверенностьДата.Видимость = НЕ ПолучилПоДругомуДокументу;
	ЭлементыФормы.НадписьДоверенностьНомер.Видимость = НЕ ПолучилПоДругомуДокументу;
	ЭлементыФормы.ДокументПодтверждающийПолномочия.Видимость = ПолучилПоДругомуДокументу;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает видимость реквизитов, управления контролем взаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьКонтроляВзаиморасчетов()

	ФлагВидимости = УправлениеВзаиморасчетами.ЕстьРазрешениеПроводитьБезКонтроляВзаиморасчетов();

	ЭлементыФормы.РамкаКонтрольВзаиморасчетов.Видимость     = ФлагВидимости;
	ЭлементыФормы.ОтключитьКонтрольВзаиморасчетов.Видимость = ФлагВидимости;

КонецПроцедуры // УстановитьВидимостьКонтроляВзаиморасчетов()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
	(НачалоДня(Дата) = НачалоДня(ТекущаяДата()));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает автоотметку незаполненного для Склада
Процедура УстановитьАвтоотметкуСклада()

	Автоотметка = мАвтоОтметкаСклада 
	              И (Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0);

	ЭлементыФормы.Склад.АвтоотметкаНезаполненного = Автоотметка;
	
	Если ЭлементыФормы.Склад.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(Склад) Тогда
		ЭлементыФормы.Склад.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотметкуСклада()

// Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	РаботаСДиалогами.УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// Покажем цветом, что суммы еще могут изменится - пересчитаться при проведении/записи
	Если (АвторасчетНДС) И (НЕ мПерерасчетПроизведен) Тогда
		Если Модифицированность Тогда
			ЭлементыФормы.ВсегоНДС.ЦветТекстаПоля = ЦветаСтиля.ЦветРамки;
		Иначе
			ЭлементыФормы.ВсегоНДС.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли; 
	Иначе	
		ЭлементыФормы.ВсегоНДС.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	КонецЕсли;
	
	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")+УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги"));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС")+Услуги.Итог("СуммаНДС"));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
						+ " " +  ДокументОбъект.ВалютаДокумента
		                + " = " + ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.УсловиеПродаж) Тогда
		ВременнаяСтрока = ВременнаяСтрока + ", Условие продаж: " + ДокументОбъект.УсловиеПродаж;
	КонецЕсли;

	Если АвторасчетНДС Тогда
		ВременнаяСтрока = ВременнаяСтрока + " Автоматический расчет НДС.";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
		// Покажем цветом, что суммы еще могут изменится - пересчитаться при проведении/записи
		Если (АвторасчетНДС) И (НЕ мПерерасчетПроизведен) Тогда
			Если Модифицированность Тогда
				ЭлементыФормы.Всего.ЦветТекстаПоля = ЦветаСтиля.ЦветРамки;
			Иначе
				ЭлементыФормы.Всего.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
			КонецЕсли; 
		Иначе	
			ЭлементыФормы.Всего.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//***
	Если не ЭтоНовый()     тогда
        Попытка 
            ЭтотОбъект.Заблокировать();
        Исключение
            Предупреждение(ОписаниеОшибки(), 300);
            Отказ = истина;
            возврат;
        КонецПопытки;    
    КонецЕсли;    //***
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		РаботаСДиалогами.ВыбратьВидОперации(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если ЭтоНовый()
	   И ЗначениеЗаполнено(ПараметрОснование)
	   И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
	   И НЕ ПараметрОснование.Проведен Тогда
	   
		ТекстВопроса = "Заказ покупателя не проведен, документ не будет заполнен, продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	мКолонкиТовары.ПроцентАвтоматическихСкидок.Видимость = МожноРассчитыватьАвтоматическиеСкидки();
	мКолонкиУслуги.ПроцентАвтоматическихСкидок.Видимость = МожноРассчитыватьАвтоматическиеСкидки();
	ЭлементыФормы.ОсновнаяПанель.Страницы.АвтоматическиеСкидки.Видимость = МожноРассчитыватьАвтоматическиеСкидки();

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);
	
	Если ЭтоНовый() Тогда

		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа", ПараметрОбъектКопирования, ПараметрОснование);	
		ОбщегоНазначения.ЗаполнитьОбязательныеРеквизитыШапкиНовогоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		//Если РольДоступна("ОтделСбыта") тогда
		//	ЗаявкаДата=ТекущаяДата();
		//	Дата=?(ЗначениеЗаполнено(ПараметрыСеанса.ДатаДокументаОтгрузки),ПараметрыСеанса.ДатаДокументаОтгрузки,ТекущаяДата());
		//КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			
			СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
			
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателяПриБартере;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателяПриБартере;
			Иначе
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			КонецЕсли;
			
			СчетУчетаРасчетовПоТаре          = СчетаУчета.СчетУчетаТарыПокупателя;
			СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТареПокупателя;
		
			СчетУчетаНДС 				= СчетаУчета.СчетУчетаНДСПродаж;
			СчетУчетаНДСПодтвержденный  = СчетаУчета.СчетУчетаНДСПродажПодтвержденный;
			
		КонецЕсли;
		
	Иначе
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СпособСписанияОстаткаТоваров");
	СтруктураКолонок.Вставить("СчетУчетаБУ");
	СтруктураКолонок.Вставить("СхемаРеализации");
	СтруктураКолонок.Вставить("НалоговоеНазначение");
	СтруктураКолонок.Вставить("НалоговоеНазначениеДоходовИЗатрат");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВозвратнаяТара, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");
	СтруктураКолонок.Вставить("Качество");
	СтруктураКолонок.Вставить("СчетУчетаБУ");
	СтруктураКолонок.Вставить("ПереданныеСчетУчетаБУ");
	СтруктураКолонок.Вставить("СхемаРеализации");
	СтруктураКолонок.Вставить("НалоговоеНазначение");
	СтруктураКолонок.Вставить("НалоговоеНазначениеДоходовИЗатрат");
	
//ВСТАВКА РЕЗОНАНС
	Если РольДоступна("Р_ОтгрузкаГСМСоСклада") Тогда
		СтруктураКолонок = Новый Структура();
		// Установить колонки, видимостью которых пользователь управлять не может.
		СтруктураКолонок.Вставить("Номенклатура");
		СтруктураКолонок.Вставить("Количество");
		СтруктураКолонок.Вставить("Цена");
		СтруктураКолонок.Вставить("Сумма");
	КонецЕсли;
//КОНЕЦ ВСТАВКИ
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СхемаРеализации");
	СтруктураКолонок.Вставить("НалоговоеНазначение");
	СтруктураКолонок.Вставить("НалоговоеНазначениеДоходовИЗатрат");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиУслуги, СтруктураКолонок);
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
    мТекущаяСхемаНалогообложения = ОбщегоНазначения.ПолучитьСхемуНалогообложения(Дата,Организация);

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТаблицаАвтоСкидок);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	РаботаСДиалогами.УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, мКолонкиВозвратнаяТара, ЭлементыФормы.Склад, "Склад", мУказаниеСкладовВТЧ);

	//Запомним автоотметку поля шапки Склад
	мАвтоОтметкаСклада = ЭлементыФормы.Склад.АвтоОтметкаНезаполненного;
	
	РаботаСДиалогами.УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, ВидОперации, ДоговорКонтрагента, мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, мКолонкиДокументы, ЭлементыФормы.Сделка);
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	УстановитьВидимостьКонтроляВзаиморасчетов();
 	
	УстановитьАвтоотметкуСклада();

	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = (ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	ПриИзмененииВидаСклада();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();

	мКолонкиТовары.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	мКолонкиВозвратнаяТара.Цена.ЭлементУправления.ТолькоПросмотр         = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиВозвратнаяТара.Сумма.ЭлементУправления.ТолькоПросмотр        = НЕ мМожноМенятьЦенуВДокументе;

	мКолонкиУслуги.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиУслуги.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиУслуги.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиУслуги.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары",                         "Товары");
	Страницы.Добавить("Тара",                           "ВозвратнаяТара");
	Страницы.Добавить("Услуги",                         "Услуги");
	Страницы.Добавить("ДокументыРасчетовСКонтрагентом", "ДокументыРасчетовСКонтрагентом");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Сохраним текущее значение сделки
	мСтароеЗначениеСделки = Сделка;
	мСтароеЗначениеСклада = Склад;

	РаботаСДиалогами.УстановитьДоступностьКнопкиЗаполнитьИзТерминалаСбораДанных(ЭтаФорма, мТерминалы);
	РаботаСДиалогами.УстановитьДоступностьМенюПроверить(ЭтаФорма);

	РаботаСДиалогами.УстановитьДоступностьКнопкиСерийныеНомера(ЭлементыФормы.КоманднаяПанельТовары.Кнопки);

	ЭтаФорма.ПодключитьОбработчикИзмененияДанных("ВидПередачи"                 , "ОбработчикИзмененияДанных");
	ЭтаФорма.ПодключитьОбработчикИзмененияДанных("ОтражатьВУправленческомУчете", "ОбработчикИзмененияДанных");

//ВСТАВКА РЕЗОНАНС
	Р_ОграничениеВидимостиДляОтгрузкиГСМСоСклада();
//КОНЕЦ ВСТАВКИ

//***
Если Контрагент.ЗапретПродажи=Истина И  ЭтотОбъект.Проведен тогда
	ЭтаФорма.ТолькоПросмотр =Истина;
иначе
	ЭтаФорма.ТолькоПросмотр =Ложь;
КонецЕсли;	//***


КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
													ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
													ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                 КурсВзаиморасчетов,
	                                                                                 КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	ЗаголовокТовары = ?(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование, "Оборудование (", "Товары (");
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Тара  .Заголовок = "Тара ("   + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
	СтраницаПанели.Товары.Заголовок = ЗаголовокТовары + ДокументОбъект.Товары.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";

//***
Если ЭлементыФормы.Контрагент.Значение.ЗапретПродажи=Истина тогда
	 ЭлементыФормы.Контрагент.ЦветФонаПоля=WebЦвета.СветлоРозовый;
 иначе
	 ЭлементыФормы.Контрагент.ЦветФонаПоля=WebЦвета.Белый;
КонецЕсли;	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);

		ИначеЕсли Команда = "ЗаполнениеТабличныхЧастей" Тогда

			Если ЗначениеВыбора.ЗаполнятьТовары Тогда
				ОбработкаЗаполнения(Товары, ЗначениеВыбора.Товары);
			КонецЕсли;
			Если ЗначениеВыбора.ЗаполнятьТару Тогда
				ОбработкаЗаполнения(ВозвратнаяТара, ЗначениеВыбора.ВозвратнаяТара);
			КонецЕсли;
			Если ЗначениеВыбора.ЗаполнятьУслуги Тогда
				ОбработкаЗаполнения(Услуги, ЗначениеВыбора.Услуги);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	Ценообразование.ПроверитьВозможностьЗаменыДисконтнойКарты(ЭтотОбъект, ПолучитьЗначениеУчетнойПолитики());

КонецПроцедуры // ПослеЗаписи()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);
КонецПроцедуры

// Обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии()

Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	     Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательМагнитныхКарт
	     Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных
	     Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательRFIDМеток Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                ТипЦен, , ДоговорКонтрагента, УсловиеПродаж);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
		ОбработкаПодбора(Услуги, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода транспортной упаковки.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры с учётом коэффициента упаковки.
//
//  Упаковка       - <СправочникСсылка.ТранспортныеУпаковки>
//                 - Транспортная упаковка.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКУпаковка(Номенклатура, Характеристика, Серия, Качество,
                    Единица, Количество, Упаковка, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                ТипЦен);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
		ОбработкаПодбора(Услуги, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКУпаковка()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено, 1,
	                                                ВалютаДокумента, Номер,
	                                                мУказаниеСкладовВТЧ, ТипЦен, , ДоговорКонтрагента, УсловиеПродаж);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
		ОбработкаПодбора(Услуги, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Результат = Истина;

	Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
		Возврат Результат;
	КонецЕсли;

	ДисконтнаяКарта = Карта;
	ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт
	
//ЗАМЕНА РЕЗОНАНС
// ИСХОДНЫЙ ТЕКСТ
//	Возврат Ложь;
// НОВЫЙ ТЕКСТ
	Если Р_РежимТалоны Тогда
		Р_ДобавитьСтрокуПакетаТалоновПоШК(Штрихкод);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
//КОНЕЦ ЗАМЕНЫ

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СЧИТЫВАТЕЛЬ МАГНИТНЫХ КАРТ)

// Функция осуществляет обработку считывания информационной карты.
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Считанная магнитная карта.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СМКИнформационнаяКарта(Карта, СМК) Экспорт

	Результат = Истина;

	Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
		Возврат Результат;
	КонецЕсли;

	ДисконтнаяКарта = Карта;
	ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СМКИнформационнаяКарта()

// Функция осуществляет обработку считывания незарегистрированной магнитной карты.
//
// Параметры:
//  Код      - <Строка>
//           - Считанный код.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
//
Функция СМКНеизвестныйКод(Код, СМК) Экспорт

	Результат = Ложь;

	Возврат Результат;

КонецФункции // СМКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе с устройством
// для считывания магнитных карт.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  КодКарты - <Строка>
//           - Считанный код карты.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
Процедура СМКОшибка(Ошибка, КодКарты, СМК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСМКТО(Ошибка, КодКарты);
	Предупреждение(Текст);

КонецПроцедуры // СМКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров[Кнопка.Имя];
	КонецЕсли;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоПоступлению(Кнопка)

	ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаПоступления.Заголовок = "Выберите документ поступления для заполнения документа реализации";
	ФормаПоступления.РежимВыбора = Истина;
	Поступление = ФормаПоступления.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыПоПоступлениюТоваровУпр(Поступление);

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказуПокупателя(Кнопка)

	ЗаполнитьТабличнуюЧасть(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Товары".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельТоварыДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары = Истина;
			Форма.ПоказыватьУслуги = Ложь;
			Форма.ПоказыватьТару   = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары   = Истина;
			Форма.ФлажокУслуги   = Ложь;
			Форма.ФлажокТара     = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		//Расчет скидок
		ПересчитатьАвтоматическиеСкидки();
		
		Если АвторасчетНДС Тогда
			// соответствие для хранения погрешностей округлений
			ПогрешностиОкругления = Новый Соответствие();
			// пересчет сумм НДС с учетом ошибок округления
			ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ПогрешностиОкругления, ?(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование, "Оборудование", "Товары"));
			// пересчет сумм НДС с учетом ошибок округления
			ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, ЭтотОбъект, ПогрешностиОкругления, "Услуги");
			// Установим признак перерасчета сумм НДС
			мПерерасчетПроизведен = ИСТИНА;
		КонецЕсли;
		
	    Для каждого Строка Из ДокументыРасчетовСКонтрагентом Цикл
			
			Строка.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.Сумма,  
			                                             ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
			                                             ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
			                                             ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);	
			
		КонецЦикла;

		УстановитьВидимость();
	    ОбновитьПодвал();
		
//ВСТАВКА РЕЗОНАНС
		Р_ОграничениеВидимостиДляОтгрузкиГСМСоСклада();
//КОНЕЦ ВСТАВКИ
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мРассчитыватьАвтоматическиеСкидки   = РассчитыватьАвтоматическиеСкидки();
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧастиТовары.мМинимальныеЦены = мМинимальныеЦены;
	ФормаИзменениеТабличнойЧастиТовары.мСписокФильтров = мСписокФильтров;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара" и выборе соответствующего подменю, 
// вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоЗаказуПокупателя(Кнопка)

	ЗаполнитьТабличнуюЧасть(ВозвратнаяТара);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараДействиеЗаполнитьПоПоступлению(Кнопка)
	
	ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаПоступления.Заголовок = "Выберите документ поступления для заполнения документа реализации";
	ФормаПоступления.РежимВыбора = Истина;
	Поступление = ФормаПоступления.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(Поступление);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Возвратная тара".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельВозвратнаяТараДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары = Ложь;
			Форма.ПоказыватьУслуги = Ложь;
			Форма.ПоказыватьТару   = Истина;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары   = Ложь;
			Форма.ФлажокУслуги   = Ложь;
			Форма.ФлажокТара     = Истина;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 
	
	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();
		НаборТоварыНаСкладах = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборТоварыНаСкладах.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыНаСкладах.Прочитать();
		НаборТоварыВРезервеНаСкладах = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборТоварыВРезервеНаСкладах.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыВРезервеНаСкладах.Прочитать();
		НаборТоварыОрганизаций = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборТоварыОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыОрганизаций.Прочитать();
		НаборВзаиморасчетыПоДокументам = РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.СоздатьНаборЗаписей();
		НаборВзаиморасчетыПоДокументам.Отбор.Регистратор.Установить(Ссылка);
		НаборВзаиморасчетыПоДокументам.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьТабличныеЧастиПередПроведением();

	// Если заполнить удалось, то запись документа с проведением
	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура открывате журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	ПересчитатьАвтоматическиеСкидки();
	
	мТекущаяСхемаНалогообложения = ОбщегоНазначения.ПолучитьСхемуНалогообложения(Дата,Организация);

	УстановитьВидимость();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка ОтражатьВУправленческомУчете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в бухгалтерском учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	Если ПоказыватьВДокументахСчетаУчета Тогда
			
		Если ОтражатьВБухгалтерскомУчете Тогда
			ТекстВопроса = "Установить счета бухгалтерского и налогового учета в соответствии со значениями по умолчанию?"; 
		Иначе
			ТекстВопроса = "Очистить счета бухгалтерского и налогового учета?"; 
		КонецЕсли;	
					
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета");
			
	Иначе
			
		Ответ = КодВозвратаДиалога.Да;
			 
	КонецЕсли;
							
	Если Ответ = КодВозвратаДиалога.Да Тогда				
	
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
				
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателяПриБартере;
			СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателяПриБартере;
		Иначе
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;
				
		СчетУчетаРасчетовПоТаре          = СчетаУчета.СчетУчетаТарыПокупателя;
		СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТареПокупателя;
		СчетУчетаНДС 				= СчетаУчета.СчетУчетаНДСПродаж;
		СчетУчетаНДСПодтвержденный  = СчетаУчета.СчетУчетаНДСПродажПодтвержденный;
		
		// обработка счетов НУ в ТЧ
		Если Товары.Количество() + ВозвратнаяТара.Количество() + Услуги.Количество() > 0 Тогда				
			ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
			ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
			ЗаполнитьСчетаУчетаВТабЧастиУслуги(ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
		КонецЕсли;
				
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	ПриИзмененииОрганизации(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	// Выполняем общие действия для всех документов при изменении Организация.
	СтарыйДоговор = ДоговорКонтрагента;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);	
	Если НЕ СтарыйДоговор = ДоговорКонтрагента Тогда
		ПриИзмененииДоговора();
	КонецЕсли;
	
	Сделка = Неопределено;

    мТекущаяСхемаНалогообложения = ОбщегоНазначения.ПолучитьСхемуНалогообложения(Дата,Организация);
	
	УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)
	Если Элемент.Значение.ЗапретПродажи=Истина	тогда
 			Предупреждение("Снимите запрет на продажу данному контрагенту!");
			//Элемент.Значение = Справочники.Контрагенты.ПустаяСсылка();
			//возврат;
	КонецЕсли;
	ПриИзмененииКонтрагента();

//*** Изменения БУ Ф2	
	Если Элемент.Значение.ОсновнойВидДеятельности.Код<>"000000001" Тогда				
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателяПриБартере;
			СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателяПриБартере;
		Иначе
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;
				
		СчетУчетаРасчетовПоТаре          = СчетаУчета.СчетУчетаТарыПокупателя;
		СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТареПокупателя;
		СчетУчетаНДС 				= СчетаУчета.СчетУчетаНДСПродаж;
		СчетУчетаНДСПодтвержденный  = СчетаУчета.СчетУчетаНДСПродажПодтвержденный;
		
		// обработка счетов НУ в ТЧ
		Если Товары.Количество() + ВозвратнаяТара.Количество() + Услуги.Количество() > 0 Тогда				
			ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
			ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
			ЗаполнитьСчетаУчетаВТабЧастиУслуги(ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
		КонецЕсли;
	КонецЕсли;//*** Изменения БУ Ф2	
	//***
	ЭтотОбъект.ПрименятьПроцентСкидкиНаВес=Элемент.Значение.РезрешитьСкидкуНаВес;
	
	
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        мСтруктураПараметровДляПолученияДоговора.СписокДопустимыхВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСтароеЗначениеСделки = Сделка;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		СтрокаТипа = "СчетНаОплатуПокупателю";
	Иначе
		СтрокаТипа = "ЗаказПокупателя";
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, СтрокаТипа);

КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Сделка
//
Процедура СделкаПриИзменении(Элемент)

	ПересчитатьАвтоматическиеСкидки();
	
	УстановитьВидимость();
	
	ИзменитьЗаказВТабличнойЧасти();

	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		БанковскийСчетОрганизации = Сделка.СтруктурнаяЕдиница;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерасчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерасчитатьДолгНажатие(Элемент)

	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка);

КонецПроцедуры // КнопкаПерерасчитатьАвансДоговораНажатие()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСтароеЗначениеСклада = Склад;

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "Склад".
//
Процедура СкладПриИзменении(Элемент)

	ПриИзмененииВидаСклада();
	
	Если мУказаниеСкладовВТЧ Тогда
		РаботаСДиалогами.ИзменитьЗначениеСкладаВТабЧастях(
			ЭтотОбъект,
			Склад,
			мСтароеЗначениеСклада,
			"Товары, ВозвратнаяТара",
			"Склад");
			
	Иначе
		ОчиститьРеквизитВТабличныхЧастях("Склад", Истина);
	КонецЕсли;

	Если Товары.Количество() + ВозвратнаяТара.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И ПоказыватьВДокументахСчетаУчета Тогда
			
		Ответ = Вопрос("Установить счета бухгалтерского учета в соответствии со значениями по умолчанию?", 
						РежимДиалогаВопрос.ДаНет, 
						, , 
						"Изменения счетов учета");
			
	Иначе
			
		Ответ = КодВозвратаДиалога.Да;
			
	КонецЕсли;
					
					
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы АдресДоставки
//
Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	КонтрагентАдресаДоставки = ?(Грузополучатель.Пустая(), Контрагент, Грузополучатель);
	
	Если НЕ ЗначениеЗаполнено(КонтрагентАдресаДоставки) Тогда
		ВвестиЗначение(КонтрагентАдресаДоставки, "Выберите контрагента");
	КонецЕсли;

	Если ЗначениеЗаполнено(КонтрагентАдресаДоставки) Тогда
		ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;

		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = КонтрагентАдресаДоставки;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;

		СтруктураОтбораАдресов = Новый СписокЗначений;
		СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;

		ВыбАдресДоставки = ФормаВыбора.ОткрытьМодально();

		Если ЗначениеЗаполнено(ВыбАдресДоставки) Тогда
			АдресДоставки = ВыбАдресДоставки;
			стрАдреса=УправлениеКонтактнойИнформацией.ВидАдресаИзПредставленияАдреса(Контрагент,ВыбАдресДоставки);
			ВидАдреса=стрАдреса.Вид;
			БазовыйМаршрут=стрАдреса.Маршрут;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры


// Процедура - обработчик события "Очистка" элемента формы АдресДоставки
//
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)

	АдресДоставки = "";
	ДополнениеКАдресуДоставки = "";

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;

	ФормаВыбора = Справочники.ИнформационныеКарты.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Значение = Перечисления.ТипыИнформационныхКарт.Дисконтная;
	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Использование = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.ВидСравнения = ВидСравнения.Равно;

	ФормаВыбора.Открыть();

КонецПроцедуры // ДисконтнаяКартаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	ПриИзмененииДисконтнойКарты();
КонецПроцедуры // ДисконтнаяКартаПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода Получил
//
Процедура ПолучилНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораИзСпискаПредставительКонтрагента(Элемент, СтандартнаяОбработка, ЭтаФорма, Контрагент);
	
КонецПроцедуры

Процедура ПолучилПоДругомуДокументуПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)
	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	мНоваяСтрока = НоваяСтрока;
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	
	Если НоваяСтрока  Тогда

		СтрокаТабличнойЧасти.Качество = ПолучитьКачествоНоменклатуры(СтрокаТабличнойЧасти.Качество);

		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад    = Склад;
		КонецЕсли;
	КонецЕсли;

	Если НоваяСтрока
	   И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
	   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
	КонецЕсли;

	мКоличествоПредыдущее = СтрокаТабличнойЧасти.Количество;
	мЦенаПредыдущая = СтрокаТабличнойЧасти.Цена;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
		Элемент.ТекущиеДанные.КлючСвязи  = 0;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			// Ввод состава набора
			УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если Не ОтменаРедактирования Тогда
		УстановитьАвтоотметкуСклада();

		ПересчитатьАвтоматическиеСкидки();
		
		мПерерасчетПроизведен = ЛОЖЬ;
	
	КонецЕсли;

КонецПроцедуры //ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПриПолученииДанных" табличной части
// "Товары".
Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьКартинкиВСтрокахТЧ(ОформленияСтрок, мКартинкаСерийныеНомера, мКартинкаНаборКомплект);
	//***170212
    Для Каждого строка из  ОформленияСтрок Цикл
        Если ЗначениеЗаполнено(строка.ДанныеСтроки.ХарактеристикаНоменклатуры) Тогда
            строка.ЦветФона = WebЦвета.СветлоСерый;
        Иначе
            строка.ЦветФона = WebЦвета.Белый;
		КонецЕсли;
    КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ПередУдалениемТовары(Элемент, Отказ);

КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" табличной части
// "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	УстановитьАвтоотметкуСклада();

	ПослеУдаленияТовары(Элемент);

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиТовары.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	РаботаСДиалогами.ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);

КонецПроцедуры // ТоварыПриВыводеСтроки()

Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтруктураВыборСХарактеристикой = Новый Структура("мУказаниеСкладовВТЧ, ПоляДляОбновления, ВладельцыФормы, СтрокаТабличнойЧасти, МетаданныеДокумента"
									, мУказаниеСкладовВТЧ
									, Новый Структура("Склад,ХарактеристикаНоменклатуры,Номенклатура", ЭлементыФормы.Товары.ТекущиеДанные["Склад"])
									, Новый Структура("ЭтаФорма,Элемент", ЭтаФорма,Элемент)
									, СтрокаТабличнойЧасти
									, Метаданные());
	ОбработкаТабличныхЧастей.ОткрытьФормуСправочникаНоменклатурыДляВыбора(СтруктураВыборСХарактеристикой);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

   	Если ЭтотОбъект.Контрагент.ЗапретПродажи=Истина	тогда
 			Предупреждение("Снимите запрет на продажу данному контрагенту!");
	КонецЕсли;
	
	ПриИзмененииНоменклатурыТовары(Элемент);
	//*** 
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;	
	Если ЭтотОбъект.ПрименятьПроцентСкидкиНаВес тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=СтрокаТабличнойЧасти.Номенклатура.Поход;
	Иначе
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=0;
	КонецЕсли;
	СтрокаТабличнойЧасти.СкидкаНаВес=СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.ПроцентСкидкиНаВес/100;
	СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество-СтрокаТабличнойЧасти.СкидкаНаВес;
	//***
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

Процедура ТоварыСкладПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
	
КонецПроцедуры 

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	//*** 
	Если ЭтотОбъект.ПрименятьПроцентСкидкиНаВес тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=СтрокаТабличнойЧасти.Номенклатура.Поход;
	Иначе
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=0;
	КонецЕсли;
	СтрокаТабличнойЧасти.СкидкаНаВес=СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.ПроцентСкидкиНаВес/100;
	СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество-СтрокаТабличнойЧасти.СкидкаНаВес;
	
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
   	Если ЭтотОбъект.Контрагент.ЗапретПродажи=Истина	тогда
 			Предупреждение("Снимите запрет на продажу данному контрагенту!");
			СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;	
			СтрокаТабличнойЧасти.Количество=0;
	КонецЕсли;
	ПриИзмененииКоличестваТовары(Элемент);
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), РассчитыватьАвтоматическиеСкидки(),истина, ,истина,"Товары");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "Товары".
Процедура ТоварыЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "Организация", Организация);
	СтруктураОтбора.Вставить( "Контрагент",  Контрагент);
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "ЗаказПокупателя" ,СтруктураОтбора);		
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "Склад"
// в строке табличной части "Товары".
Процедура ТоварыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры //ТоварыСкладНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Возвратная тара"
//
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
		СтрокаТабличнойЧасти.Склад = Склад;

		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
		   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьАвтоотметкуСклада();
КонецПроцедуры //ВозвратнаяТараПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПослеУдаления(Элемент)
	УстановитьАвтоотметкуСклада();
КонецПроцедуры //ВозвратнаяТараПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ЭтотОбъект, , мВалютаРегламентированногоУчета);
	ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
	СтрокаТабличнойЧасти.Вес=СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Вес;
КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

Процедура ВозвратнаяТараСкладПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);
	СтрокаТабличнойЧасти.Вес=СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Вес;
КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиВозвратнаяТара.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "ВозвратнаяТара".
Процедура ВозвратнаяТараЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "Организация", Организация);
	СтруктураОтбора.Вставить( "Контрагент",  Контрагент);
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "ЗаказПокупателя" ,СтруктураОтбора);		

КонецПроцедуры

Процедура ВозвратнаяТараСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура вызывается при выборе пункта меню "Заполнить по заказу поставщику" кнопки "Заполнить"
// командной панели табличного поля "Услуги",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельУслугиДействиеЗаполнитьПоЗаказуПокупателя(Кнопка)

	ЗаполнитьТабличнуюЧасть(Услуги);

КонецПроцедуры  // КоманднаяПанельУслугиДействиеЗаполнитьПоЗаказуПокупателя

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Услуги".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельУслугиДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары = Ложь;
			Форма.ПоказыватьУслуги = Истина;
			Форма.ПоказыватьТару   = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары   = Ложь;
			Форма.ФлажокУслуги   = Истина;
			Форма.ФлажокТара     = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатура
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

	// Заполнение цены зависит от розничности операции.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);

КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура УслугиПроцентРучнойСкидкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентРозничнойНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,истина, ,истина,"Услуги");
	
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры// УслугиСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиСтавкаНДСПриИзменении()

Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	Если НоваяСтрока
	   И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
	   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
	КонецЕсли;
	
	// Обнулим флаг при изменении табличной части
	мПерерасчетПроизведен = ЛОЖЬ;

КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" ТЧ "Услуги".
//
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если Не ОтменаРедактирования Тогда
		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;

КонецПроцедуры // УслугиПриОкончанииРедактирования()

Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ЭлементыФормы.Услуги.Колонки.Всего.Видимость Тогда

		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));

	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "Услуги".
Процедура УслугиЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "Организация", Организация);
	СтруктураОтбора.Вставить( "Контрагент",  Контрагент);
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "ЗаказПокупателя" ,СтруктураОтбора);		
	
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" ТЧ "Услуги".
//
Процедура УслугиПослеУдаления(Элемент)

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // УслугиПослеУдаления()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		УправлениеКонтактами.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары");
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		УправлениеКонтактами.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары", ЭтотОбъект, ЭтаФорма);

		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Услуги".
//
Процедура УслугиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Услуги");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // УслугиПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Услуги".
//
Процедура УслугиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // УслугиПеретаскивание()

// Процедура - обработчик события "ОбработкаВыбора" элемента формы СчетУчетаРасчетовПоАвансам
//
Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры		

// Процедура - обработчик события "ОбработкаВыбора" элемента формы СчетУчетаРасчетовПоТаре
//
Процедура СчетУчетаРасчетовПоТареОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" элемента формы СчетУчетаРасчетовПоТареПоАвансам
//
Процедура СчетУчетаРасчетовПоТареПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" элемента формы СчетУчетаРасчетовСКонтрагентом
//
Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура СчетУчетаНДСПодтвержденныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = РаботаСДиалогами.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЧ ДокументыРасчетовСКонтрагентом

Процедура РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные)

	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.РассчитатьПогашаемыеСуммыПоДокументуРасчетов(ДокументОбъект, ТекДанные, мСтруктураПараметровВзаиморасчетов);

КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные.Сделка,
								СтандартнаяОбработка, "ЗаказПокупателя");
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомСделкаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные);
	
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента,
													Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	УправлениеВзаиморасчетами.ОпределитьДатуОплатыДокументаРасчетовСКонтрагентом(ТекДанные);
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные);
	
КонецПроцедуры
 
Процедура КоманднаяПанельДокументыРасчетовСКонтрагентомЗаполнитьТолькоПоЗаказу(Кнопка)
	
	УправлениеВзаиморасчетами.ЗаполнитьПредоплату(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомПриИзмененииФлажка(Элемент, Колонка)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные);
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомСтавкаНДСПриИзменении(Элемент)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные);
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомСуммаПриИзменении(Элемент)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	ТекДанные.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекДанные.Сумма,  
		                                             ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
		                                             ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
		                                             ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);	
	
КонецПроцедуры

Процедура ДокументыРасчетовСКонтрагентомПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	Если НЕ УчитыватьНДС Тогда
		ТекДанные.СтавкаНДС = перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;	
КонецПроцедуры


// Процедура вызывается при нажатии кнопки "СоставНабора" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСоставНабора(Кнопка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
		Предупреждение("Номенклатура не является набором-комплектом!");
		Возврат;
	КонецЕсли;

	мТекущаяСтрокаНабор = СтрокаТабличнойЧасти;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура",      СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("Количество",        СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",  СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект",    ЭтотОбъект);
	СтруктураПараметров.Вставить("ФормаДокумента",    ЭтаФорма);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", "Товары");
	СтруктураПараметров.Вставить("КлючСтроки",        СтрокаТабличнойЧасти.КлючСтроки);
	СтруктураПараметров.Вставить("ТолькоПросмотр",    Не СтрокаТабличнойЧасти.Номенклатура.Комплект);
	СтруктураПараметров.Вставить("ЗаголовокФормы",    "Состав набора-комплекта");

	СтруктураПараметров.Вставить("ЕстьНалогНаПрибыль",мТекущаяСхемаНалогообложения.НалогНаПрибыль);
	
	// Открываем форму "Состав набора".
	мФормаСоставНабора = Обработки.СоставНабора.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	мФормаСоставНабора.СтруктураИсходныхПараметров = СтруктураПараметров;
	мФормаСоставНабора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Грузополучатель"
//
Процедура ГрузополучательПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(АдресДоставки) Тогда
		АдресДоставки = ЗаполнениеДокументов.ПолучитьАдресДоставкиСтрокой(Грузополучатель, ДополнениеКАдресуДоставки);
	КонецЕсли;

КонецПроцедуры // ГрузополучательПриИзменении()

// Процедура вызывается при нажатии кнопки "ВыгрузитьВФорматеCommerceMLФайлПанель"
// подменю "ВыгрузитьВФорматеCommerceMLПанель" командной панели формы
//
Процедура ДействияФормыВыгрузитьВФорматеCommerceMLФайлПанель(Кнопка)

	ЗаполнениеДокументов.ВыгрузитьДокументВФайлCommerceML(Ссылка);
    	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ВыгрузитьВФорматеCommerceMLЭлПочтаПанель"
// подменю "ВыгрузитьВФорматеCommerceMLПанель" командной панели формы
//
Процедура ДействияФормыВыгрузитьВФорматеCommerceMLЭлПочтаПанель(Кнопка)

	ЗаполнениеДокументов.ОтправитьДокументПоПочтеCommerceML(Ссылка);

КонецПроцедуры

// Обработчик события "Нажатие" кнопки "ОткрытьФормуНастройкиАдресногоСклада" в подменю "Действия".
//
Процедура ДействияФормыОткрытьФормуНастройкиБланкаТоварногоНаполнения(Кнопка)

	РаботаСДиалогами.ОткрытьФормуНастройкиБланкаТоварногоНаполнения(ЭтотОбъект);

КонецПроцедуры // ДействияФормыОткрытьФормуНастройкиАдресногоСклада()

// Обработчик события "Нажатие" кнопки "ОткрытьФормуНастройкиОформленияПакетаДокументов" в подменю "Действия".
//
Процедура ДействияФормыОткрытьФормуНастройкиОформленияПакетаДокументов(Кнопка)

	ФормаФормированияПакетаДокументов = ПолучитьФорму("ФормаФормированияПакетаДокументов", ЭтаФорма, ЭтаФорма);
	ФормаФормированияПакетаДокументов.Реализация = ЭтотОбъект;
	ФормаФормированияПакетаДокументов.мПоказыватьФормуПринудительно = Истина;
	ФормаФормированияПакетаДокументов.Открыть();

КонецПроцедуры // ДействияФормыОткрытьФормуНастройкиОформленияПакетаДокументов()

// Обработчик события "Нажатие" кнопки "ОформитьДокументы" в верхней командной панели.
//
Процедура ДействияФормыОформитьДокументы(Кнопка)
	
	ФормаФормированияПакетаДокументов = ПолучитьФорму("ФормаФормированияПакетаДокументов", ЭтаФорма, ЭтаФорма);
	ФормаФормированияПакетаДокументов.Реализация = ЭтотОбъект;
	ФормаФормированияПакетаДокументов.Открыть();

КонецПроцедуры // ДействияФормыОформитьДокументы()

// Заменяет значение реквизита в табличных частях "Товары", "Услуги", "Возвратная тара".
//
Процедура ЗаменитьЗначениеРеквизитаВТабличныхЧастях(ИмяРеквизита, СтароеЗначение, НовоеЗначение, КромеУслуг = Ложь)
	
	// Заменим значения в строках
	Для Каждого Строка Из Товары Цикл
		Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
			Строка[ИмяРеквизита] = НовоеЗначение;
		КонецЕсли;
	КонецЦикла;

	Для Каждого Строка Из ВозвратнаяТара Цикл
		Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
			Строка[ИмяРеквизита] = НовоеЗначение;
		КонецЕсли;
	КонецЦикла;

	Если НЕ КромеУслуг Тогда
		Для Каждого Строка Из Услуги Цикл
			Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
				Строка[ИмяРеквизита] = НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается для обработки программного изменения строки.
//
// Параметры
//  СтрокаТабличнойЧасти - строка ТЧ "Товары", изменение которой нужно обработать.
//  ИзмененнаяКолонка - название колонки, обработчик изменения которой необходимо вызвать.
//
Процедура ИзменениеСтрокиПрограммное(СтрокаТабличнойЧасти, ИзмененнаяКолонка) Экспорт

	ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;

	Если ИзмененнаяКолонка = "Номенклатура" Тогда
		ПриИзмененииНоменклатурыТовары(ЭлементыФормы.Товары);
	ИначеЕсли ИзмененнаяКолонка = "Количество" Тогда
		ПриИзмененииКоличестваТовары(ЭлементыФормы.Товары);
	КонецЕсли;

КонецПроцедуры // ИзменениеСтрокиПрограммное()

// Изменяет значение реквизита "Заказ покупателя" в табличных частях при изменении "Сделки".
//
Процедура ИзменитьЗаказВТабличнойЧасти()
	
	// Если табличные части пустые - выходим
	Если (Товары.Количество() + Услуги.Количество() + ВозвратнаяТара.Количество()) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если колонка заказ недоступна - очистим заказ в табличных частях и выходим
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ДокументОбъект.ВидОперации, ДокументОбъект.ДоговорКонтрагента);
	
	Если НЕ ЕстьКолонкаЗаказ Тогда
		ОчиститьРеквизитВТабличныхЧастях("ЗаказПокупателя");
		Возврат;
	КонецЕсли;

	// Если не "пустое значение" и не "заказ покупателя" - значение неподходит, выходим
	Если ЗначениеЗаполнено(Сделка) И НЕ ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	// Если не "пустое значение" и не "заказ покупателя" - значение неподходит, выходим
	Если ЗначениеЗаполнено(мСтароеЗначениеСделки) И НЕ ТипЗнч(мСтароеЗначениеСделки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	// Если оба значения пустые - менять нечего, выходим
	Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСделки) И НЕ ЗначениеЗаполнено(Сделка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Сделка <> мСтароеЗначениеСделки Тогда // Изменен заказ в шапке
		
		// Получим список заказов из табличных частей документа
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(Товары, "ЗаказПокупателя");
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(Услуги, "ЗаказПокупателя", СписокЗаказов);
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(ВозвратнаяТара, "ЗаказПокупателя", СписокЗаказов);
		
		// Приведем тип пустого значения к типу пустого значения в строках ТЧ для поиска
		Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСделки) Тогда
			мСтароеЗначениеСделки = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		
		Если СписокЗаказов.Количество() = 0 И ЗначениеЗаполнено(Сделка) Тогда
			// Все поля пустые, можно заполнить выбранным значением
			мСтароеЗначениеСделки = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			ТекстВопроса = "Заполнить значение заказа в табличных частях?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение заказа");
			// Очистим значения в строках
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗаменитьЗначениеРеквизитаВТабличныхЧастях("ЗаказПокупателя", мСтароеЗначениеСделки, Сделка);
			КонецЕсли;
			
		ИначеЕсли НЕ СписокЗаказов.НайтиПоЗначению(мСтароеЗначениеСделки) = Неопределено Тогда
			// В табличных частях есть строки со старым значением сделки
			
			Если НЕ ЗначениеЗаполнено(Сделка) Тогда
				ТекстВопроса = "Очистить значение заказа в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Пустое значение заказа");
				// Очистим значения в строках
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ОчиститьРеквизитВТабличныхЧастях("ЗаказПокупателя");
				КонецЕсли;
			Иначе
				ТекстВопроса = "Заменить значение заказа в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение заказа");
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ЗаменитьЗначениеРеквизитаВТабличныхЧастях("ЗаказПокупателя", мСтароеЗначениеСделки, Сделка);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		мСтароеЗначениеСделки = Сделка;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗаказВТабличнойЧасти()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
//ЗАМЕНА РЕЗОНАНС
// ИСХОДНЫЙ ТЕКСТ
		//ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
// НОВЫЙ ТЕКСТ
		Если Р_РежимТалоны Тогда
			Р_ДобавитьСтрокуПакетаТалоновПоШК(Результат);
		Иначе
			ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
		КонецЕсли
//КОНЕЦ ЗАМЕНЫ
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

// Процедура - обработчик события "ПриНажатии" пункта меню "ШтрихКоды"
// "КоманднаяПанельТовары"
//
// Параметры
//  Кнопка – <КнопкаКоманднойПанели> 
//         – кнопка "ШтрихКоды"
//
Процедура КоманднаяПанельТоварыШтрихКоды(Кнопка)

	РаботаСДиалогами.ОткрытьФормуПроверкиШтрихкодов(ЭтаФорма, ЭтотОбъект, мПараметрыСвязиСтрокТЧ);

КонецПроцедуры // КоманднаяПанельТоварыШтрихКоды()

// <Процедура ОбработчикИзмененияДанных обслуживает подключенные обработчики изменения данных>
//
// Параметры
//  <ИмяЭлемента>  – <Строка> – <Путь к данным>
//
Процедура ОбработчикИзмененияДанных(ИмяЭлемента)

	Если ИмяЭлемента = "ДокументОбъект.ОтражатьВУправленческомУчете" ИЛИ ИмяЭлемента = "ДокументОбъект.ВидПередачи" Тогда
		мФормаОформитьДокументы = ПолучитьФорму("ФормаФормированияПакетаДокументов", ЭтаФорма, ЭтаФорма);
		Если НЕ мФормаОформитьДокументы.мОткрыта = Неопределено Тогда
			мФормаОформитьДокументы.УстановитьДоступность();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработчикИзмененияДанных()

// Процедура - обработчик события "ПриСменеСтраницы" основной панели.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "АвтоматическиеСкидки" Тогда
		ТаблицаАвтоСкидок.Очистить();

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Товары, ТаблицаАвтоСкидок);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Услуги, ТаблицаАвтоСкидок);

		КоличествоСтрок = ТаблицаАвтоСкидок.Количество() - 1;
		Для Тмп = 0 По КоличествоСтрок Цикл
			ТекСтрока = ТаблицаАвтоСкидок[КоличествоСтрок - Тмп];

			Если ТекСтрока.ПроцентАвтоматическихСкидок = 0 Тогда
				ТаблицаАвтоСкидок.Удалить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Очищает значение реквизита в табличных частях "Товары", "Услуги", "Возвратная тара".
//
Процедура ОчиститьРеквизитВТабличныхЧастях(ИмяРеквизита, КромеУслуг = Ложь)
	
	// Очистим значения в строках
	Для Каждого Строка Из Товары Цикл
		Строка[ИмяРеквизита] = Неопределено;
	КонецЦикла;

	Для Каждого Строка Из ВозвратнаяТара Цикл
		Строка[ИмяРеквизита] = Неопределено;
	КонецЦикла;

	Если НЕ КромеУслуг Тогда
		Для Каждого Строка Из Услуги Цикл
			Строка[ИмяРеквизита] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//При проведении документа проверим возможность получения бонусов.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Проведен Тогда
		ТолькоСерые = Неопределено;
		
		Если Ценообразование.ЕстьСпецПредложения("Товары", ЭтотОбъект, ТолькоСерые, Перечисления.ВидыСкидок.Оптовая) Тогда
			Если Не(ТолькоСерые И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "НеПредлагатьНеполныеСпецПредложения")) Тогда
				Ответ = Вопрос("В документе можно составить спец. предложения." + Символы.ПС + "Открыть форму подбора спец. предложений?", РежимДиалогаВопрос.ДаНет);
				
				Если Ответ = КодВозвратаДиалога.Да Тогда
					Ценообразование.РассчитатьНатуральныеСкидки("Товары", ЭтотОбъект, ЭтаФорма, Перечисления.ВидыСкидок.Оптовая);
					
					// Если пользователь отказался от выбора спец. предложения - вернемся к редактированию документа.
					Если Ценообразование.ЕстьСпецПредложения("Товары", ЭтотОбъект, ТолькоСерые, Перечисления.ВидыСкидок.Оптовая) Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура выполняет необходимые действия перед удалением строки ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//  Отказ - флаг отказа.
//
Процедура ПередУдалениемТовары(Элемент, Отказ)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если Элемент.ТекущиеДанные = мТекущаяСтрокаНабор И мФормаСоставНабора.Открыта() Тогда
		мФормаСоставНабора.Закрыть();
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.КлючСвязи <> 0 Тогда
		Поиск = Новый Структура();
		Поиск.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		Строки = СерийныеНомера.НайтиСтроки(Поиск);
		Для Каждого СерийныйНомер Из Строки Цикл
			СерийныеНомера.Удалить(СерийныйНомер);
		КонецЦикла;
	КонецЕсли;

	УправлениеЗапасами.ОчиститьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПередУдалениемТовары()

// Процедура выполняет необходимые действия после удаления строки ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПослеУдаленияТовары(Элемент)

	УстановитьАвтоотметкуСклада();

	ПересчитатьАвтоматическиеСкидки();

	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;

КонецПроцедуры // ПослеУдаленияТовары()

// Процедура выполняет необходимые действия при изменении количества в ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПриИзмененииКоличестваТовары(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	//*** 
	Если ЭтотОбъект.ПрименятьПроцентСкидкиНаВес тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=СтрокаТабличнойЧасти.Номенклатура.Поход;
	Иначе
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес=0;
	КонецЕсли;
	СтрокаТабличнойЧасти.СкидкаНаВес=СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.ПроцентСкидкиНаВес/100;
	СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество-СтрокаТабличнойЧасти.СкидкаНаВес;
	//***
	
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииКоличестваТовары()

// Процедура выполняет необходимые действия при изменении контрагента.
//
Процедура ПриИзмененииКонтрагента()

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // ПриИзмененииКонтрагента()

// Процедура выполняет необходимые действия при изменении номенклатуры в ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПриИзмененииНоменклатурыТовары(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
	
	// Ввод состава набора
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииНоменклатурыТовары()

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура вызывается для обработки программного удалениия строки.
//
// Параметры
//  СтрокаТабличнойЧасти - строка ТЧ "Товары", которую нужно удалить.
//
Процедура УдалениеСтрокиПрограммное(СтрокаТабличнойЧасти) Экспорт

	ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;

	ПередУдалениемТовары(ЭлементыФормы.Товары, Ложь);

	Товары.Удалить(СтрокаТабличнойЧасти);

	ПослеУдаленияТовары(ЭлементыФормы.Товары);

КонецПроцедуры // УдалениеСтрокиПрограммное()

Процедура ТоварыНалоговоеНазначениеДоходовИЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура ТоварыНалоговоеНазначениеДоходовИЗатратАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура ТоварыНалоговоеНазначениеДоходовИЗатратОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеДоходовИЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеДоходовИЗатратАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеДоходовИЗатратОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
КонецПроцедуры

Процедура ТоварыНалоговоеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ТоварыНалоговоеНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ТоварыНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС)
КонецПроцедуры

Процедура УслугиНалоговоеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура УслугиНалоговоеНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура УслугиНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС)
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС);
КонецПроцедуры

Процедура ВозвратнаяТараНалоговоеНазначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС)
КонецПроцедуры

Процедура УслугиНалоговоеНазначениеДоходовИЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияНалоговоеНазначение(Элемент, СтандартнаяОбработка,Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура УслугиНалоговоеНазначениеДоходовИЗатратАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.АвтоПодборТекстаНалоговоеНазначение(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат);
КонецПроцедуры

Процедура УслугиНалоговоеНазначениеДоходовИЗатратОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ОкончаниеВводаТекстаНалоговоеНазначение(Элемент, Текст, Значение, СтандартнаяОбработка, Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
КонецПроцедуры

Процедура ЕстьАвансДо01042011ПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	Если НЕ ЕстьАвансДо01042011 Тогда
		
		СуммаВДВРПоАвансуДо01042011 = 0;	
		НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НеОтноситьСебестоимостьЗапасовНаРасходыПоНУПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

//ВСТАВКА РЕЗОНАНС

//Поиск номенклатуры по структуре талона. 
//            Определим Номенклатуру талона по Набоку параметров
//            ОфисКодГСМ+НоминалТалона (согласно структуры отсканированнного талона)
Функция Р_ПоискНоменклатурыПоСтруктуреТалона(ПараметрыТалона)
	//Для поиска соответствия используем свойства объектов 
	СтруктураПоиска = Новый Структура("СтруктураТалонов, ГСМ, НоминалГСМ", ПараметрыТалона.Структура, ПараметрыТалона.ГСМ, ПараметрыТалона.Номинал);
	СтруктураЗначений = РегистрыСведений.Р_ТалоныТоварСтруктура.Получить(СтруктураПоиска);
	Возврат СтруктураЗначений.Номенклатура;
КонецФункции

//Сравнить ШтрихКоды на совпадение 
//            для определения принадлежности к пакету
//            отсканированных талонов (первый или последний талон пакета)
Функция СравнитьШтрихКоды(ПараметрыШК1 = "",ПараметрыШК2= "")
	//Даное условие срабатывает, если вводят код рука
	Если ПараметрыШК1 = "" или ПараметрыШК2 = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПараметрыШК1.ГСМ <> ПараметрыШК2.ГСМ  или
		 ПараметрыШК1.Номинал <> ПараметрыШК2.Номинал  Тогда
		 Сообщить("Отсканированный код не соответствует структуре ранее заполненного кода текущей строки");
		Возврат ложь;
	КонецЕсли;
	//Если структура соответствует 
	//Проверим на корректность последовательности введенных номеров
	Если ПараметрыШК1.УникальныйНомер>ПараметрыШК2.УникальныйНомер Тогда
		Сообщить("Не последовательное сканирование талонов в пакете");
		Возврат ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

//Добавить строку пакета талонов по ШК
//           Основная функция.
//           Обработка отсканированного Штрих кода талона
Функция Р_ДобавитьСтрокуПакетаТалоновПоШК(КодТалона,РедактированиеСтроки = Ложь)
	
	СтруктураТалона = Р_РаботаСТалонами.ПолучитьСтруктуруТалонаПоКоду(КодТалона);
	Если СтруктураТалона = Неопределено Тогда
		Сообщить("Нет соответствующей структуры для отсканированных талонов!");	
		Возврат Ложь; //Ошибка
	КонецЕсли;
	
	//Определим Набор параметров отсканированного талона
	ПараметрыНовыйТалон = Р_РаботаСТалонами.ПолучитьПараметрыТалона(КодТалона);
	
	// Варинат: Табличная часть не пустая
	Если Товары.Количество() <> 0 Тогда
		
		//Поиск на совпадение кода 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаДокумента.НомерСтроки,
		               |	ТаблицаДокумента.Р_ШтрихКодНачалоПакета,
		               |	ТаблицаДокумента.Р_ШтрихКодКонецПакета
		               |ПОМЕСТИТЬ ВТ_ТаблицаДокумента
		               |ИЗ
		               |	&ТаблицаДокумента КАК ТаблицаДокумента
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ТаблицаДокумента.НомерСтроки
		               |ИЗ
		               |	ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента
		               |ГДЕ
		               |	(ВТ_ТаблицаДокумента.Р_ШтрихКодНачалоПакета ПОДОБНО &КодТалона
		               |			ИЛИ ВТ_ТаблицаДокумента.Р_ШтрихКодКонецПакета ПОДОБНО &КодТалона)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ТаблицаДокумента.Р_ШтрихКодНачалоПакета КАК НачалоПакета,
		               |	ВТ_ТаблицаДокумента.Р_ШтрихКодКонецПакета КАК КонецПакета,
		               |	ВТ_ТаблицаДокумента.НомерСтроки КАК НомерСтроки
		               |ИЗ
		               |	ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента
		               |ГДЕ
		               |	ВТ_ТаблицаДокумента.Р_ШтрихКодНачалоПакета ПОДОБНО &Префикс
		               |	И ВТ_ТаблицаДокумента.Р_ШтрихКодКонецПакета ПОДОБНО &Префикс
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтроки";
		
		Запрос.УстановитьПараметр("ТаблицаДокумента",Товары.Выгрузить(,"НомерСтроки,Р_ШтрихКодНачалоПакета,Р_ШтрихКодКонецПакета"));
		Запрос.УстановитьПараметр("КодТалона",КодТалона+"%");
		Запрос.УстановитьПараметр("Префикс",СтруктураТалона.ПрефиксТалона+"%");
		
		
	    МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ВыборкаПозиция  = МассивРезультатов[1].Выбрать();
		Если ВыборкаПозиция.Следующий() Тогда
			Сообщить("Дублирование Штрих кода Талона по строке "+ВыборкаПозиция.НомерСтроки,СтатусСообщения.Внимание);
			Если НЕ РедактированиеСтроки Тогда
				ЭлементыФормы.Товары.ТекущаяСтрока = Товары[ВыборкаПозиция.НомерСтроки-1];
				Возврат Истина; //позиционирование на найденной строке
			Иначе
				Возврат Ложь; //позиционирование на найденной строке
			КонецЕсли;
		КонецЕсли;
		
		//Строка для определения длины начала уникального номера 		
		ВыборкаВходжение = МассивРезультатов[2].Выбрать();
		Пока ВыборкаВходжение.Следующий() Цикл
			ПараметрыШК1 = Р_РаботаСТалонами.ПолучитьПараметрыТалона(ВыборкаВходжение.НачалоПакета);
			ПараметрыШК2 = Р_РаботаСТалонами.ПолучитьПараметрыТалона(ВыборкаВходжение.КонецПакета);
			
			Если ПараметрыНовыйТалон.ГСМ = ПараметрыШК1.ГСМ и ПараметрыНовыйТалон.ГСМ = ПараметрыШК2.ГСМ и 
				ПараметрыНовыйТалон.Номинал = ПараметрыШК1.Номинал и ПараметрыНовыйТалон.Номинал = ПараметрыШК2.Номинал Тогда
				Если ПараметрыНовыйТалон.УникальныйНомер>ПараметрыШК1.УникальныйНомер и
					ПараметрыНовыйТалон.УникальныйНомер<ПараметрыШК2.УникальныйНомер Тогда
					Сообщить("Есть вхождение штрих кода в ранее записанный пакет");
					
					Если НЕ РедактированиеСтроки Тогда
						ЭлементыФормы.Товары.ТекущаяСтрока = Товары[ВыборкаВходжение.НомерСтроки-1];
						Возврат Истина;
					Иначе
						Возврат Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//Совпадение не найдено: анализируем наличие строк в табличной части или текущую строку, на которой спозиционирован курсор
	
	ТекущиеДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	ДобавимНовуюСтроку = Ложь;
	
	Если ТекущиеДанные = Неопределено Тогда
		ДобавимНовуюСтроку = Истина;
	Иначе
		//4.Вариант: есть активная строка, тогда необходимо выполнить ряд проверок 
		СтрокаТалонов = Товары[ТекущиеДанные.НомерСтроки-1];
		Если НЕ ПустаяСтрока(СокрЛП(СтрокаТалонов.Р_ШтрихКодНачалоПакета)) И НЕ ПустаяСтрока(СокрЛП(СтрокаТалонов.Р_ШтрихКодКонецПакета))  Тогда	
			ДобавимНовуюСтроку = Истина;
		КонецЕсли;
	КонецЕсли;  
	
	//Добавляем Строку
	Если ДобавимНовуюСтроку  и НЕ РедактированиеСтроки Тогда
		//Варинат: Табличная часть пустая, тогда отсканированный код, это начало первого пакета
		//Вариант: когда нет соответствия талонов и нет активной строки 
		//Вариант: когда есть заполненные данные по ШК 1 и ШК2, добавляем новую строку
		СтрокаТалонов = Товары.Добавить();
		СтрокаТалонов.Р_ШтрихКодНачалоПакета = КодТалона;
		СтрокаТалонов.Номенклатура =  Р_ПоискНоменклатурыПоСтруктуреТалона(ПараметрыНовыйТалон);
		СтрокаТалонов.Количество   = 1;
	
		ЭлементыФормы.Товары.ТекущаяСтрока = Товары[Товары.Количество()-1];
		ПриИзмененииНоменклатурыТовары(СтрокаТалонов.Номенклатура);
		Возврат Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(СтрокаТалонов.Р_ШтрихКодНачалоПакета)) и 
		 ПустаяСтрока(СокрЛП(СтрокаТалонов.Р_ШтрихКодКонецПакета)) Тогда
		
		СтрокаТалонов.Р_ШтрихКодНачалоПакета = КодТалона;
		СтрокаТалонов.Номенклатура = Р_ПоискНоменклатурыПоСтруктуреТалона(ПараметрыНовыйТалон);
		СтрокаТалонов.Количество   = 1;
		
		ЭлементыФормы.Товары.ТекущаяСтрока = Товары[Товары.Количество()-1];
		ПриИзмененииНоменклатурыТовары(СтрокаТалонов.Номенклатура);
		Возврат Истина;
	Иначе
		//Проверка на соответствие структур
		СоответствиеШК = ложь;
		
		//Проверим структуры Штрихкодов
		Если ПустаяСтрока(СокрЛП(СтрокаТалонов.Р_ШтрихКодНачалоПакета)) И Не ПустаяСтрока(СокрЛП(СтрокаТалонов.Р_ШтрихКодКонецПакета))  Тогда 
			
			ПараметрыШК2   = Р_РаботаСТалонами.ПолучитьПараметрыТалона(СокрЛП(СтрокаТалонов.Р_ШтрихКодКонецПакета));
			СоответствиеШК = СравнитьШтрихКоды(ПараметрыНовыйТалон,ПараметрыШК2);
			Если СоответствиеШК Тогда
				СтрокаТалонов.Р_ШтрихКодНачалоПакета = КодТалона;
				СтрокаТалонов.Количество  = (ПараметрыШК2.УникальныйНомер - ПараметрыНовыйТалон.УникальныйНомер)+1;
			КонецЕсли;
			
		ИначеЕсли не ПустаяСтрока(СокрЛП(СтрокаТалонов.Р_ШтрихКодНачалоПакета)) И  ПустаяСтрока(СокрЛП(СтрокаТалонов.Р_ШтрихКодКонецПакета))  Тогда
			
			ПараметрыШК1   = Р_РаботаСТалонами.ПолучитьПараметрыТалона(СокрЛП(СтрокаТалонов.Р_ШтрихКодНачалоПакета));
			СоответствиеШК = СравнитьШтрихКоды(ПараметрыШК1,ПараметрыНовыйТалон);
			Если СоответствиеШК Тогда
				СтрокаТалонов.Р_ШтрихКодКонецПакета = КодТалона;
				СтрокаТалонов.Количество  = (ПараметрыНовыйТалон.УникальныйНомер - ПараметрыШК1.УникальныйНомер)+1;
			КонецЕсли;
			
		ИначеЕсли не ПустаяСтрока(СокрЛП(СтрокаТалонов.Р_ШтрихКодНачалоПакета)) И  не ПустаяСтрока(СокрЛП(СтрокаТалонов.Р_ШтрихКодКонецПакета))  Тогда	 
			//Сравним два ШтриххКода, 
			//данный вариант будеи использоваться если заполняется стровка Штрихкодов руками
			ПараметрыШК1   = Р_РаботаСТалонами.ПолучитьПараметрыТалона(СокрЛП(СтрокаТалонов.Р_ШтрихКодНачалоПакета));
			ПараметрыШК2   = Р_РаботаСТалонами.ПолучитьПараметрыТалона(СокрЛП(СтрокаТалонов.Р_ШтрихКодНачалоПакета));
			СоответствиеШК = СравнитьШтрихКоды(ПараметрыШК1,ПараметрыШК1);
			Если СоответствиеШК Тогда
			    	 СтрокаТалонов.Р_ШтрихКодКонецПакета = КодТалона;
			 КонецЕсли;
		 КонецЕсли;
		   
		Возврат СоответствиеШК;
		
	КонецЕсли;
	
КонецФункции	//Р_ДобавитьСтрокуПакетаТалоновПоШК

Процедура Р_ТоварыПередНачаломИзменения(Элемент, Отказ) Экспорт
	 ТекущиеДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	 Р_СтарыйШтрихКодНачало = ТекущиеДанные.Р_ШтрихКодНачалоПакета;
	 Р_СтарыйШтрихКодКонец  = ТекущиеДанные.Р_ШтрихКодКонецПакета;
КонецПроцедуры

Функция Р_ОбработатьИнтерактивноеИсправлчниеШтрихКода(СтрокаТабличнойЧасти,ИмяРеквизита,НовыйШтрихКод) 
	
	НовыйШтрихКодНачало = СтрокаТабличнойЧасти.Р_ШтрихКодНачалоПакета;
	НовыйШтрихКодКонец  = СтрокаТабличнойЧасти.Р_ШтрихКодКонецПакета;
	
	СтрокаТабличнойЧасти[ИмяРеквизита]= "";
	
	Если НЕ Р_ДобавитьСтрокуПакетаТалоновПоШК(НовыйШтрихКод, Истина) Тогда
		СтрокаТабличнойЧасти.Р_ШтрихКодНачалоПакета = Р_СтарыйШтрихКодНачало;
		СтрокаТабличнойЧасти.Р_ШтрихКодКонецПакета  = Р_СтарыйШтрихКодКонец;
	Иначе
		СтрокаТабличнойЧасти.Р_ШтрихКодНачалоПакета = НовыйШтрихКодНачало;
		СтрокаТабличнойЧасти.Р_ШтрихКодКонецПакета  = НовыйШтрихКодКонец;
	КонецЕсли;
	
КонецФункции

Процедура Р_ШтрихКодНачалоПакетаПриИзменении(Элемент) Экспорт
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	НовыйШтрихКод = СтрокаТабличнойЧасти.Р_ШтрихКодНачалоПакета;
	Р_ОбработатьИнтерактивноеИсправлчниеШтрихКода(СтрокаТабличнойЧасти,"Р_ШтрихКодНачалоПакета",НовыйШтрихКод);
КонецПроцедуры

Процедура Р_ШтрихКодКонецПакетаПриИзменении(Элемент) Экспорт
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	НовыйШтрихКод = СтрокаТабличнойЧасти.Р_ШтрихКодКонецПакета;
	Р_ОбработатьИнтерактивноеИсправлчниеШтрихКода(СтрокаТабличнойЧасти,"Р_ШтрихКодКонецПакета",НовыйШтрихКод);
КонецПроцедуры

Процедура Р_ДобавитьПоказатьРеквизитыРаботыСТалонми()
	
	//На форму документа добавим надпись для отражения Режима работы ддокумента  для продажи талонов
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Флаг_ПродажаТалонов = ЭлементыФормы.Добавить(Тип("Надпись"),"Р_РежимТалоны",Истина);
	Флаг_ПродажаТалонов.Имя    = "Р_РежимТалоны";
	Флаг_ПродажаТалонов.Данные = "Р_РежимТалоны";
	Флаг_ПродажаТалонов.Заголовок = ?(Р_РежимТалоны, ?(Р_ВозвратХранения, "Талоны ГСМ (обмен)", "Талоны ГСМ"), "");
	Флаг_ПродажаТалонов.Подсказка = "Работа с документом в режиме продажи талонов";
	Флаг_ПродажаТалонов.Верх = 391;
	Флаг_ПродажаТалонов.Лево = 8;
	Флаг_ПродажаТалонов.Высота = 17;
	Флаг_ПродажаТалонов.Ширина = 90;
	Флаг_ПродажаТалонов.Доступность = Истина;
	Флаг_ПродажаТалонов.АвтоКонтекстноеМеню = Истина;
	Флаг_ПродажаТалонов.АктивизироватьПоУмолчанию = Ложь;
	Флаг_ПродажаТалонов.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Флаг_ПродажаТалонов.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Флаг_ПродажаТалонов.Видимость      = Истина;
	Флаг_ПродажаТалонов.ИзменяетДанные = Ложь;
	Флаг_ПродажаТалонов.ПервыйВГруппе  = Ложь;
	Флаг_ПродажаТалонов.ПорядокОтображения = 8;
	Флаг_ПродажаТалонов.ПрозрачныйФон      = Ложь;
	Флаг_ПродажаТалонов.ПропускатьПриВводе = Ложь;
	Флаг_ПродажаТалонов.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Низ);
	Флаг_ПродажаТалонов.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Низ);
	Флаг_ПродажаТалонов.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	Флаг_ПродажаТалонов.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭтаФорма.Панель, ГраницаЭлементаУправления.Лево);
	Флаг_ПродажаТалонов.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
	Флаг_ПродажаТалонов.Шрифт = Новый Шрифт(Флаг_ПродажаТалонов.Шрифт, , , Истина, , Истина);

	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//На форму документа добавим Позиции для отражения Штрих кодов
	//Добавить "Штрих Код начала пакета", "Штрих Код конца пакета"
	К_ШтрихКодНачало = ЭлементыФормы.Товары.Колонки.Добавить("Р_ШтрихКодНачалоПакета","Штрих код начало пакета");
	К_ШтрихКодНачало.Видимость = Истина;
	К_ШтрихКодНачало.Доступность = Истина;
	К_ШтрихКодНачало.ИзменятьПозицию = Истина;
	К_ШтрихКодНачало.Имя = "Р_ШтрихКодНачалоПакета";
	К_ШтрихКодНачало.Положение = ПоложениеКолонки.НоваяКолонка;
	К_ШтрихКодНачало.Ширина = 20;
	К_ШтрихКодНачало.Данные = "Р_ШтрихКодНачалоПакета";
	К_ШтрихКодНачало.УстановитьЭлементУправления(Тип("ПолеВвода"));
 	К_ШтрихКодНачало.ЭлементУправления.АвтоВыборНезаполненного	 = Истина;
	К_ШтрихКодНачало.ЭлементУправления.АвтоОтметкаНезаполненного = Ложь;
	К_ШтрихКодНачало.ЭлементУправления.ВыборНезаполненного		 = Истина;
	К_ШтрихКодНачало.ЭлементУправления.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	К_ШтрихКодНачало.ЭлементУправления.РедактированиеТекста      = Истина;
  	К_ШтрихКодНачало.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("Р_ШтрихКодНачалоПакетаПриИзменении"));

	К_ШтрихКодКонец = ЭлементыФормы.Товары.Колонки.Добавить("Р_ШтрихКодКонецПакета","Штрих код конец пакета");
	К_ШтрихКодКонец.Видимость = Истина;
	К_ШтрихКодКонец.Доступность = Истина;
	К_ШтрихКодКонец.ИзменятьПозицию = Истина;
	К_ШтрихКодКонец.Имя = "Р_ШтрихКодКонецПакета";
	К_ШтрихКодКонец.Положение = ПоложениеКолонки.НоваяКолонка;
	К_ШтрихКодКонец.Ширина = 20;
	К_ШтрихКодКонец.Данные = "Р_ШтрихКодКонецПакета";
	К_ШтрихКодКонец.УстановитьЭлементУправления(Тип("ПолеВвода"));
	К_ШтрихКодКонец.ЭлементУправления.АвтоВыборНезаполненного	 = Истина;
	К_ШтрихКодКонец.ЭлементУправления.АвтоОтметкаНезаполненного = Ложь;
	К_ШтрихКодКонец.ЭлементУправления.ВыборНезаполненного		 = Истина;
	К_ШтрихКодКонец.ЭлементУправления.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	К_ШтрихКодКонец.ЭлементУправления.РедактированиеТекста      = Истина;
	К_ШтрихКодКонец.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("Р_ШтрихКодКонецПакетаПриИзменении"));
	
	//Параметры колонки Количество    
	К_Количество = ЭлементыФормы.Товары.Колонки.Количество;
	К_Количество.ТекстШапки = "К-во талонов";
	ИндексКоличество = ЭлементыФормы.Товары.Колонки.Индекс(К_Количество);
	
	//Параметры колонки Количество    
	К_Цена = ЭлементыФормы.Товары.Колонки.Цена;
	К_Цена.ТекстШапки = "Цена талона";
	ИндексЦена = ЭлементыФормы.Товары.Колонки.Индекс(К_Цена);
	
	//Добавим Поля для отражения количественных характеристик реализуемых талонов ГСМ
	К_НоминалГСМ = ЭлементыФормы.Товары.Колонки.Добавить("Р_НоминалГСМ","Номинал ГСМ");
	К_НоминалГСМ.Видимость = Истина;
	К_НоминалГСМ.Доступность = Истина;
	К_НоминалГСМ.ИзменятьПозицию = Истина;
	К_НоминалГСМ.Имя = "Р_НоминалГСМ";
	К_НоминалГСМ.Положение = ПоложениеКолонки.НоваяКолонка;
	К_НоминалГСМ.Ширина = 20;
	К_НоминалГСМ.Данные = "Р_НоминалГСМ";
	К_НоминалГСМ.УстановитьЭлементУправления(Тип("ПолеВвода"));
 	К_НоминалГСМ.ЭлементУправления.АвтоВыборНезаполненного	 = Истина;
	К_НоминалГСМ.ЭлементУправления.АвтоОтметкаНезаполненного = Ложь;
	К_НоминалГСМ.ЭлементУправления.ВыборНезаполненного		 = Истина;
	К_НоминалГСМ.ЭлементУправления.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	К_НоминалГСМ.ЭлементУправления.РедактированиеТекста      = Истина;
	Если ИндексКоличество > -1 Тогда
		ЭлементыФормы.Товары.Колонки.Сдвинуть(К_НоминалГСМ,(ИндексКоличество-2) - ЭлементыФормы.Товары.Колонки.Количество());
	КонецЕсли;
  	//К_ШтрихКодНачало.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие());    //Заполнить действием приредактировании

	К_КоличествоГСМ = ЭлементыФормы.Товары.Колонки.Добавить("Р_КоличествоГСМ","К-во ГСМ");
	К_КоличествоГСМ.Видимость = Истина;
	К_КоличествоГСМ.Доступность = Истина;
	К_КоличествоГСМ.ИзменятьПозицию = Истина;
	К_КоличествоГСМ.Имя = "Р_КоличествоГСМ";
	К_КоличествоГСМ.Положение = ПоложениеКолонки.НоваяКолонка;
	К_КоличествоГСМ.Ширина = 20;
	К_КоличествоГСМ.Данные = "Р_КоличествоГСМ";
	К_КоличествоГСМ.УстановитьЭлементУправления(Тип("ПолеВвода"));
 	К_КоличествоГСМ.ЭлементУправления.АвтоВыборНезаполненного	 = Истина;
	К_КоличествоГСМ.ЭлементУправления.АвтоОтметкаНезаполненного = Ложь;
	К_КоличествоГСМ.ЭлементУправления.ВыборНезаполненного		 = Истина;
	К_КоличествоГСМ.ЭлементУправления.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	К_КоличествоГСМ.ЭлементУправления.РедактированиеТекста      = Истина;
	Если ИндексКоличество > -1 Тогда
		ЭлементыФормы.Товары.Колонки.Сдвинуть(К_КоличествоГСМ,(ИндексКоличество-1) - ЭлементыФормы.Товары.Колонки.Количество());
	КонецЕсли;
  	//К_ШтрихКодНачало.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие());    //Заполнить действием приредактировании
	
	К_ЦенаТалона = ЭлементыФормы.Товары.Колонки.Добавить("Р_ЦенаГСМ","Цена ГСМ");
	К_ЦенаТалона.Видимость = Истина;
	К_ЦенаТалона.Доступность = Ложь;
	К_ЦенаТалона.ИзменятьПозицию = Истина;
	К_ЦенаТалона.Имя = "Р_ЦенаГСМ";
	К_ЦенаТалона.Положение = ПоложениеКолонки.НоваяКолонка;
	К_ЦенаТалона.Ширина = 20;
	К_ЦенаТалона.УстановитьЭлементУправления(Тип("ПолеВвода"));
 	К_ЦенаТалона.ЭлементУправления.АвтоВыборНезаполненного	 = Истина;
	К_ЦенаТалона.ЭлементУправления.АвтоОтметкаНезаполненного = Ложь;
	К_ЦенаТалона.ЭлементУправления.ВыборНезаполненного		 = Истина;
	К_ЦенаТалона.ЭлементУправления.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	К_ЦенаТалона.ЭлементУправления.РедактированиеТекста      = ложь;
	Если ИндексЦена > -1 Тогда
		ЭлементыФормы.Товары.Колонки.Сдвинуть(К_ЦенаТалона,(ИндексЦена+4) - ЭлементыФормы.Товары.Колонки.Количество());
	КонецЕсли;
	
  	//К_ШтрихКодНачало.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие());    //Заполнить действием приредактировании
	ЭлементыФормы.Товары.УстановитьДействие("ПередНачаломИзменения", Новый Действие("Р_ТоварыПередНачаломИзменения"));
	
	Р_УстановитьВидимостьКолонокШтрихкодаТалонов();
	
КонецПроцедуры

Процедура Р_ДобавитьРеквизитыПоНефтебазе()
	
	Если ЭтоНовый() Тогда 
		Р_Транспорт			= Неопределено;
		Р_Водитель			= Неопределено;
		Р_Сопровождающий 	= Неопределено;
		Р_ПутевойЛист		= Неопределено;
		Р_ОтпускРазрешил 	= Неопределено;
		Р_ОтпускПроизвел	= Неопределено;
		Р_Перевозчик		= Неопределено
	КонецЕсли;
	////== ДОРАБОТКИ ПО НЕФТЕБАЗЕ
	//**************************************************
	Флажок = ЭлементыФормы.Добавить(Тип("Флажок"),"Р_ВозвратХранения",Истина);
	Флажок.Имя = "Р_ВозвратХранения";
	Флажок.Данные = "Р_ВозвратХранения";
	Флажок.Заголовок = "Возврат хранения";
	Флажок.Подсказка = "Возврат хранения";
	Флажок.Верх = 33;
	Флажок.Высота = 19;
	Флажок.Ширина = 72;
	Флажок.Лево = 576;
	Флажок.Доступность = Истина;
	Флажок.АвтоКонтекстноеМеню = Истина;
	Флажок.АктивизироватьПоУмолчанию = Ложь;
	Флажок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Флажок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Флажок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Флажок.Видимость = Истина;
	Флажок.ИзменяетДанные = Ложь;
	Флажок.ПервыйВГруппе = Ложь;
	Флажок.ПоложениеЗаголовка = ПоложениеЗаголовка.ЗаголовокСправа;
	Флажок.ПорядокОтображения = 30;
	Флажок.ПрозрачныйФон = Ложь;
	Флажок.ПропускатьПриВводе = Ложь;
	Флажок.ТриСостояния = Ложь;
	Флажок.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ОтражатьВБухгалтерскомУчете,ГраницаЭлементаУправления.Лево);
	Флажок.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭтаФорма.Панель,ГраницаЭлементаУправления.Право);
	//**************************************************
	//Добавляем новую закладку для реквизитов ТТН
	//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	Колонка = ЭлементыФормы.Товары.Колонки.Вставить(13, "Количество 2");
	Колонка.Имя			= "Р_Количество2";
	Колонка.Видимость	= Истина;
	Колонка.Доступность = Истина;
	Колонка.ИзменятьПозицию = Истина;
	Колонка.Положение = ПоложениеКолонки.НоваяКолонка;
	Колонка.Ширина = 20;
	Колонка.Данные = "Р_Количество2";
	Колонка.УстановитьЭлементУправления(Тип("ПолеВвода"));
	Колонка.ЭлементУправления.АвтоВыборНезаполненного	 = Истина;
	Колонка.ЭлементУправления.АвтоОтметкаНезаполненного = Ложь;
	Колонка.ЭлементУправления.ВыборНезаполненного		 = Истина;
	Колонка.ЭлементУправления.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	Колонка.ЭлементУправления.РедактированиеТекста      = Истина;
	Колонка.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("Р_ТоварыКоличество2ПриИзменении"));
	
	Колонка = ЭлементыФормы.Товары.Колонки.Вставить(6,"Вариант наименования");
	Колонка.Имя			= "Р_ВариантНаименования";
	Колонка.Видимость	= Истина;
	Колонка.Доступность = Истина;
	Колонка.ИзменятьПозицию = Истина;
	Колонка.Положение = ПоложениеКолонки.НоваяКолонка;
	Колонка.Ширина = 20;
	Колонка.Данные = "Р_ВариантНаименования";
	Колонка.УстановитьЭлементУправления(Тип("ПолеВвода"));
	Колонка.ЭлементУправления.АвтоВыборНезаполненного	 = Истина;
	Колонка.ЭлементУправления.АвтоОтметкаНезаполненного = Ложь;
	Колонка.ЭлементУправления.ВыборНезаполненного		 = Истина;
	Колонка.ЭлементУправления.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	Колонка.ЭлементУправления.РедактированиеТекста      = Истина;
	//Колонка.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("Р_ВариантНаименованияПриИзменении"));
	
	Колонка = ЭлементыФормы.Товары.Колонки.Вставить(14,"Плотность");
	Колонка.Имя			= "Р_Плотность";
	Колонка.Видимость	= Истина;
	Колонка.Доступность = Истина;
	Колонка.ИзменятьПозицию = Истина;
	Колонка.Положение = ПоложениеКолонки.НоваяКолонка;
	Колонка.Ширина = 20;
	Колонка.Данные = "Р_Плотность";
	Колонка.УстановитьЭлементУправления(Тип("ПолеВвода"));
	Колонка.ЭлементУправления.АвтоВыборНезаполненного	 = Истина;
	Колонка.ЭлементУправления.АвтоОтметкаНезаполненного = Ложь;
	Колонка.ЭлементУправления.ВыборНезаполненного		 = Истина;
	Колонка.ЭлементУправления.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	Колонка.ЭлементУправления.РедактированиеТекста      = Истина;
	Колонка.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("Р_ПлотностьПриИзменении"));
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Добавить("Р_РеквизитыТТН","Реквизиты ТТН");
	
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_Перевозчик",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_Перевозчик";
	Надпись.Заголовок = "Перевозчик:";
	Надпись.Верх = 6;
	Надпись.Высота = 19;
	Надпись.Ширина = 146;
	Надпись.Лево = 6;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 1;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_Транспорт",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_Транспорт";
	Надпись.Заголовок = "Транспорт:";
	Надпись.Верх = 31;
	Надпись.Высота = 19;
	Надпись.Ширина = 146;
	Надпись.Лево = 6;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 3;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_Водитель",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_Водитель";
	Надпись.Заголовок = "Водитель:";
	Надпись.Верх = 56;
	Надпись.Высота = 19;
	Надпись.Ширина = 146;
	Надпись.Лево = 6;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 5;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_Сопровождающий",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_Сопровождающий";
	Надпись.Заголовок = "Сопровождающий:";
	Надпись.Верх = 81;
	Надпись.Высота = 19;
	Надпись.Ширина = 146;
	Надпись.Лево = 6;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 7;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_ПодтверждающийДокумент",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_ПодтверждающийДокумент";
	Надпись.Заголовок = "Подтверждающий документ:";
	Надпись.Верх = 106;
	Надпись.Высота = 19;
	Надпись.Ширина = 146;
	Надпись.Лево = 6;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 9;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_ОтпускРазрешил",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_ОтпускРазрешил";
	Надпись.Заголовок = "Отпуск разрешил:";
	Надпись.Верх = 131;
	Надпись.Высота = 19;
	Надпись.Ширина = 146;
	Надпись.Лево = 6;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 11;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_ОтпускПроизвел",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_ОтпускПроизвел";
	Надпись.Заголовок = "Отпуск произвел:";
	Надпись.Верх = 156;
	Надпись.Высота = 19;
	Надпись.Ширина = 146;
	Надпись.Лево = 6;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 13;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_ПаспортКачества",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_ПаспортКачества";
	Надпись.Заголовок = "Паспорт качества:";
	Надпись.Верх = 6;
	Надпись.Высота = 19;
	Надпись.Ширина = 147;
	Надпись.Лево = 329;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 15;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_НомерТТН",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_НомерТТН";
	Надпись.Заголовок = "НомерТТН:";
	Надпись.Верх = 31;
	Надпись.Высота = 19;
	Надпись.Ширина = 147;
	Надпись.Лево = 329;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 17;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_Температура",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_Температура";
	Надпись.Заголовок = "Температура:";
	Надпись.Верх = 56;
	Надпись.Высота = 19;
	Надпись.Ширина = 147;
	Надпись.Лево = 329;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 19;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_ПутевойЛист",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_ПутевойЛист";
	Надпись.Заголовок = "Путевой лист:";
	Надпись.Верх = 81;
	Надпись.Высота = 19;
	Надпись.Ширина = 147;
	Надпись.Лево = 329;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 21;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_ДатаНомерДоверенности",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_ДатаНомерДоверенности";
	Надпись.Заголовок = "Дата и номер доверенности:";
	Надпись.Верх = 106;
	Надпись.Высота = 19;
	Надпись.Ширина = 147;
	Надпись.Лево = 329;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 23;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_МестоПогрузки",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_МестоПогрузки";
	Надпись.Заголовок = "Место погрузки:";
	Надпись.Верх = 131;
	Надпись.Высота = 19;
	Надпись.Ширина = 147;
	Надпись.Лево = 329;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 25;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_МестоРазгрузки",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_МестоРазгрузки";
	Надпись.Заголовок = "Место разгрузки:";
	Надпись.Верх = 156;
	Надпись.Высота = 19;
	Надпись.Ширина = 147;
	Надпись.Лево = 329;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 27;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_Сопровождающий",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_Сопровождающий";
	ПолеВвода.Данные = "Р_Сопровождающий";
	ПолеВвода.Подсказка = "Сопровождающий";
	ПолеВвода.Верх = 81;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 166;
	ПолеВвода.Лево = 158;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Истина;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Истина;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 8;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_ПутевойЛист",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_ПутевойЛист";
	ПолеВвода.Данные = "Р_ПутевойЛист";
	ПолеВвода.Подсказка = "Путевой лист";
	ПолеВвода.Верх = 81;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 158;
	ПолеВвода.Лево = 482;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Истина;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Истина;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	//ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 22;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	//ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	//ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_ПодтверждающийДокумент",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_ПодтверждающийДокумент";
	ПолеВвода.Данные = "Р_ПодтверждающийДокумент";
	ПолеВвода.Подсказка = "Подтверждающий документ";
	ПолеВвода.Верх = 106;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 166;
	ПолеВвода.Лево = 158;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Ложь;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Ложь;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 10;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_ДатаНомерДоверенности",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_ДатаНомерДоверенности";
	ПолеВвода.Данные = "Р_ДатаНомерДоверенности";
	ПолеВвода.Подсказка = "Дата и номер доверенности";
	ПолеВвода.Верх = 106;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 158;
	ПолеВвода.Лево = 482;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Ложь;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Ложь;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 24;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_ОтпускРазрешил",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_ОтпускРазрешил";
	ПолеВвода.Данные = "Р_ОтпускРазрешил";
	ПолеВвода.Подсказка = "Отпуск разрешил";
	ПолеВвода.Верх = 131;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 166;
	ПолеВвода.Лево = 158;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Истина;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Истина;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 12;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_Температура",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_Температура";
	ПолеВвода.Данные = "Р_Температура";
	ПолеВвода.Подсказка = "Температура";
	ПолеВвода.Верх = 56;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 158;
	ПолеВвода.Лево = 482;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Ложь;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Ложь;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Ложь;
	ПолеВвода.КнопкаРегулирования = Истина;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 20;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_ОтпускПроизвел",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_ОтпускПроизвел";
	ПолеВвода.Данные = "Р_ОтпускПроизвел";
	ПолеВвода.Подсказка = "Отпуск произвел";
	ПолеВвода.Верх = 156;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 166;
	ПолеВвода.Лево = 158;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Истина;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Истина;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 14;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_ПаспортКачества",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_ПаспортКачества";
	ПолеВвода.Данные = "Р_ПаспортКачества";
	ПолеВвода.Подсказка = "Паспорт качества";
	ПолеВвода.Верх = 6;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 158;
	ПолеВвода.Лево = 482;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Ложь;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Ложь;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 16;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_Водитель",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_Водитель";
	ПолеВвода.Данные = "Р_Водитель";
	ПолеВвода.Подсказка = "Водитель";
	ПолеВвода.Верх = 56;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 166;
	ПолеВвода.Лево = 158;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Истина;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Истина;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 6;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_Транспорт",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_Транспорт";
	ПолеВвода.Данные = "Р_Транспорт";
	ПолеВвода.Подсказка = "Транспорт";
	ПолеВвода.Верх = 31;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 166;
	ПолеВвода.Лево = 158;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Истина;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Истина;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 4;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	ПолеВвода.УстановитьДействие("ПриИзменении", Новый Действие("Р_ТранспортПриИзменении"));
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_НомерТТН",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_НомерТТН";
	ПолеВвода.Данные = "Р_НомерТТН";
	ПолеВвода.Подсказка = "НомерТТН";
	ПолеВвода.Верх = 31;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 158;
	ПолеВвода.Лево = 482;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Ложь;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Ложь;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 18;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_МестоПогрузки",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_МестоПогрузки";
	ПолеВвода.Данные = "Р_МестоПогрузки";
	ПолеВвода.Подсказка = "Место погрузки";
	ПолеВвода.Верх = 131;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 158;
	ПолеВвода.Лево = 482;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Ложь;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Ложь;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 26;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_Перевозчик",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_Перевозчик";
	ПолеВвода.Данные = "Р_Перевозчик";
	ПолеВвода.Подсказка = "Перевозчик";
	ПолеВвода.Верх = 6;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 166;
	ПолеВвода.Лево = 158;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Истина;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Истина;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 2;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_МестоРазгрузки",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_МестоРазгрузки";
	ПолеВвода.Данные = "Р_МестоРазгрузки";
	ПолеВвода.Подсказка = "Место разгрузки";
	ПолеВвода.Верх = 156;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 158;
	ПолеВвода.Лево = 482;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Ложь;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Ложь;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 28;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	
	// дополнение
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_ГосНомерАвто",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_ГосНомерАвто";
	Надпись.Заголовок = "Гос. номер авто:";
	Надпись.Верх = 181;
	Надпись.Высота = 19;
	Надпись.Ширина = 146;
	Надпись.Лево = 6;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 29;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_ГосНомерПрицеп",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_ГосНомерПрицеп";
	Надпись.Заголовок = "Гос. номер прицепа:";
	Надпись.Верх = 206;
	Надпись.Высота = 19;
	Надпись.Ширина = 146;
	Надпись.Лево = 6;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 30;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"Надпись",Истина,ЭлементыФормы.ОсновнаяПанель);
	Надпись.Имя = "НадписьР_МетодРасчета";
	Надпись.Заголовок = "Метод расчета:";
	Надпись.Верх = 181;
	Надпись.Высота = 19;
	Надпись.Ширина = 147;
	Надпись.Лево = 329;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 31;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_ГосНомерАвто",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_ГосНомерАвто";
	ПолеВвода.Данные = "Р_ГосНомерАвто";
	ПолеВвода.Подсказка = "Гос. номер авто";
	ПолеВвода.Верх = 181;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 166;
	ПолеВвода.Лево = 158;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Ложь;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Ложь;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 31;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_ГосНомерПрицеп",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_ГосНомерПрицеп";
	ПолеВвода.Данные = "Р_ГосНомерПрицеп";
	ПолеВвода.Подсказка = "Гос. номер прицепа";
	ПолеВвода.Верх = 206;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 166;
	ПолеВвода.Лево = 158;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Ложь;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Ложь;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 32;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН;
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_МетодРасчета",Истина,ЭлементыФормы.ОсновнаяПанель);
	ПолеВвода.Имя = "Р_МетодРасчета";
	ПолеВвода.Данные = "Р_МетодРасчета";
	ПолеВвода.Подсказка = "Метод расчета";
	ПолеВвода.Верх = 181;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 158;
	ПолеВвода.Лево = 482;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Ложь;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Ложь;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.МногострочныйРежим = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 28;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РасширенноеРедактирование = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.РежимПароля = Ложь;
	ПолеВвода.ТолькоПросмотр = Ложь;
	//**************************************************
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_ВидУчетаГСМ", Истина, ЭтаФорма.Панель);
	Надпись.Имя = "НадписьР_ВидУчетаГСМ";
	Надпись.Заголовок = "Вид отгрузки:";
	Надпись.Верх = 391;
	Надпись.Высота = 19;
	Надпись.Ширина = 80;
	Надпись.Лево = 8;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 31;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Лево);
	Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Лево);
	Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Низ);
	Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Низ);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_ВидУчетаГСМ", Истина, ЭтаФорма.Панель);
	ПолеВвода.Имя = "Р_ВидУчетаГСМ";
	ПолеВвода.Данные = "Р_ВидУчетаГСМ";
	ПолеВвода.Подсказка = "Вид количественного учета отгрузки ГСМ: по массе или объему";
	ПолеВвода.Верх = 391;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 95;
	ПолеВвода.Лево = 90;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Истина;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Истина;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 28;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.ТолькоПросмотр = Ложь;
	ПолеВвода.УстановитьДействие("ПриИзменении", Новый Действие("Р_ВидУчетаГСМПриИзменении"));
	ПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Лево);
	ПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Лево);
	ПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Низ,		ЭтаФорма.Панель,ГраницаЭлементаУправления.Низ);
	ПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Низ);
	//**************************************************
	Надпись = ЭлементыФормы.Добавить(Тип("Надпись"),"НадписьР_ВводДанныхГСМ", Истина, ЭтаФорма.Панель);
	Надпись.Имя = "НадписьР_ВводДанныхГСМ";
	Надпись.Заголовок = "Вводим:";
	Надпись.Верх = 391;
	Надпись.Высота = 19;
	Надпись.Ширина = 45;
	Надпись.Лево = 195;
	Надпись.Доступность = Истина;
	Надпись.АвтоКонтекстноеМеню = Истина;
	Надпись.АктивизироватьПоУмолчанию = Ложь;
	Надпись.БегущаяСтрока = РежимБегущейСтроки.НеИспользовать;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Надпись.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Надпись.Видимость = Истина;
	Надпись.ВыделятьОтрицательные = Ложь;
	Надпись.ГиперСсылка = Ложь;
	Надпись.ИзменяетДанные = Ложь;
	Надпись.ПервыйВГруппе = Ложь;
	Надпись.ПоложениеКартинкиНадписи = ПоложениеКартинкиНадписи.Лево;
	Надпись.ПорядокОтображения = 31;
	Надпись.ПрозрачныйФон = Ложь;
	Надпись.ПропускатьПриВводе = Ложь;
	Надпись.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Лево);
	Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Лево);
	Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Низ);
	Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Низ);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"),"Р_ВводДанныхГСМ", Истина, ЭтаФорма.Панель);
	ПолеВвода.Имя = "Р_ВводДанныхГСМ";
	ПолеВвода.Данные = "Р_ВводДанныхГСМ";
	ПолеВвода.Подсказка = "Последовательность ввода количества ГСМ";
	ПолеВвода.Верх = 391;
	ПолеВвода.Высота = 19;
	ПолеВвода.Ширина = 140;
	ПолеВвода.Лево = 240;
	ПолеВвода.Доступность = Истина;
	ПолеВвода.АвтоВыборНезаполненного = Ложь;
	ПолеВвода.АвтоКонтекстноеМеню = Истина;
	ПолеВвода.АвтоОтметкаНезаполненного = Ложь;
	ПолеВвода.АвтоПереносСтрок = Истина;
	ПолеВвода.АктивизироватьПоУмолчанию = Ложь;
	ПолеВвода.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
	ПолеВвода.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ПолеВвода.Видимость = Истина;
	ПолеВвода.ВыбиратьТип = Истина;
	ПолеВвода.ВыборНезаполненного = Ложь;
	ПолеВвода.ВыделятьОтрицательные = Ложь;
	ПолеВвода.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ПолеВвода.ИзменяетДанные = Ложь;
	ПолеВвода.КнопкаВыбора = Истина;
	ПолеВвода.КнопкаОткрытия = Ложь;
	ПолеВвода.КнопкаОчистки = Истина;
	ПолеВвода.КнопкаРегулирования = Ложь;
	ПолеВвода.КнопкаСпискаВыбора = Ложь;
	ПолеВвода.ОтметкаНезаполненного = Ложь;
	ПолеВвода.ПервыйВГруппе = Ложь;
	ПолеВвода.ПорядокОтображения = 28;
	ПолеВвода.ПрозрачныйФон = Ложь;
	ПолеВвода.ПропускатьПриВводе = Ложь;
	ПолеВвода.РедактированиеТекста = Истина;
	ПолеВвода.РежимВыбораИзСписка = Ложь;
	ПолеВвода.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	ПолеВвода.ТолькоПросмотр = Ложь;
	ПолеВвода.УстановитьДействие("ПриИзменении", Новый Действие("Р_ВводДанныхГСМПриИзменении"));
	ПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Лево);
	ПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Лево);
	ПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Низ,		ЭтаФорма.Панель,ГраницаЭлементаУправления.Низ);
	ПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Низ);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Флажок = ЭлементыФормы.Добавить(Тип("Флажок"),"Р_ОткорректированоВручную", Истина, ЭтаФорма.Панель);
	Флажок.Имя = "Р_ОткорректированоВручную";
	Флажок.Данные = "Р_ОткорректированоВручную";
	Флажок.Заголовок = "Введена вручную 2-я ед.";
	Флажок.Подсказка = "Введено вручную кол-во по 2-й единице";
	Флажок.Верх = 391;
	Флажок.Высота = 19;
	Флажок.Ширина = 90;
	Флажок.Лево = 385;
	Флажок.Доступность = Истина;
	Флажок.АвтоКонтекстноеМеню = Истина;
	Флажок.АктивизироватьПоУмолчанию = Ложь;
	Флажок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Флажок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Флажок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Флажок.Видимость = Истина;
	Флажок.ИзменяетДанные = Ложь;
	Флажок.ПервыйВГруппе = Ложь;
	Флажок.ПоложениеЗаголовка = ПоложениеЗаголовка.ЗаголовокСправа;
	Флажок.ПорядокОтображения = 33;
	Флажок.ПрозрачныйФон = Ложь;
	Флажок.ПропускатьПриВводе = Ложь;
	Флажок.ТриСостояния = Ложь;
	Флажок.УстановитьДействие("ПриИзменении", Новый Действие("Р_ОткорректированоВручнуюПриИзменении"));
	Флажок.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Лево);
	Флажок.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Право);
	Флажок.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Низ);
	Флажок.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель,ГраницаЭлементаУправления.Низ);
	//Флажок.Шрифт = Новый Шрифт(Флажок.Шрифт,,,Истина);
	//**************************************************	
		
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Товары;
	
КонецПроцедуры

Процедура Р_ДобавитьРеквизитЗапретРедактирования()
	
	ФлажокВ = ЭлементыФормы.Добавить(Тип("Флажок"), "Р_ЗапретРедактирования", Истина, ЭтаФорма.Панель);
	ФлажокВ.Данные = "Р_ЗапретРедактирования";
	ФлажокВ.Заголовок = "Запрет ред.";
	ФлажокВ.Подсказка = "Запрет редактирования документа";
	ФлажокВ.Верх = 33;
	ФлажокВ.Лево = 576;
	ФлажокВ.Высота = 19;
	ФлажокВ.Ширина = 80;
	ФлажокВ.Доступность = Истина;
	ФлажокВ.АвтоКонтекстноеМеню = Истина;
	ФлажокВ.АктивизироватьПоУмолчанию = Ложь;
	ФлажокВ.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ФлажокВ.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ФлажокВ.Видимость = Истина;
	ФлажокВ.ИзменяетДанные = Истина;
	ФлажокВ.ПервыйВГруппе = Ложь;
	ФлажокВ.ПоложениеЗаголовка = ПоложениеЗаголовка.ЗаголовокСправа;
	ФлажокВ.ПорядокОтображения = 3;
	ФлажокВ.ПрозрачныйФон = Ложь;
	ФлажокВ.ПропускатьПриВводе = Ложь;
	ФлажокВ.ТриСостояния = Ложь;
	ФлажокВ.УстановитьПривязку(ГраницаЭлементаУправления.Верх,	ЭтаФорма.Панель,	ГраницаЭлементаУправления.Верх);
	ФлажокВ.УстановитьПривязку(ГраницаЭлементаУправления.Низ,	ЭтаФорма.Панель,	ГраницаЭлементаУправления.Верх);
	ФлажокВ.УстановитьПривязку(ГраницаЭлементаУправления.Лево,	ЭлементыФормы.Дата,	ГраницаЭлементаУправления.Право);
	ФлажокВ.УстановитьПривязку(ГраницаЭлементаУправления.Право,	ЭтаФорма.Панель,	ГраницаЭлементаУправления.Право);
	
КонецПроцедуры

Процедура Р_ДобавитьКолонкуУсловияДоставки()
	
	К_УсловияДоставки = ЭлементыФормы.Товары.Колонки.Добавить("Р_УсловияДоставки","Условия доставки (Р)");
	К_УсловияДоставки.Видимость 		= Истина;
	К_УсловияДоставки.Доступность 		= Истина;
	К_УсловияДоставки.ИзменятьПозицию 	= Истина;
	К_УсловияДоставки.Данные	 		= "Р_УсловияДоставки";
	К_УсловияДоставки.Имя 				= "Р_УсловияДоставки";
	К_УсловияДоставки.Положение 		= ПоложениеКолонки.НоваяКолонка;
	К_УсловияДоставки.Ширина 			= 20;
	К_УсловияДоставки.УстановитьЭлементУправления(Тип("ПолеВвода"));
 	//К_УсловияДоставки.ЭлементУправления.АвтоВыборНезаполненного	 	= Истина;
	К_УсловияДоставки.ЭлементУправления.АвтоОтметкаНезаполненного 	= Ложь;
	//К_УсловияДоставки.ЭлементУправления.ВыборНезаполненного			= Истина;
	К_УсловияДоставки.ЭлементУправления.КнопкаВыбора			 	= Истина;
	К_УсловияДоставки.ЭлементУправления.КнопкаСпискаВыбора			= Ложь;
	К_УсловияДоставки.ЭлементУправления.РежимВыбораНезаполненного	= РежимВыбораНезаполненного.ПриНажатииEnter;
	К_УсловияДоставки.ЭлементУправления.РедактированиеТекста      	= Истина;
	
КонецПроцедуры

Процедура Р_ДобавитьРеквизитыПоТопливнымКартам()
	К_ШтрихКодНачало = ЭлементыФормы.Товары.Колонки.Вставить(4, "№ карты");
	К_ШтрихКодНачало.Видимость = Истина;
	К_ШтрихКодНачало.Доступность = Истина;
	К_ШтрихКодНачало.ИзменятьПозицию = Истина;
	К_ШтрихКодНачало.Имя = "Р_ШтрихКодНачалоПакета";
	К_ШтрихКодНачало.Положение = ПоложениеКолонки.НоваяКолонка;
	К_ШтрихКодНачало.Ширина = 20;
	К_ШтрихКодНачало.Данные = "Р_ШтрихКодНачалоПакета";
	К_ШтрихКодНачало.УстановитьЭлементУправления(Тип("ПолеВвода"));
 	К_ШтрихКодНачало.ЭлементУправления.АвтоВыборНезаполненного	 = Истина;
	К_ШтрихКодНачало.ЭлементУправления.АвтоОтметкаНезаполненного = Ложь;
	К_ШтрихКодНачало.ЭлементУправления.ВыборНезаполненного		 = Истина;
	К_ШтрихКодНачало.ЭлементУправления.РежимВыбораНезаполненного = РежимВыбораНезаполненного.ПриНажатииEnter;
	К_ШтрихКодНачало.ЭлементУправления.РедактированиеТекста      = Истина;
  	//К_ШтрихКодНачало.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("Р_ШтрихКодНачалоПакетаПриИзменении"));
КонецПроцедуры

Процедура Р_УстановитьВидимостьКолонокШтрихкодаТалонов() 
	
	//На форму документа добавим Позиции для отражения Штрих кодов
	//Добавить "Штрих Код начала пакета", "Штрих Код конца пакета"
	ЭлементыФормы.Товары.Колонки["Р_ШтрихКодКонецПакета"].Видимость = Р_РежимТалоны;
	ЭлементыФормы.Товары.Колонки["Р_ШтрихКодКонецПакета"].Видимость = Р_РежимТалоны;
	
КонецПроцедуры

Процедура Р_ОпределитьВидимостьПолейШтриходовТалонов(Элемент) 
	 Р_УстановитьВидимостьКолонокШтрихкодаТалонов();
КонецПроцедуры

Функция Р_УстановитьВидимостьЭлементовНефтебазыИПоТопливнымКартам(ТекДанные = Неопределено) 
		
	тТипТов = Ложь; тТипГСМ = Ложь; тТопКрт = Ложь;
	Р_ПолучитьТипыНоменклатурыТовары(тТипТов, тТипГСМ, тТопКрт);
	тРазныеТипы = ((тТипТов И тТипГСМ) ИЛИ (тТипГСМ И тТопКрт) ИЛИ (тТипТов И тТопКрт));
	Если тРазныеТипы И (ТекДанные <> Неопределено) Тогда
		Сообщить("Недопустимо смешение в одном документе ГСМ и других видов номенклатуры", СтатусСообщения.Важное);
		ТекДанные.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		Возврат Истина;
	КонецЕсли;
	
	Если тТипГСМ Тогда
		Если НЕ ЗначениеЗаполнено(Р_ВидУчетаГСМ) Тогда
			Р_ВидУчетаГСМ = Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоМассе;
			Р_ОткорректированоВручную = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Р_ВводДанныхГСМ) Тогда
			Р_ВводДанныхГСМ = Перечисления.Р_ВводДанныхГСМ.ОбъемПлотность;
		КонецЕсли
	КонецЕсли;
	
	//Управление видимостью реквизитов для нефтебазы
	ЭлементыФормы.ОсновнаяПанель.Страницы.Р_РеквизитыТТН.Видимость	= тТипГСМ;
	ЭлементыФормы.Р_ВозвратХранения.Видимость 						= тТипГСМ;
	кКоличество2 = ЭлементыФормы.Товары.Колонки.Р_Количество2;
	кКоличество2.Видимость								 			= тТипГСМ;
	ЭлементыФормы.Товары.Колонки.Р_Плотность.Видимость	 			= тТипГСМ;
	ЭлементыФормы.Товары.Колонки.Р_ВариантНаименования.Видимость	= тТипГСМ;
	ЭлементыФормы.Р_ОткорректированоВручную.Видимость				= тТипГСМ;
	ЭлементыФормы.Р_ВидУчетаГСМ.Видимость							= тТипГСМ;
	ЭлементыФормы.НадписьР_ВидУчетаГСМ.Видимость					= тТипГСМ;
	ЭлементыФормы.Р_ВводДанныхГСМ.Видимость							= тТипГСМ;
	ЭлементыФормы.НадписьР_ВводДанныхГСМ.Видимость					= тТипГСМ;
	Если тТипГСМ Тогда 
		Если ТекДанные <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Р_ВидУчетаГСМ) Тогда
				Р_ВидУчетаГСМ = Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоМассе;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Р_ВводДанныхГСМ) Тогда
				Р_ВводДанныхГСМ = Перечисления.Р_ВводДанныхГСМ.ОбъемПлотность;
			КонецЕсли
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Р_ВводДанныхГСМ) Тогда
			Р_ВводДанныхГСМ = Перечисления.Р_ВводДанныхГСМ.ОбъемПлотность;
		КонецЕсли;
		Р_УстановитьВидКолонкиКоличество2();
		Р_УстановитьПоследовательностьКолонокКоличество();
	КонецЕсли;
	
	//Управление видимостью реквизитов по топливным картам
	ЭлементыФормы.Товары.Колонки.Р_ШтрихКодНачалоПакета.Видимость	= тТопКрт;
	
	Возврат тРазныеТипы;
	
КонецФункции

Процедура Р_УстановитьВидКолонкиКоличество2()
	кКоличество2 = ЭлементыФормы.Товары.Колонки.Р_Количество2;
	кКоличество = ЭлементыФормы.Товары.Колонки.Количество;
	Если Р_ВидУчетаГСМ = Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоМассе Тогда
		кКоличество2.ТекстШапки = "Объем";
		кКоличество.ПодсказкаВШапке = "Масса";
	ИначеЕсли Р_ВидУчетаГСМ = Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоОбъему Тогда
		кКоличество2.ТекстШапки = "Масса";
		кКоличество.ПодсказкаВШапке = "Объем";
	Иначе
		кКоличество2.ТекстШапки = "??? Объем, Масса ???";
		Сообщить("Не указан ""Вид отгрузки ГСМ""", СтатусСообщения.Внимание);
	КонецЕсли
КонецПроцедуры

Процедура Р_УстановитьПоследовательностьКолонокКоличество()
	Если НЕ ЗначениеЗаполнено(Р_ВидУчетаГСМ) Тогда
		Возврат;
	КонецЕсли;
	КолонкиТовары = ЭлементыФормы.Товары.Колонки;
	кКоличество = КолонкиТовары["Количество"];
	кКоличество2 = КолонкиТовары["Р_Количество2"];
	кПлотность = КолонкиТовары["Р_Плотность"];
	ИндексКоличество = КолонкиТовары.Индекс(кКоличество);
	ИндексКоличество2 = КолонкиТовары.Индекс(кКоличество2);
	ИндексПлотность = КолонкиТовары.Индекс(кПлотность);
	Если Р_ВидУчетаГСМ = Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоМассе Тогда
		Если Р_ВводДанныхГСМ = Перечисления.Р_ВводДанныхГСМ.ОбъемПлотность Тогда	// Р_Количество2, Р_Плотность, Количество
			рПлтКво = ИндексПлотность - ИндексКоличество;
			Если рПлтКво <> -1 Тогда
				рПлтКво = ?(рПлтКво < 0, рПлтКво+1, рПлтКво);
				КолонкиТовары.Сдвинуть(кПлотность, -рПлтКво);
				ИндексПлотность = ИндексПлотность - рПлтКво;
				ИндексКоличество2 = КолонкиТовары.Индекс(кКоличество2);
			КонецЕсли;
			рКво2Плт = ИндексКоличество2 - ИндексПлотность;
			Если рКво2Плт <> -1 Тогда
				рКво2Плт = ?(рКво2Плт < 0, рКво2Плт+1, рКво2Плт);
				КолонкиТовары.Сдвинуть(кКоличество2, -рКво2Плт);
			КонецЕсли
		ИначеЕсли Р_ВводДанныхГСМ = Перечисления.Р_ВводДанныхГСМ.ОбъемМасса Тогда	// Р_Количество2, Количество, Плотность
			рКвоПлт = ИндексКоличество - ИндексПлотность;
			Если рКвоПлт <> -1 Тогда
				рКвоПлт = ?(рКвоПлт < 0, рКвоПлт+1, рКвоПлт);
				КолонкиТовары.Сдвинуть(кКоличество, -рКвоПлт);
				ИндексКоличество = ИндексКоличество - рКвоПлт;
				ИндексКоличество2 = КолонкиТовары.Индекс(кКоличество2);
			КонецЕсли;
			рКво2Кво = ИндексКоличество2 - ИндексКоличество;
			Если рКво2Кво <> -1 Тогда
				рКво2Кво = ?(рКво2Кво < 0, рКво2Кво+1, рКво2Кво);
				КолонкиТовары.Сдвинуть(кКоличество2, -рКво2Кво);
			КонецЕсли
		Иначе	// МассаПлотность													// Количество, Р_Плотность, Р_Количество2
			рПлтКво2 = ИндексПлотность - ИндексКоличество2;
			Если рПлтКво2 <> -1 Тогда
				рПлтКво2 = ?(рПлтКво2 < 0, рПлтКво2+1, рПлтКво2);
				КолонкиТовары.Сдвинуть(кПлотность, -рПлтКво2);
				ИндексПлотность = ИндексПлотность - рПлтКво2;
				ИндексКоличество = КолонкиТовары.Индекс(кКоличество);
			КонецЕсли;
			рКвоПлт = ИндексКоличество - ИндексПлотность;
			Если рКвоПлт <> -1 Тогда
				рКвоПлт = ?(рКвоПлт < 0, рКвоПлт+1, рКвоПлт);
				КолонкиТовары.Сдвинуть(кКоличество, -рКвоПлт);
			КонецЕсли;
		КонецЕсли
	Иначе		// ПоОбъему
		Если Р_ВводДанныхГСМ = Перечисления.Р_ВводДанныхГСМ.ОбъемПлотность Тогда	// Количество, Р_Плотность, Р_Количество2
			рПлтКво2 = ИндексПлотность - ИндексКоличество2;
			Если рПлтКво2 <> -1 Тогда
				рПлтКво2 = ?(рПлтКво2 < 0, рПлтКво2+1, рПлтКво2);
				КолонкиТовары.Сдвинуть(кПлотность, -рПлтКво2);
				ИндексПлотность = ИндексПлотность - рПлтКво2;
				ИндексКоличество = КолонкиТовары.Индекс(кКоличество);
			КонецЕсли;
			рКвоПлт = ИндексКоличество - ИндексПлотность;
			Если рКвоПлт <> -1 Тогда
				рКвоПлт = ?(рКвоПлт < 0, рКвоПлт+1, рКвоПлт);
				КолонкиТовары.Сдвинуть(кКоличество, -рКвоПлт);
			КонецЕсли;
		ИначеЕсли Р_ВводДанныхГСМ = Перечисления.Р_ВводДанныхГСМ.ОбъемМасса Тогда	// Количество, Р_Количество2, Р_Плотность
			рКво2Плт = ИндексКоличество2 - ИндексПлотность;
			Если рКво2Плт <> -1 Тогда
				рКво2Плт = ?(рКво2Плт < 0, рКво2Плт+1, рКво2Плт);
				КолонкиТовары.Сдвинуть(кКоличество2, -рКво2Плт);
				ИндексКоличество2 = ИндексКоличество2 - рКво2Плт;
				ИндексКоличество = КолонкиТовары.Индекс(кКоличество);
			КонецЕсли;
			рКвоКво2 = ИндексКоличество - ИндексКоличество2;
			Если рКвоКво2 <> -1 Тогда
				рКвоКво2 = ?(рКвоКво2 < 0, рКвоКво2+1, рКвоКво2);
				КолонкиТовары.Сдвинуть(кКоличество, -рКвоКво2);
			КонецЕсли
		Иначе	// МассаПлотность													// Р_Количество2, Р_Плотность, Количество
			рПлтКво = ИндексПлотность - ИндексКоличество;
			Если рПлтКво <> -1 Тогда
				рПлтКво = ?(рПлтКво < 0, рПлтКво+1, рПлтКво);
				КолонкиТовары.Сдвинуть(кПлотность, -рПлтКво);
				ИндексПлотность = ИндексПлотность - рПлтКво;
				ИндексКоличество2 = КолонкиТовары.Индекс(кКоличество2);
			КонецЕсли;
			рКво2Плт = ИндексКоличество2 - ИндексПлотность;
			Если рКво2Плт <> -1 Тогда
				рКво2Плт = ?(рКво2Плт < 0, рКво2Плт+1, рКво2Плт);
				КолонкиТовары.Сдвинуть(кКоличество2, -рКво2Плт);
			КонецЕсли
		КонецЕсли
	КонецЕсли
КонецПроцедуры

Процедура Р_ОграничениеВидимостиДляОтгрузкиГСМСоСклада()
	Если РольДоступна("Р_ОтгрузкаГСМСоСклада") И (ЭтоНовый() ИЛИ Р_ЭтоГСМ) Тогда
		мКолонкиТовары.ПроцентАвтоматическихСкидок.Видимость = Ложь;
		//мКолонкиТовары.ЗаказПокупателя.Видимость = Ложь;
		Для Каждого ТекСтр Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			Если (ТекСтр.Имя = "Товары") ИЛИ (ТекСтр.Имя = "Р_РеквизитыТТН") Тогда
				ТекСтр.Видимость = Истина;
			Иначе
				ТекСтр.Видимость = Ложь;
			КонецЕсли
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура Р_ПриОткрытии()
	
	ПриОткрытии();
	
	Если Р_РежимТалоны Тогда
		Р_ДобавитьПоказатьРеквизитыРаботыСТалонми();
		Если (НЕ Р_ВозвратХранения)
		   И РольДоступна("ПолныеПрава") И РольДоступна("Р_ОтменаДействийПоТалонамГСМ") Тогда
			ДоступностьДатаКнопкиОКЗаписать();
		Иначе
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли
	Иначе
		Р_ДобавитьРеквизитыПоНефтебазе();
		Р_ДобавитьРеквизитыПоТопливнымКартам();
		Р_УстановитьВидимостьЭлементовНефтебазыИПоТопливнымКартам();
	КонецЕсли;
	
	Р_ДобавитьРеквизитЗапретРедактирования();
	
	Р_ДобавитьКолонкуУсловияДоставки();
	
	тРольДоступнаР_ИзменениеЗапретРедактирования = РольДоступна("Р_ИзменениеЗапретРедактирования");
	ЭлементыФормы.Р_ЗапретРедактирования.Доступность = тРольДоступнаР_ИзменениеЗапретРедактирования;
	
	Если (НЕ ТолькоПросмотр) И (НЕ ЭтоНовый()) И Р_ЗапретРедактирования И (НЕ тРольДоступнаР_ИзменениеЗапретРедактирования) Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли
	
КонецПроцедуры

Процедура Р_ВидУчетаГСМПриИзменении(Элемент)
	Р_УстановитьВидКолонкиКоличество2();
	Р_УстановитьПоследовательностьКолонокКоличество();
	Для Каждого СтрТовар Из Товары Цикл
		Если (СтрТовар.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ)
		   И (СтрТовар.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Р_ВидУчетаГСМ <> Р_ВидУчетаГСМ) Тогда
			Сообщить("Строка № " + СтрТовар.НомерСтроки + ". Единица измерения не соответствует виду отгрузки ГСМ", СтатусСообщения.Внимание);
		КонецЕсли
	КонецЦикла
КонецПроцедуры

Процедура Р_ВводДанныхГСМПриИзменении(Элемент)
	Р_УстановитьПоследовательностьКолонокКоличество();
	ВывестиИнформациюОбИспользованииРеквизитовДляГСМ();
КонецПроцедуры

Процедура Р_ОткорректированоВручнуюПриИзменении(Элемент)
	ВывестиИнформациюОбИспользованииРеквизитовДляГСМ();
КонецПроцедуры

Процедура Р_ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	тТипГСМ = (СтрокаТабличнойЧасти.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ);
	Если тТипГСМ Тогда
		Если СтрокаТабличнойЧасти.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Р_ВидУчетаГСМ <> Р_ВидУчетаГСМ Тогда
			Сообщить("Единица измерения в строке документа не соответствует виду отгрузки ГСМ", СтатусСообщения.Внимание);
			//Отказ = Истина;
		КонецЕсли
	КонецЕсли
КонецПроцедуры

Процедура Р_ТоварыПослеУдаления(Элемент)
	
	ПослеУдаленияТовары(Элемент);
	
	Р_УстановитьВидимостьЭлементовНефтебазыИПоТопливнымКартам();
	
КонецПроцедуры

Процедура Р_ТоварыНоменклатураПриИзменении(Элемент)

	ТоварыНоменклатураПриИзменении(Элемент);
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	тРазныеТипы = Р_УстановитьВидимостьЭлементовНефтебазыИПоТопливнымКартам(СтрокаТабличнойЧасти);
	Если тРазныеТипы Тогда
		Возврат;
	КонецЕсли;
	
	тТипГСМ = (СтрокаТабличнойЧасти.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ);
	Если тТипГСМ Тогда
		Р_ПолучитьСреднююПлотностьПоСкладу(СтрокаТабличнойЧасти);
		Р_ОпределитьНаименованиеНоменклатуры(СтрокаТабличнойЧасти,Контрагент);
	КонецЕсли
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

Процедура Р_ТоварыКоличествоПриИзменении(Элемент)
		
	Если ЭлементыФормы.Товары.Колонки.Найти("Р_Количество2") <> Неопределено Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
		Р_ПересчитатьМассуОбъем(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ТоварыКоличествоПриИзменении(Элемент);

КонецПроцедуры

Процедура Р_ПлотностьПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Р_ПересчитатьМассуОбъем(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ТоварыР_ПлотностьПриИзменении()

Процедура Р_ТоварыКоличество2ПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Р_ПересчитатьМассуОбъем(СтрокаТабличнойЧасти);
	
КонецПроцедуры // Р_ТоварыКоличество2ПриИзменении()

Процедура Р_ПересчитатьМассуОбъем(СтрокаДанных)
	ИмяКолонки = ЭлементыФормы.Товары.ТекущаяКолонка.Имя;
	ЗначениеКолонки = СтрокаДанных[ИмяКолонки];
	Если ЗначениеЗаполнено(ЗначениеКолонки) Тогда
		КолонкиТовары = ЭлементыФормы.Товары.Колонки;
		ИндексКоличество = КолонкиТовары.Индекс(КолонкиТовары["Количество"]);
		ИндексКоличество2 = КолонкиТовары.Индекс(КолонкиТовары["Р_Количество2"]);
		Если ИмяКолонки = "Р_Плотность" Тогда
			Если ЗначениеЗаполнено(СтрокаДанных["Количество"]) И ЗначениеЗаполнено(СтрокаДанных["Р_Количество2"]) Тогда
				Если ИндексКоличество < ИндексКоличество2 Тогда
					СтрокаДанных["Р_Количество2"] = 0;
				Иначе
					СтрокаДанных["Количество"] = 0;
				КонецЕсли;
				Р_ПересчитатьМассуОбъемПриОбнулении(СтрокаДанных);
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных["Количество"]) ИЛИ ЗначениеЗаполнено(СтрокаДанных["Р_Количество2"]) Тогда
				Р_ПересчитатьМассуОбъемПриОбнулении(СтрокаДанных);
			КонецЕсли
		ИначеЕсли ИмяКолонки = "Р_Количество2" Тогда
			Если ЗначениеЗаполнено(СтрокаДанных["Количество"]) И ЗначениеЗаполнено(СтрокаДанных["Р_Плотность"]) Тогда
				Если ИндексКоличество2 < ИндексКоличество Тогда
					СтрокаДанных["Количество"] = 0;
				КонецЕсли
			КонецЕсли;
			Р_ПересчитатьМассуОбъемПриОбнулении(СтрокаДанных);
		ИначеЕсли ИмяКолонки = "Количество" Тогда
			Если ЗначениеЗаполнено(СтрокаДанных["Р_Количество2"]) И ЗначениеЗаполнено(СтрокаДанных["Р_Плотность"]) Тогда
				Если ИндексКоличество < ИндексКоличество2 Тогда
					СтрокаДанных["Р_Количество2"] = 0;
				КонецЕсли
			КонецЕсли;
			Р_ПересчитатьМассуОбъемПриОбнулении(СтрокаДанных);
		КонецЕсли
	Иначе
		Р_ПересчитатьМассуОбъемПриОбнулении(СтрокаДанных);
	КонецЕсли	
КонецПроцедуры

Процедура Р_ПересчитатьМассуОбъемПриОбнулении(СтрокаДанных)
	Если Не ЗначениеЗаполнено(СтрокаДанных.Р_Количество2) И ЗначениеЗаполнено(СтрокаДанных.Р_Плотность) И ЗначениеЗаполнено(СтрокаДанных.Количество) Тогда 
		Если СтрокаДанных.Р_Плотность <> 0 Тогда 
			Если Р_ВидУчетаГСМ = Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоМассе Тогда
				СтрокаДанных.Р_Количество2 = СтрокаДанных.Количество / СтрокаДанных.Р_Плотность;
			ИначеЕсли Р_ВидУчетаГСМ = Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоОбъему Тогда
				СтрокаДанных.Р_Количество2 = СтрокаДанных.Количество * СтрокаДанных.Р_Плотность;
			Иначе
				СтрокаДанных.Р_Количество2 = 0;
			КонецЕсли
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаДанных.Р_Плотность) И ЗначениеЗаполнено(СтрокаДанных.Р_Количество2) И ЗначениеЗаполнено(СтрокаДанных.Количество) Тогда 
		Если СтрокаДанных.Р_Количество2 <> 0 Тогда 
			Если Р_ВидУчетаГСМ = Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоМассе Тогда
				СтрокаДанных.Р_Плотность = СтрокаДанных.Количество / СтрокаДанных.Р_Количество2;
			ИначеЕсли Р_ВидУчетаГСМ = Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоОбъему Тогда
				СтрокаДанных.Р_Плотность = СтрокаДанных.Р_Количество2 / СтрокаДанных.Количество;
			Иначе
				СтрокаДанных.Р_Плотность = 0;
			КонецЕсли
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаДанных.Количество) И ЗначениеЗаполнено(СтрокаДанных.Р_Количество2) И ЗначениеЗаполнено(СтрокаДанных.Р_Плотность) Тогда 
		Если Р_ВидУчетаГСМ = Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоМассе Тогда
			СтрокаДанных.Количество = СтрокаДанных.Р_Количество2 * СтрокаДанных.Р_Плотность;
		ИначеЕсли Р_ВидУчетаГСМ = Перечисления.Р_ВидОсновногоКоличественногоУчетаГСМ.ПоОбъему Тогда
			СтрокаДанных.Количество = СтрокаДанных.Р_Количество2 / СтрокаДанных.Р_Плотность;
		Иначе
			СтрокаДанных.Количество = 0;
		КонецЕсли;
		ЭлементКоличество = ЭлементыФормы.Товары.Колонки.Количество.ЭлементУправления;
		ПриИзмененииКоличестваТовары(ЭлементКоличество);
	КонецЕсли;
КонецПроцедуры

Процедура Р_ПолучитьСреднююПлотностьПоСкладу(СтрокаДанных)

	Если НЕ (ЗначениеЗаполнено(СтрокаДанных.Номенклатура) и 
		(ЗначениеЗаполнено(СтрокаДанных.Склад) или ЗначениеЗаполнено(Склад) )) Тогда 
		Возврат;
	КонецЕсли;

	
	СкладСписания = ?(ЗначениеЗаполнено(СтрокаДанных.Склад), СтрокаДанных.Склад,Склад);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.СерияНоменклатуры,
	|	ВложенныйЗапрос.МассаОстаток,
	|	ВложенныйЗапрос.ОбъемОстаток,
	|	ВложенныйЗапрос.Плотность
	|ИЗ
	|	(ВЫБРАТЬ
	|		Р_ГСМНаСкладахОстатки.Склад КАК Склад,
	|		Р_ГСМНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|		Р_ГСМНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Р_ГСМНаСкладахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|		СУММА(Р_ГСМНаСкладахОстатки.МассаОстаток) КАК МассаОстаток,
	|		СУММА(Р_ГСМНаСкладахОстатки.ОбъемОстаток) КАК ОбъемОстаток,
	|		СРЕДНЕЕ(ВЫБОР
	|				КОГДА ЕСТЬNULL(Р_ГСМНаСкладахОстатки.ОбъемОстаток, 0) = 0
	|					ТОГДА 0
	|				ИНАЧЕ ЕСТЬNULL(Р_ГСМНаСкладахОстатки.МассаОстаток, 0) / ЕСТЬNULL(Р_ГСМНаСкладахОстатки.ОбъемОстаток, 0)
	|			КОНЕЦ) КАК Плотность
	|	ИЗ
	|		РегистрНакопления.Р_ГСМНаСкладах.Остатки(
	|				&Период,
	|				Номенклатура = &Номенклатура
	|					И Склад = &Склад
	|					И Номенклатура.ВидНоменклатуры.ТипНоменклатуры = &ТипНоменклатурыГСМ) КАК Р_ГСМНаСкладахОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Р_ГСМНаСкладахОстатки.СерияНоменклатуры,
	|		Р_ГСМНаСкладахОстатки.ХарактеристикаНоменклатуры,
	|		Р_ГСМНаСкладахОстатки.Номенклатура,
	|		Р_ГСМНаСкладахОстатки.Склад) КАК ВложенныйЗапрос";
	Запрос.УстановитьПараметр("Период",ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("Номенклатура",СтрокаДанных.Номенклатура);
	Запрос.УстановитьПараметр("Склад",СкладСписания);
	Запрос.УстановитьПараметр("ТипНоменклатурыГСМ",Перечисления.ТипыНоменклатуры.ГСМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда 
		СтрокаДанных.Р_Плотность = Выборка.Плотность;
	КонецЕсли;
		
КонецПроцедуры

Процедура Р_ОпределитьНаименованиеНоменклатуры(СтрокаТабличнойЧасти,Контрагент = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Контрагент = Неопределено Тогда 
		СтрокаТабличнойЧасти.Р_ВариантНаименования = СтрокаТабличнойЧасти.Номенклатура.Наименование;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НоменклатураКонтрагентов.Номенклатура,
		|	НоменклатураКонтрагентов.Контрагент,
		|	НоменклатураКонтрагентов.ХарактеристикаНоменклатуры,
		|	НоменклатураКонтрагентов.НаименованиеНоменклатурыКонтрагента
		|ИЗ
		|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|ГДЕ
		|	НоменклатураКонтрагентов.Контрагент = &Контрагент
		|	И НоменклатураКонтрагентов.Номенклатура = &Номенклатура
		|	И НоменклатураКонтрагентов.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
		//Запрос.УстановитьПараметр("Период",ЭтотОбъект.Дата);
		Запрос.УстановитьПараметр("Номенклатура",СтрокаТабличнойЧасти.Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			СтрокаТабличнойЧасти.Р_ВариантНаименования	= Выборка.НаименованиеНоменклатурыКонтрагента;
		Иначе
			СтрокаТабличнойЧасти.Р_ВариантНаименования = СтрокаТабличнойЧасти.Номенклатура.Наименование;
		КонецЕсли;
		
	КонецЕсли;//Контрагент = Неопределено
	
КонецПроцедуры

Процедура Р_ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
   
   Если мКолонкиТовары.Найти("Р_ЦенаГСМ")<>Неопределено тогда
		ОформлениеСтроки.Ячейки.Р_ЦенаГСМ.ОтображатьТекст = Истина;
		Если ДанныеСтроки.Р_НоминалГСМ > 0 Тогда
			ОформлениеСтроки.Ячейки.Р_ЦенаГСМ.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Цена/ДанныеСтроки.Р_НоминалГСМ);
		Иначе
			ОформлениеСтроки.Ячейки.Р_ЦенаГСМ.Текст = "0";
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.СуммаБезСкидок.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма);
   КонецЕсли;
   

КонецПроцедуры // ТоварыПриВыводеСтроки()

Процедура Р_ТранспортПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Р_Транспорт) И (ТипЗнч(Р_Транспорт) = Тип("СправочникСсылка.Р_Автомобили")) Тогда
		Р_ГосНомерАвто = Р_Транспорт.ГосНомер;
		Выборка = РегистрыСведений.Р_АвтомобилиПредприятий.Выбрать(Новый Структура("Автомобиль", Р_Транспорт));
		Если Выборка.Следующий() Тогда
			Р_Перевозчик = Выборка.Предприятие;
			Р_Водитель = Выборка.Водитель;
		КонецЕсли
	КонецЕсли
КонецПроцедуры

Процедура ВывестиИнформациюОбИспользованииРеквизитовДляГСМ()
	Сообщить("Особенности ввода данных и двойного количественного учета ГСМ на нефтебазе (регистр ""ГСМ на складах (Р)""):", СтатусСообщения.Информация);
	Сообщить(" - при вводе объема, массы, плотности в любой последовательности, если один из параметров пустой, он будет заполнен по двум остальным по формуле");
	Сообщить(" - при вводе 1-го количества (есть плотность) будет пересчитано 2-е количество");
	Сообщить(" - при вводе 2-го количества (есть плотность) это кол-во останется тем, что введено, ничего не пересчитывается");
	Сообщить(" - при вводе плотности будет пересчитано 2-е количество");
	Сообщить(" - при уст. флаге ""Введена вручную 2-я ед."" в движения попадет 2-е кол-во из документа, иначе - расчетное значение по 1-му кол-ву и плотности");
КонецПроцедуры

Процедура ДоступностьДатаКнопкиОКЗаписать()
	
	Для каждого Элемент Из ЭлементыФормы Цикл
		Если ТипЗнч(Элемент) = Тип("Флажок") Тогда
			Элемент.Доступность = Ложь;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеВвода") Тогда
			Если Элемент.Имя = "Дата" Тогда
				Элемент.ТолькоПросмотр = Ложь;
			Иначе
				Элемент.ТолькоПросмотр = Истина;
			КонецЕсли
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТабличноеПоле") Тогда
			Элемент.ТолькоПросмотр = Истина;
		ИначеЕсли ТипЗнч(Элемент) = Тип("Кнопка") Тогда
			Если (Элемент.Имя = "ОК") ИЛИ (Элемент.Имя = "Записать") Тогда
				Элемент.Доступность = Истина;
			Иначе
				Элемент.Доступность = Ложь;
			КонецЕсли
		КонецЕсли
	КонецЦикла
	
КонецПроцедуры

Процедура ТоварыКоличествоЗаявкиПриИзменении(Элемент)
   	Если ЭтотОбъект.Контрагент.ЗапретПродажи=Истина	тогда
 			Предупреждение("Снимите запрет на продажу данному контрагенту!");
		КонецЕсли;
		
	Если РольДоступна("ОтделСбыта")  И ЭлементыФормы.Товары.ТекущиеДанные.Количество=0 тогда
		ЭлементыФормы.Товары.ДобавитьСтроку();	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ЭтотОбъект.ИтогоКоличествоТовара=0 И ЭтотОбъект.ИтогоКоличествоЗаявки<>0 
		И не ЭтотОбъект.ПометкаУдаления И не ЭтотОбъект.Р_ЗапретРедактирования  тогда
				Документы.РеализацияТоваровУслуг.СоздатьЗаказ(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыХарактеристикаНоменклатурыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
		СтрокаТабличнойЧасти=ЭлементыФормы.Товары.ТекущаяСтрока;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ХарактеристикаНоменклатуры.Ссылка
	                      |ИЗ
	                      |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаНоменклатуры
	                      |ГДЕ
	                      |	ХарактеристикаНоменклатуры.ПометкаУдаления = ЛОЖЬ
	                      |	И ХарактеристикаНоменклатуры.Владелец = &Номенклатура");
	
	Запрос.УстановитьПараметр("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокУпаковок = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокУпаковок.Добавить(Выборка.ссылка);
	КонецЦикла;
	Элемент.СписокВыбора= СписокУпаковок;
КонецПроцедуры

Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	Попытка 
		КодЧисло=Число(СокрЛП(Текст));
	Исключение
		КодЧисло=0;
	КонецПопытки;
	Если КодЧисло<>0 Тогда
		СтандартнаяОбработка=ложь;
		НовКод=ДополнительныеФункции.НайтиКонтрагентаПоКодПик(КодЧисло);
			Если не НовКод=неопределено тогда 
				Элемент.Значение=НовКод.Контрагент;
				Значение=НовКод.Контрагент;
				ЭтотОбъект.Контрагент=НовКод.Контрагент;
				ЭтотОбъект.АдресДоставки	= НовКод.Представление;
				ЭтотОбъект.ВидАдреса		= НовКод.Вид;
				ЭтотОбъект.БазовыйМаршрут   = НовКод.Маршрут;
			иначе
				СтандартнаяОбработка=Истина;
				ЭтотОбъект.АдресДоставки	= "";
				ЭтотОбъект.ВидАдреса		= Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
				ЭтотОбъект.БазовыйМаршрут   = Справочники.Маршруты.ПустаяСсылка();
			КонецЕсли;
	Иначе
		СтандартнаяОбработка=Истина;
		ЭтотОбъект.АдресДоставки	= "";
		ЭтотОбъект.ВидАдреса		= Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
		ЭтотОбъект.БазовыйМаршрут   = Справочники.Маршруты.ПустаяСсылка();
	КонецЕсли; 
КонецПроцедуры

Процедура КоманднаяПанельТоварыЗаполнитьЗаказомНаДеньНедели(Кнопка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество,
		|	ЗаказПокупателяТовары.Номенклатура,
		|	НАЧАЛОПЕРИОДА(ЗаказПокупателяТовары.Ссылка.ДатаОтгрузки, ДЕНЬ) КАК ДатаОтгрузки
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ЗаказПокупателяТовары.Ссылка.ДатаОтгрузки >= &Дата1
		|	И ЗаказПокупателяТовары.Ссылка.ДатаОтгрузки <= &Дата2
		|	И ДЕНЬНЕДЕЛИ(НАЧАЛОПЕРИОДА(ЗаказПокупателяТовары.Ссылка.ДатаОтгрузки, ДЕНЬ)) = &ДеньНеделиОтгрузки
		|	И ЗаказПокупателяТовары.Ссылка.Контрагент = &Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ЗаказПокупателяТовары.Ссылка.ДатаОтгрузки, ДЕНЬ),
		|	ЗаказПокупателяТовары.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателяТовары.Номенклатура.Родитель.Наименование,
		|	ЗаказПокупателяТовары.Номенклатура.Наименование";
	
	Запрос.УстановитьПараметр("Дата1",НачалоНедели(НачалоНедели(ЭтотОбъект.Дата)-1));
	Запрос.УстановитьПараметр("Дата2", КонецНедели(НачалоНедели(ЭтотОбъект.Дата)-1));
	Запрос.УстановитьПараметр("ДеньНеделиОтгрузки", ДеньНедели(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		стрТовары=Товары.Добавить();
		стрТовары.Номенклатура=ВыборкаДетальныеЗаписи.Номенклатура;
		стрТовары.КоличествоЗаявки=ВыборкаДетальныеЗаписи.Количество;
	КонецЦикла;		
КонецПроцедуры

Процедура ТоварыКоличествоШтЗаявкиПриИзменении(Элемент)
	Если ЭтотОбъект.Контрагент.ЗапретПродажи=Истина	тогда
 			Предупреждение("Снимите запрет на продажу данному контрагенту!");
	КонецЕсли;
	
	Текстр=ЭлементыФормы.Товары.ТекущиеДанные;
	Текстр.КоличествоЗаявки=Текстр.КоличествоШтЗаявки*Текстр.Номенклатура.ВесБатона;
	Если РольДоступна("ОтделСбыта") И Текстр.Количество=0 тогда
		ЭлементыФормы.Товары.ДобавитьСтроку();	
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Количество<>0 И (Элемент.ТекущаяКолонка.Данные="КоличествоШтЗаявки" ИЛИ
			Элемент.ТекущаяКолонка.Данные="КоличествоЗаявки" ИЛИ	
		    Элемент.ТекущаяКолонка.Данные="КоличествоВУпаковке" ИЛИ	
			Элемент.ТекущаяКолонка.Данные="КоличествоШтВУпаковке" ) тогда
	 		Предупреждение("Позиция отгружена - изменения не возможны !");
		 Отказ=Истина;			
	КонецЕсли;
		
	
	Если Элемент.ТекущаяКолонка.Данные="КоличествоШтЗаявки" И Элемент.ТекущиеДанные.Номенклатура.ВесБатона=0 тогда
		 Предупреждение("Нет данных о весе батона !");
		 Отказ=Истина;
	КонецЕсли;
	
	Если (Элемент.ТекущаяКолонка.Данные="КоличествоШтВУпаковке" или Элемент.ТекущаяКолонка.Данные="КоличествоВУпаковке") И не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ХарактеристикаНоменклатуры) тогда
		 Предупреждение("Не выбрана упаковка!");
		 Отказ=Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыКоличествоШтВУпаковкеПриИзменении(Элемент)
	Текстр=ЭлементыФормы.Товары.ТекущиеДанные;
	Если Текстр.КоличествоШтВУпаковке>0 тогда
		Текстр.КоличествоВУпаковке=0;	
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыКоличествоВУпаковкеПриИзменении(Элемент)
	Текстр=ЭлементыФормы.Товары.ТекущиеДанные;
	Если Текстр.КоличествоВУпаковке>0 тогда
		Текстр.КоличествоШтВУпаковке=0;	
	КонецЕсли;
КонецПроцедуры
//***170212
Процедура ТоварыХарактеристикаНоменклатурыАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
		Текстр=ЭлементыФормы.Товары.ТекущиеДанные;
	Если Текст="1" тогда
		НаименованиеУпаковки="Газ";
	ИначеЕсли Текст="2" Тогда 
		НаименованиеУпаковки="Вакуум";		
	ИначеЕсли Текст="3" Тогда 
		НаименованиеУпаковки="ТВУ";		
	ИначеЕсли Текст="4" Тогда 
		НаименованиеУпаковки="Вакуум 1/2";		
	Иначе
		НаименованиеУпаковки="             ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
		|	ХарактеристикиНоменклатуры.Владелец,
		|	ХарактеристикиНоменклатуры.Наименование
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И ХарактеристикиНоменклатуры.Наименование ПОДОБНО &Наименование
		|	И ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Владелец", Текстр.Номенклатура);
	Запрос.УстановитьПараметр("Наименование", НаименованиеУпаковки);
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой()тогда 
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Элемент.Значение= ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	Если  Элемент.Значение= Неопределено Тогда
		Сообщить("Значение не найдено!");
	КонецЕсли;
КонецПроцедуры


ЭтаФорма.УстановитьДействие("ПриОткрытии", Новый Действие("Р_ПриОткрытии"));

ЭлементыФормы.Товары.УстановитьДействие("ПередОкончаниемРедактирования", Новый Действие("Р_ТоварыПередОкончаниемРедактирования"));

ЭлементыФормы.Товары.УстановитьДействие("ПриВыводеСтроки", Новый Действие("Р_ТоварыПриВыводеСтроки"));

ЭлементыФормы.Товары.УстановитьДействие("ПослеУдаления", Новый Действие("Р_ТоварыПослеУдаления"));

ЭлементыФормы.Товары.Колонки.Номенклатура.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("Р_ТоварыНоменклатураПриИзменении"));

ЭлементыФормы.Товары.Колонки.Количество.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("Р_ТоварыКоличествоПриИзменении"));

//КОНЕЦ ВСТАВКИ

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары                = ЭлементыФормы.Товары.Колонки;
мКолонкиТаблицаАвтоСкидок     = ЭлементыФормы.АвтоматическиеСкидки.Колонки;
мКолонкиУслуги                = ЭлементыФормы.Услуги.Колонки;
мКолонкиВозвратнаяТара        = ЭлементыФормы.ВозвратнаяТара.Колонки;
мКолонкиДокументы = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.Колонки;

мРазрешитьНулевыеЦеныВОпте    = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВОпте();
мРазрешитьНулевыеЦеныВРознице = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();
мИспользоватьТару             = глЗначениеПеременной("ИспользоватьВозвратнуюТару");

мПерерасчетПроизведен = ЛОЖЬ;

мТерминалы = ПолучитьСерверТО().ПолучитьСписокУстройств(
                 Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);				  
